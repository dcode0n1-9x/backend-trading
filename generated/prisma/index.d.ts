
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model BankAccount
 * 
 */
export type BankAccount = $Result.DefaultSelection<Prisma.$BankAccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model FundTransaction
 * 
 */
export type FundTransaction = $Result.DefaultSelection<Prisma.$FundTransactionPayload>
/**
 * Model Margin
 * 
 */
export type Margin = $Result.DefaultSelection<Prisma.$MarginPayload>
/**
 * Model Instrument
 * 
 */
export type Instrument = $Result.DefaultSelection<Prisma.$InstrumentPayload>
/**
 * Model MarketDepth
 * 
 */
export type MarketDepth = $Result.DefaultSelection<Prisma.$MarketDepthPayload>
/**
 * Model PriceHistory
 * 
 */
export type PriceHistory = $Result.DefaultSelection<Prisma.$PriceHistoryPayload>
/**
 * Model Portfolio
 * 
 */
export type Portfolio = $Result.DefaultSelection<Prisma.$PortfolioPayload>
/**
 * Model Holding
 * 
 */
export type Holding = $Result.DefaultSelection<Prisma.$HoldingPayload>
/**
 * Model Position
 * 
 */
export type Position = $Result.DefaultSelection<Prisma.$PositionPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model Trade
 * 
 */
export type Trade = $Result.DefaultSelection<Prisma.$TradePayload>
/**
 * Model TradeCharges
 * 
 */
export type TradeCharges = $Result.DefaultSelection<Prisma.$TradeChargesPayload>
/**
 * Model GTTOrder
 * 
 */
export type GTTOrder = $Result.DefaultSelection<Prisma.$GTTOrderPayload>
/**
 * Model Watchlist
 * 
 */
export type Watchlist = $Result.DefaultSelection<Prisma.$WatchlistPayload>
/**
 * Model WatchlistItem
 * 
 */
export type WatchlistItem = $Result.DefaultSelection<Prisma.$WatchlistItemPayload>
/**
 * Model Alert
 * 
 */
export type Alert = $Result.DefaultSelection<Prisma.$AlertPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Basket
 * 
 */
export type Basket = $Result.DefaultSelection<Prisma.$BasketPayload>
/**
 * Model BasketItem
 * 
 */
export type BasketItem = $Result.DefaultSelection<Prisma.$BasketItemPayload>
/**
 * Model CorporateAction
 * 
 */
export type CorporateAction = $Result.DefaultSelection<Prisma.$CorporateActionPayload>
/**
 * Model TradeJournal
 * 
 */
export type TradeJournal = $Result.DefaultSelection<Prisma.$TradeJournalPayload>
/**
 * Model DailyPnL
 * 
 */
export type DailyPnL = $Result.DefaultSelection<Prisma.$DailyPnLPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  BROKER: 'BROKER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const KYCStatus: {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

export type KYCStatus = (typeof KYCStatus)[keyof typeof KYCStatus]


export const AccountType: {
  INDIVIDUAL: 'INDIVIDUAL',
  CORPORATE: 'CORPORATE',
  PARTNERSHIP: 'PARTNERSHIP',
  HUF: 'HUF'
};

export type AccountType = (typeof AccountType)[keyof typeof AccountType]


export const RiskProfile: {
  LOW: 'LOW',
  MODERATE: 'MODERATE',
  HIGH: 'HIGH'
};

export type RiskProfile = (typeof RiskProfile)[keyof typeof RiskProfile]


export const BankAccountType: {
  SAVINGS: 'SAVINGS',
  CURRENT: 'CURRENT'
};

export type BankAccountType = (typeof BankAccountType)[keyof typeof BankAccountType]


export const FundTransactionType: {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL'
};

export type FundTransactionType = (typeof FundTransactionType)[keyof typeof FundTransactionType]


export const TransactionStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type TransactionStatus = (typeof TransactionStatus)[keyof typeof TransactionStatus]


export const PaymentMode: {
  UPI: 'UPI',
  NET_BANKING: 'NET_BANKING',
  NEFT: 'NEFT',
  RTGS: 'RTGS',
  IMPS: 'IMPS'
};

export type PaymentMode = (typeof PaymentMode)[keyof typeof PaymentMode]


export const Exchange: {
  NSE: 'NSE',
  BSE: 'BSE',
  NFO: 'NFO',
  BFO: 'BFO',
  CDS: 'CDS',
  MCX: 'MCX'
};

export type Exchange = (typeof Exchange)[keyof typeof Exchange]


export const Segment: {
  EQUITY: 'EQUITY',
  FUTURES: 'FUTURES',
  OPTIONS: 'OPTIONS',
  CURRENCY: 'CURRENCY',
  COMMODITY: 'COMMODITY'
};

export type Segment = (typeof Segment)[keyof typeof Segment]


export const InstrumentType: {
  EQ: 'EQ',
  FUTIDX: 'FUTIDX',
  FUTSTK: 'FUTSTK',
  OPTIDX: 'OPTIDX',
  OPTSTK: 'OPTSTK',
  FUTCOM: 'FUTCOM',
  OPTCOM: 'OPTCOM',
  FUTCUR: 'FUTCUR',
  OPTCUR: 'OPTCUR'
};

export type InstrumentType = (typeof InstrumentType)[keyof typeof InstrumentType]


export const OrderSide: {
  BUY: 'BUY',
  SELL: 'SELL'
};

export type OrderSide = (typeof OrderSide)[keyof typeof OrderSide]


export const OrderVariety: {
  REGULAR: 'REGULAR',
  AMO: 'AMO',
  BO: 'BO',
  CO: 'CO',
  ICEBERG: 'ICEBERG'
};

export type OrderVariety = (typeof OrderVariety)[keyof typeof OrderVariety]


export const OrderType: {
  MARKET: 'MARKET',
  LIMIT: 'LIMIT',
  SL: 'SL',
  SLM: 'SLM'
};

export type OrderType = (typeof OrderType)[keyof typeof OrderType]


export const TransactionType: {
  BUY: 'BUY',
  SELL: 'SELL'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]


export const OrderValidity: {
  DAY: 'DAY',
  IOC: 'IOC',
  TTL: 'TTL'
};

export type OrderValidity = (typeof OrderValidity)[keyof typeof OrderValidity]


export const ProductType: {
  CNC: 'CNC',
  MIS: 'MIS',
  NRML: 'NRML'
};

export type ProductType = (typeof ProductType)[keyof typeof ProductType]


export const OrderStatus: {
  PENDING: 'PENDING',
  OPEN: 'OPEN',
  COMPLETE: 'COMPLETE',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED',
  MODIFIED: 'MODIFIED',
  TRIGGER_PENDING: 'TRIGGER_PENDING'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const PositionType: {
  DAY: 'DAY',
  OVERNIGHT: 'OVERNIGHT'
};

export type PositionType = (typeof PositionType)[keyof typeof PositionType]


export const GTTType: {
  SINGLE: 'SINGLE',
  OCO: 'OCO'
};

export type GTTType = (typeof GTTType)[keyof typeof GTTType]


export const TriggerType: {
  SINGLE: 'SINGLE',
  TWO_LEG: 'TWO_LEG'
};

export type TriggerType = (typeof TriggerType)[keyof typeof TriggerType]


export const GTTStatus: {
  ACTIVE: 'ACTIVE',
  TRIGGERED: 'TRIGGERED',
  DISABLED: 'DISABLED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

export type GTTStatus = (typeof GTTStatus)[keyof typeof GTTStatus]


export const AlertType: {
  PRICE_ALERT: 'PRICE_ALERT',
  PERCENTAGE_CHANGE: 'PERCENTAGE_CHANGE',
  VOLUME_SPIKE: 'VOLUME_SPIKE',
  NEWS: 'NEWS',
  CORPORATE_ACTION: 'CORPORATE_ACTION',
  MARGIN_CALL: 'MARGIN_CALL',
  ORDER_UPDATE: 'ORDER_UPDATE'
};

export type AlertType = (typeof AlertType)[keyof typeof AlertType]


export const NotificationType: {
  ORDER_UPDATE: 'ORDER_UPDATE',
  TRADE_EXECUTED: 'TRADE_EXECUTED',
  FUND_UPDATE: 'FUND_UPDATE',
  MARGIN_CALL: 'MARGIN_CALL',
  GTT_TRIGGERED: 'GTT_TRIGGERED',
  CORPORATE_ACTION: 'CORPORATE_ACTION',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const Priority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const CorporateActionType: {
  DIVIDEND: 'DIVIDEND',
  BONUS: 'BONUS',
  SPLIT: 'SPLIT',
  MERGER: 'MERGER',
  RIGHTS: 'RIGHTS',
  BUYBACK: 'BUYBACK',
  DELISTING: 'DELISTING'
};

export type CorporateActionType = (typeof CorporateActionType)[keyof typeof CorporateActionType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type KYCStatus = $Enums.KYCStatus

export const KYCStatus: typeof $Enums.KYCStatus

export type AccountType = $Enums.AccountType

export const AccountType: typeof $Enums.AccountType

export type RiskProfile = $Enums.RiskProfile

export const RiskProfile: typeof $Enums.RiskProfile

export type BankAccountType = $Enums.BankAccountType

export const BankAccountType: typeof $Enums.BankAccountType

export type FundTransactionType = $Enums.FundTransactionType

export const FundTransactionType: typeof $Enums.FundTransactionType

export type TransactionStatus = $Enums.TransactionStatus

export const TransactionStatus: typeof $Enums.TransactionStatus

export type PaymentMode = $Enums.PaymentMode

export const PaymentMode: typeof $Enums.PaymentMode

export type Exchange = $Enums.Exchange

export const Exchange: typeof $Enums.Exchange

export type Segment = $Enums.Segment

export const Segment: typeof $Enums.Segment

export type InstrumentType = $Enums.InstrumentType

export const InstrumentType: typeof $Enums.InstrumentType

export type OrderSide = $Enums.OrderSide

export const OrderSide: typeof $Enums.OrderSide

export type OrderVariety = $Enums.OrderVariety

export const OrderVariety: typeof $Enums.OrderVariety

export type OrderType = $Enums.OrderType

export const OrderType: typeof $Enums.OrderType

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

export type OrderValidity = $Enums.OrderValidity

export const OrderValidity: typeof $Enums.OrderValidity

export type ProductType = $Enums.ProductType

export const ProductType: typeof $Enums.ProductType

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type PositionType = $Enums.PositionType

export const PositionType: typeof $Enums.PositionType

export type GTTType = $Enums.GTTType

export const GTTType: typeof $Enums.GTTType

export type TriggerType = $Enums.TriggerType

export const TriggerType: typeof $Enums.TriggerType

export type GTTStatus = $Enums.GTTStatus

export const GTTStatus: typeof $Enums.GTTStatus

export type AlertType = $Enums.AlertType

export const AlertType: typeof $Enums.AlertType

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type CorporateActionType = $Enums.CorporateActionType

export const CorporateActionType: typeof $Enums.CorporateActionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bankAccount`: Exposes CRUD operations for the **BankAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BankAccounts
    * const bankAccounts = await prisma.bankAccount.findMany()
    * ```
    */
  get bankAccount(): Prisma.BankAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fundTransaction`: Exposes CRUD operations for the **FundTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FundTransactions
    * const fundTransactions = await prisma.fundTransaction.findMany()
    * ```
    */
  get fundTransaction(): Prisma.FundTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.margin`: Exposes CRUD operations for the **Margin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Margins
    * const margins = await prisma.margin.findMany()
    * ```
    */
  get margin(): Prisma.MarginDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.instrument`: Exposes CRUD operations for the **Instrument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instruments
    * const instruments = await prisma.instrument.findMany()
    * ```
    */
  get instrument(): Prisma.InstrumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketDepth`: Exposes CRUD operations for the **MarketDepth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketDepths
    * const marketDepths = await prisma.marketDepth.findMany()
    * ```
    */
  get marketDepth(): Prisma.MarketDepthDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.priceHistory`: Exposes CRUD operations for the **PriceHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PriceHistories
    * const priceHistories = await prisma.priceHistory.findMany()
    * ```
    */
  get priceHistory(): Prisma.PriceHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.portfolio`: Exposes CRUD operations for the **Portfolio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Portfolios
    * const portfolios = await prisma.portfolio.findMany()
    * ```
    */
  get portfolio(): Prisma.PortfolioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.holding`: Exposes CRUD operations for the **Holding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Holdings
    * const holdings = await prisma.holding.findMany()
    * ```
    */
  get holding(): Prisma.HoldingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.position`: Exposes CRUD operations for the **Position** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Positions
    * const positions = await prisma.position.findMany()
    * ```
    */
  get position(): Prisma.PositionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trade`: Exposes CRUD operations for the **Trade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trades
    * const trades = await prisma.trade.findMany()
    * ```
    */
  get trade(): Prisma.TradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tradeCharges`: Exposes CRUD operations for the **TradeCharges** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TradeCharges
    * const tradeCharges = await prisma.tradeCharges.findMany()
    * ```
    */
  get tradeCharges(): Prisma.TradeChargesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gTTOrder`: Exposes CRUD operations for the **GTTOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GTTOrders
    * const gTTOrders = await prisma.gTTOrder.findMany()
    * ```
    */
  get gTTOrder(): Prisma.GTTOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.watchlist`: Exposes CRUD operations for the **Watchlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Watchlists
    * const watchlists = await prisma.watchlist.findMany()
    * ```
    */
  get watchlist(): Prisma.WatchlistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.watchlistItem`: Exposes CRUD operations for the **WatchlistItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WatchlistItems
    * const watchlistItems = await prisma.watchlistItem.findMany()
    * ```
    */
  get watchlistItem(): Prisma.WatchlistItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alert`: Exposes CRUD operations for the **Alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alerts
    * const alerts = await prisma.alert.findMany()
    * ```
    */
  get alert(): Prisma.AlertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.basket`: Exposes CRUD operations for the **Basket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baskets
    * const baskets = await prisma.basket.findMany()
    * ```
    */
  get basket(): Prisma.BasketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.basketItem`: Exposes CRUD operations for the **BasketItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BasketItems
    * const basketItems = await prisma.basketItem.findMany()
    * ```
    */
  get basketItem(): Prisma.BasketItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.corporateAction`: Exposes CRUD operations for the **CorporateAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CorporateActions
    * const corporateActions = await prisma.corporateAction.findMany()
    * ```
    */
  get corporateAction(): Prisma.CorporateActionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tradeJournal`: Exposes CRUD operations for the **TradeJournal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TradeJournals
    * const tradeJournals = await prisma.tradeJournal.findMany()
    * ```
    */
  get tradeJournal(): Prisma.TradeJournalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dailyPnL`: Exposes CRUD operations for the **DailyPnL** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyPnLS
    * const dailyPnLS = await prisma.dailyPnL.findMany()
    * ```
    */
  get dailyPnL(): Prisma.DailyPnLDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.18.0
   * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import Bytes = runtime.Bytes
  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserProfile: 'UserProfile',
    BankAccount: 'BankAccount',
    Session: 'Session',
    FundTransaction: 'FundTransaction',
    Margin: 'Margin',
    Instrument: 'Instrument',
    MarketDepth: 'MarketDepth',
    PriceHistory: 'PriceHistory',
    Portfolio: 'Portfolio',
    Holding: 'Holding',
    Position: 'Position',
    Order: 'Order',
    Trade: 'Trade',
    TradeCharges: 'TradeCharges',
    GTTOrder: 'GTTOrder',
    Watchlist: 'Watchlist',
    WatchlistItem: 'WatchlistItem',
    Alert: 'Alert',
    Notification: 'Notification',
    Basket: 'Basket',
    BasketItem: 'BasketItem',
    CorporateAction: 'CorporateAction',
    TradeJournal: 'TradeJournal',
    DailyPnL: 'DailyPnL'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userProfile" | "bankAccount" | "session" | "fundTransaction" | "margin" | "instrument" | "marketDepth" | "priceHistory" | "portfolio" | "holding" | "position" | "order" | "trade" | "tradeCharges" | "gTTOrder" | "watchlist" | "watchlistItem" | "alert" | "notification" | "basket" | "basketItem" | "corporateAction" | "tradeJournal" | "dailyPnL"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      BankAccount: {
        payload: Prisma.$BankAccountPayload<ExtArgs>
        fields: Prisma.BankAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          findFirst: {
            args: Prisma.BankAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          findMany: {
            args: Prisma.BankAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>[]
          }
          create: {
            args: Prisma.BankAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          createMany: {
            args: Prisma.BankAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BankAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>[]
          }
          delete: {
            args: Prisma.BankAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          update: {
            args: Prisma.BankAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          deleteMany: {
            args: Prisma.BankAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BankAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BankAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>[]
          }
          upsert: {
            args: Prisma.BankAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankAccountPayload>
          }
          aggregate: {
            args: Prisma.BankAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBankAccount>
          }
          groupBy: {
            args: Prisma.BankAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<BankAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankAccountCountArgs<ExtArgs>
            result: $Utils.Optional<BankAccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      FundTransaction: {
        payload: Prisma.$FundTransactionPayload<ExtArgs>
        fields: Prisma.FundTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FundTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FundTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>
          }
          findFirst: {
            args: Prisma.FundTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FundTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>
          }
          findMany: {
            args: Prisma.FundTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>[]
          }
          create: {
            args: Prisma.FundTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>
          }
          createMany: {
            args: Prisma.FundTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FundTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>[]
          }
          delete: {
            args: Prisma.FundTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>
          }
          update: {
            args: Prisma.FundTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>
          }
          deleteMany: {
            args: Prisma.FundTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FundTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FundTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>[]
          }
          upsert: {
            args: Prisma.FundTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundTransactionPayload>
          }
          aggregate: {
            args: Prisma.FundTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFundTransaction>
          }
          groupBy: {
            args: Prisma.FundTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FundTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FundTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<FundTransactionCountAggregateOutputType> | number
          }
        }
      }
      Margin: {
        payload: Prisma.$MarginPayload<ExtArgs>
        fields: Prisma.MarginFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarginFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarginFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>
          }
          findFirst: {
            args: Prisma.MarginFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarginFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>
          }
          findMany: {
            args: Prisma.MarginFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>[]
          }
          create: {
            args: Prisma.MarginCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>
          }
          createMany: {
            args: Prisma.MarginCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarginCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>[]
          }
          delete: {
            args: Prisma.MarginDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>
          }
          update: {
            args: Prisma.MarginUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>
          }
          deleteMany: {
            args: Prisma.MarginDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarginUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarginUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>[]
          }
          upsert: {
            args: Prisma.MarginUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarginPayload>
          }
          aggregate: {
            args: Prisma.MarginAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMargin>
          }
          groupBy: {
            args: Prisma.MarginGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarginGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarginCountArgs<ExtArgs>
            result: $Utils.Optional<MarginCountAggregateOutputType> | number
          }
        }
      }
      Instrument: {
        payload: Prisma.$InstrumentPayload<ExtArgs>
        fields: Prisma.InstrumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstrumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstrumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>
          }
          findFirst: {
            args: Prisma.InstrumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstrumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>
          }
          findMany: {
            args: Prisma.InstrumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>[]
          }
          create: {
            args: Prisma.InstrumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>
          }
          createMany: {
            args: Prisma.InstrumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstrumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>[]
          }
          delete: {
            args: Prisma.InstrumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>
          }
          update: {
            args: Prisma.InstrumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>
          }
          deleteMany: {
            args: Prisma.InstrumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstrumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstrumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>[]
          }
          upsert: {
            args: Prisma.InstrumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstrumentPayload>
          }
          aggregate: {
            args: Prisma.InstrumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstrument>
          }
          groupBy: {
            args: Prisma.InstrumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstrumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstrumentCountArgs<ExtArgs>
            result: $Utils.Optional<InstrumentCountAggregateOutputType> | number
          }
        }
      }
      MarketDepth: {
        payload: Prisma.$MarketDepthPayload<ExtArgs>
        fields: Prisma.MarketDepthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketDepthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketDepthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>
          }
          findFirst: {
            args: Prisma.MarketDepthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketDepthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>
          }
          findMany: {
            args: Prisma.MarketDepthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>[]
          }
          create: {
            args: Prisma.MarketDepthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>
          }
          createMany: {
            args: Prisma.MarketDepthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketDepthCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>[]
          }
          delete: {
            args: Prisma.MarketDepthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>
          }
          update: {
            args: Prisma.MarketDepthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>
          }
          deleteMany: {
            args: Prisma.MarketDepthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketDepthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketDepthUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>[]
          }
          upsert: {
            args: Prisma.MarketDepthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDepthPayload>
          }
          aggregate: {
            args: Prisma.MarketDepthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketDepth>
          }
          groupBy: {
            args: Prisma.MarketDepthGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketDepthGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketDepthCountArgs<ExtArgs>
            result: $Utils.Optional<MarketDepthCountAggregateOutputType> | number
          }
        }
      }
      PriceHistory: {
        payload: Prisma.$PriceHistoryPayload<ExtArgs>
        fields: Prisma.PriceHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          findFirst: {
            args: Prisma.PriceHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          findMany: {
            args: Prisma.PriceHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>[]
          }
          create: {
            args: Prisma.PriceHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          createMany: {
            args: Prisma.PriceHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PriceHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>[]
          }
          delete: {
            args: Prisma.PriceHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          update: {
            args: Prisma.PriceHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          deleteMany: {
            args: Prisma.PriceHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PriceHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PriceHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>[]
          }
          upsert: {
            args: Prisma.PriceHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PriceHistoryPayload>
          }
          aggregate: {
            args: Prisma.PriceHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePriceHistory>
          }
          groupBy: {
            args: Prisma.PriceHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriceHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<PriceHistoryCountAggregateOutputType> | number
          }
        }
      }
      Portfolio: {
        payload: Prisma.$PortfolioPayload<ExtArgs>
        fields: Prisma.PortfolioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortfolioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortfolioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findFirst: {
            args: Prisma.PortfolioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortfolioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findMany: {
            args: Prisma.PortfolioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          create: {
            args: Prisma.PortfolioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          createMany: {
            args: Prisma.PortfolioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PortfolioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          delete: {
            args: Prisma.PortfolioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          update: {
            args: Prisma.PortfolioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          deleteMany: {
            args: Prisma.PortfolioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PortfolioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PortfolioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          upsert: {
            args: Prisma.PortfolioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          aggregate: {
            args: Prisma.PortfolioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePortfolio>
          }
          groupBy: {
            args: Prisma.PortfolioGroupByArgs<ExtArgs>
            result: $Utils.Optional<PortfolioGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortfolioCountArgs<ExtArgs>
            result: $Utils.Optional<PortfolioCountAggregateOutputType> | number
          }
        }
      }
      Holding: {
        payload: Prisma.$HoldingPayload<ExtArgs>
        fields: Prisma.HoldingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HoldingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HoldingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>
          }
          findFirst: {
            args: Prisma.HoldingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HoldingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>
          }
          findMany: {
            args: Prisma.HoldingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>[]
          }
          create: {
            args: Prisma.HoldingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>
          }
          createMany: {
            args: Prisma.HoldingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HoldingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>[]
          }
          delete: {
            args: Prisma.HoldingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>
          }
          update: {
            args: Prisma.HoldingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>
          }
          deleteMany: {
            args: Prisma.HoldingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HoldingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HoldingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>[]
          }
          upsert: {
            args: Prisma.HoldingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HoldingPayload>
          }
          aggregate: {
            args: Prisma.HoldingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHolding>
          }
          groupBy: {
            args: Prisma.HoldingGroupByArgs<ExtArgs>
            result: $Utils.Optional<HoldingGroupByOutputType>[]
          }
          count: {
            args: Prisma.HoldingCountArgs<ExtArgs>
            result: $Utils.Optional<HoldingCountAggregateOutputType> | number
          }
        }
      }
      Position: {
        payload: Prisma.$PositionPayload<ExtArgs>
        fields: Prisma.PositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findFirst: {
            args: Prisma.PositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findMany: {
            args: Prisma.PositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          create: {
            args: Prisma.PositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          createMany: {
            args: Prisma.PositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PositionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          delete: {
            args: Prisma.PositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          update: {
            args: Prisma.PositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          deleteMany: {
            args: Prisma.PositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PositionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          upsert: {
            args: Prisma.PositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          aggregate: {
            args: Prisma.PositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePosition>
          }
          groupBy: {
            args: Prisma.PositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PositionCountArgs<ExtArgs>
            result: $Utils.Optional<PositionCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      Trade: {
        payload: Prisma.$TradePayload<ExtArgs>
        fields: Prisma.TradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          findFirst: {
            args: Prisma.TradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          findMany: {
            args: Prisma.TradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>[]
          }
          create: {
            args: Prisma.TradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          createMany: {
            args: Prisma.TradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>[]
          }
          delete: {
            args: Prisma.TradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          update: {
            args: Prisma.TradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          deleteMany: {
            args: Prisma.TradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TradeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>[]
          }
          upsert: {
            args: Prisma.TradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          aggregate: {
            args: Prisma.TradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrade>
          }
          groupBy: {
            args: Prisma.TradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TradeCountArgs<ExtArgs>
            result: $Utils.Optional<TradeCountAggregateOutputType> | number
          }
        }
      }
      TradeCharges: {
        payload: Prisma.$TradeChargesPayload<ExtArgs>
        fields: Prisma.TradeChargesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TradeChargesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TradeChargesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>
          }
          findFirst: {
            args: Prisma.TradeChargesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TradeChargesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>
          }
          findMany: {
            args: Prisma.TradeChargesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>[]
          }
          create: {
            args: Prisma.TradeChargesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>
          }
          createMany: {
            args: Prisma.TradeChargesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TradeChargesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>[]
          }
          delete: {
            args: Prisma.TradeChargesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>
          }
          update: {
            args: Prisma.TradeChargesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>
          }
          deleteMany: {
            args: Prisma.TradeChargesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TradeChargesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TradeChargesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>[]
          }
          upsert: {
            args: Prisma.TradeChargesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeChargesPayload>
          }
          aggregate: {
            args: Prisma.TradeChargesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTradeCharges>
          }
          groupBy: {
            args: Prisma.TradeChargesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TradeChargesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TradeChargesCountArgs<ExtArgs>
            result: $Utils.Optional<TradeChargesCountAggregateOutputType> | number
          }
        }
      }
      GTTOrder: {
        payload: Prisma.$GTTOrderPayload<ExtArgs>
        fields: Prisma.GTTOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GTTOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GTTOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>
          }
          findFirst: {
            args: Prisma.GTTOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GTTOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>
          }
          findMany: {
            args: Prisma.GTTOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>[]
          }
          create: {
            args: Prisma.GTTOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>
          }
          createMany: {
            args: Prisma.GTTOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GTTOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>[]
          }
          delete: {
            args: Prisma.GTTOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>
          }
          update: {
            args: Prisma.GTTOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>
          }
          deleteMany: {
            args: Prisma.GTTOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GTTOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GTTOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>[]
          }
          upsert: {
            args: Prisma.GTTOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GTTOrderPayload>
          }
          aggregate: {
            args: Prisma.GTTOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGTTOrder>
          }
          groupBy: {
            args: Prisma.GTTOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<GTTOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.GTTOrderCountArgs<ExtArgs>
            result: $Utils.Optional<GTTOrderCountAggregateOutputType> | number
          }
        }
      }
      Watchlist: {
        payload: Prisma.$WatchlistPayload<ExtArgs>
        fields: Prisma.WatchlistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchlistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchlistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          findFirst: {
            args: Prisma.WatchlistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchlistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          findMany: {
            args: Prisma.WatchlistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          create: {
            args: Prisma.WatchlistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          createMany: {
            args: Prisma.WatchlistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WatchlistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          delete: {
            args: Prisma.WatchlistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          update: {
            args: Prisma.WatchlistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          deleteMany: {
            args: Prisma.WatchlistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WatchlistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WatchlistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          upsert: {
            args: Prisma.WatchlistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          aggregate: {
            args: Prisma.WatchlistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWatchlist>
          }
          groupBy: {
            args: Prisma.WatchlistGroupByArgs<ExtArgs>
            result: $Utils.Optional<WatchlistGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchlistCountArgs<ExtArgs>
            result: $Utils.Optional<WatchlistCountAggregateOutputType> | number
          }
        }
      }
      WatchlistItem: {
        payload: Prisma.$WatchlistItemPayload<ExtArgs>
        fields: Prisma.WatchlistItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchlistItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchlistItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>
          }
          findFirst: {
            args: Prisma.WatchlistItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchlistItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>
          }
          findMany: {
            args: Prisma.WatchlistItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>[]
          }
          create: {
            args: Prisma.WatchlistItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>
          }
          createMany: {
            args: Prisma.WatchlistItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WatchlistItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>[]
          }
          delete: {
            args: Prisma.WatchlistItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>
          }
          update: {
            args: Prisma.WatchlistItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>
          }
          deleteMany: {
            args: Prisma.WatchlistItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WatchlistItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WatchlistItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>[]
          }
          upsert: {
            args: Prisma.WatchlistItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistItemPayload>
          }
          aggregate: {
            args: Prisma.WatchlistItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWatchlistItem>
          }
          groupBy: {
            args: Prisma.WatchlistItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<WatchlistItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchlistItemCountArgs<ExtArgs>
            result: $Utils.Optional<WatchlistItemCountAggregateOutputType> | number
          }
        }
      }
      Alert: {
        payload: Prisma.$AlertPayload<ExtArgs>
        fields: Prisma.AlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findFirst: {
            args: Prisma.AlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findMany: {
            args: Prisma.AlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          create: {
            args: Prisma.AlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          createMany: {
            args: Prisma.AlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          delete: {
            args: Prisma.AlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          update: {
            args: Prisma.AlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          deleteMany: {
            args: Prisma.AlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlertUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          upsert: {
            args: Prisma.AlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          aggregate: {
            args: Prisma.AlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert>
          }
          groupBy: {
            args: Prisma.AlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertCountArgs<ExtArgs>
            result: $Utils.Optional<AlertCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Basket: {
        payload: Prisma.$BasketPayload<ExtArgs>
        fields: Prisma.BasketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BasketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BasketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findFirst: {
            args: Prisma.BasketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BasketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          findMany: {
            args: Prisma.BasketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          create: {
            args: Prisma.BasketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          createMany: {
            args: Prisma.BasketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BasketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          delete: {
            args: Prisma.BasketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          update: {
            args: Prisma.BasketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          deleteMany: {
            args: Prisma.BasketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BasketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BasketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>[]
          }
          upsert: {
            args: Prisma.BasketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketPayload>
          }
          aggregate: {
            args: Prisma.BasketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBasket>
          }
          groupBy: {
            args: Prisma.BasketGroupByArgs<ExtArgs>
            result: $Utils.Optional<BasketGroupByOutputType>[]
          }
          count: {
            args: Prisma.BasketCountArgs<ExtArgs>
            result: $Utils.Optional<BasketCountAggregateOutputType> | number
          }
        }
      }
      BasketItem: {
        payload: Prisma.$BasketItemPayload<ExtArgs>
        fields: Prisma.BasketItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BasketItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BasketItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>
          }
          findFirst: {
            args: Prisma.BasketItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BasketItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>
          }
          findMany: {
            args: Prisma.BasketItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>[]
          }
          create: {
            args: Prisma.BasketItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>
          }
          createMany: {
            args: Prisma.BasketItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BasketItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>[]
          }
          delete: {
            args: Prisma.BasketItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>
          }
          update: {
            args: Prisma.BasketItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>
          }
          deleteMany: {
            args: Prisma.BasketItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BasketItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BasketItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>[]
          }
          upsert: {
            args: Prisma.BasketItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BasketItemPayload>
          }
          aggregate: {
            args: Prisma.BasketItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBasketItem>
          }
          groupBy: {
            args: Prisma.BasketItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BasketItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.BasketItemCountArgs<ExtArgs>
            result: $Utils.Optional<BasketItemCountAggregateOutputType> | number
          }
        }
      }
      CorporateAction: {
        payload: Prisma.$CorporateActionPayload<ExtArgs>
        fields: Prisma.CorporateActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorporateActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorporateActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>
          }
          findFirst: {
            args: Prisma.CorporateActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorporateActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>
          }
          findMany: {
            args: Prisma.CorporateActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>[]
          }
          create: {
            args: Prisma.CorporateActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>
          }
          createMany: {
            args: Prisma.CorporateActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorporateActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>[]
          }
          delete: {
            args: Prisma.CorporateActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>
          }
          update: {
            args: Prisma.CorporateActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>
          }
          deleteMany: {
            args: Prisma.CorporateActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorporateActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CorporateActionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>[]
          }
          upsert: {
            args: Prisma.CorporateActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorporateActionPayload>
          }
          aggregate: {
            args: Prisma.CorporateActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorporateAction>
          }
          groupBy: {
            args: Prisma.CorporateActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorporateActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorporateActionCountArgs<ExtArgs>
            result: $Utils.Optional<CorporateActionCountAggregateOutputType> | number
          }
        }
      }
      TradeJournal: {
        payload: Prisma.$TradeJournalPayload<ExtArgs>
        fields: Prisma.TradeJournalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TradeJournalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TradeJournalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>
          }
          findFirst: {
            args: Prisma.TradeJournalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TradeJournalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>
          }
          findMany: {
            args: Prisma.TradeJournalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>[]
          }
          create: {
            args: Prisma.TradeJournalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>
          }
          createMany: {
            args: Prisma.TradeJournalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TradeJournalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>[]
          }
          delete: {
            args: Prisma.TradeJournalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>
          }
          update: {
            args: Prisma.TradeJournalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>
          }
          deleteMany: {
            args: Prisma.TradeJournalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TradeJournalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TradeJournalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>[]
          }
          upsert: {
            args: Prisma.TradeJournalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TradeJournalPayload>
          }
          aggregate: {
            args: Prisma.TradeJournalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTradeJournal>
          }
          groupBy: {
            args: Prisma.TradeJournalGroupByArgs<ExtArgs>
            result: $Utils.Optional<TradeJournalGroupByOutputType>[]
          }
          count: {
            args: Prisma.TradeJournalCountArgs<ExtArgs>
            result: $Utils.Optional<TradeJournalCountAggregateOutputType> | number
          }
        }
      }
      DailyPnL: {
        payload: Prisma.$DailyPnLPayload<ExtArgs>
        fields: Prisma.DailyPnLFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyPnLFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyPnLFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>
          }
          findFirst: {
            args: Prisma.DailyPnLFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyPnLFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>
          }
          findMany: {
            args: Prisma.DailyPnLFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>[]
          }
          create: {
            args: Prisma.DailyPnLCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>
          }
          createMany: {
            args: Prisma.DailyPnLCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DailyPnLCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>[]
          }
          delete: {
            args: Prisma.DailyPnLDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>
          }
          update: {
            args: Prisma.DailyPnLUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>
          }
          deleteMany: {
            args: Prisma.DailyPnLDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyPnLUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DailyPnLUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>[]
          }
          upsert: {
            args: Prisma.DailyPnLUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyPnLPayload>
          }
          aggregate: {
            args: Prisma.DailyPnLAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyPnL>
          }
          groupBy: {
            args: Prisma.DailyPnLGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyPnLGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyPnLCountArgs<ExtArgs>
            result: $Utils.Optional<DailyPnLCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userProfile?: UserProfileOmit
    bankAccount?: BankAccountOmit
    session?: SessionOmit
    fundTransaction?: FundTransactionOmit
    margin?: MarginOmit
    instrument?: InstrumentOmit
    marketDepth?: MarketDepthOmit
    priceHistory?: PriceHistoryOmit
    portfolio?: PortfolioOmit
    holding?: HoldingOmit
    position?: PositionOmit
    order?: OrderOmit
    trade?: TradeOmit
    tradeCharges?: TradeChargesOmit
    gTTOrder?: GTTOrderOmit
    watchlist?: WatchlistOmit
    watchlistItem?: WatchlistItemOmit
    alert?: AlertOmit
    notification?: NotificationOmit
    basket?: BasketOmit
    basketItem?: BasketItemOmit
    corporateAction?: CorporateActionOmit
    tradeJournal?: TradeJournalOmit
    dailyPnL?: DailyPnLOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    bankAccounts: number
    funds: number
    holdings: number
    positions: number
    orders: number
    trades: number
    watchlists: number
    portfolios: number
    gttOrders: number
    baskets: number
    alerts: number
    notifications: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankAccounts?: boolean | UserCountOutputTypeCountBankAccountsArgs
    funds?: boolean | UserCountOutputTypeCountFundsArgs
    holdings?: boolean | UserCountOutputTypeCountHoldingsArgs
    positions?: boolean | UserCountOutputTypeCountPositionsArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    trades?: boolean | UserCountOutputTypeCountTradesArgs
    watchlists?: boolean | UserCountOutputTypeCountWatchlistsArgs
    portfolios?: boolean | UserCountOutputTypeCountPortfoliosArgs
    gttOrders?: boolean | UserCountOutputTypeCountGttOrdersArgs
    baskets?: boolean | UserCountOutputTypeCountBasketsArgs
    alerts?: boolean | UserCountOutputTypeCountAlertsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBankAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankAccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHoldingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HoldingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWatchlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPortfoliosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGttOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GTTOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBasketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type InstrumentCountOutputType
   */

  export type InstrumentCountOutputType = {
    holdings: number
    positions: number
    orders: number
    trades: number
    marketDepth: number
    priceHistory: number
    watchlistItems: number
  }

  export type InstrumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    holdings?: boolean | InstrumentCountOutputTypeCountHoldingsArgs
    positions?: boolean | InstrumentCountOutputTypeCountPositionsArgs
    orders?: boolean | InstrumentCountOutputTypeCountOrdersArgs
    trades?: boolean | InstrumentCountOutputTypeCountTradesArgs
    marketDepth?: boolean | InstrumentCountOutputTypeCountMarketDepthArgs
    priceHistory?: boolean | InstrumentCountOutputTypeCountPriceHistoryArgs
    watchlistItems?: boolean | InstrumentCountOutputTypeCountWatchlistItemsArgs
  }

  // Custom InputTypes
  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstrumentCountOutputType
     */
    select?: InstrumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeCountHoldingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HoldingWhereInput
  }

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeCountPositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
  }

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeCountTradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeWhereInput
  }

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeCountMarketDepthArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketDepthWhereInput
  }

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeCountPriceHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceHistoryWhereInput
  }

  /**
   * InstrumentCountOutputType without action
   */
  export type InstrumentCountOutputTypeCountWatchlistItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistItemWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    trades: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trades?: boolean | OrderCountOutputTypeCountTradesArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountTradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeWhereInput
  }


  /**
   * Count Type WatchlistCountOutputType
   */

  export type WatchlistCountOutputType = {
    items: number
  }

  export type WatchlistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | WatchlistCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * WatchlistCountOutputType without action
   */
  export type WatchlistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistCountOutputType
     */
    select?: WatchlistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WatchlistCountOutputType without action
   */
  export type WatchlistCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistItemWhereInput
  }


  /**
   * Count Type BasketCountOutputType
   */

  export type BasketCountOutputType = {
    items: number
  }

  export type BasketCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | BasketCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * BasketCountOutputType without action
   */
  export type BasketCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketCountOutputType
     */
    select?: BasketCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BasketCountOutputType without action
   */
  export type BasketCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    panNumber: string | null
    aadhaarNumber: string | null
    dateOfBirth: Date | null
    kycStatus: $Enums.KYCStatus | null
    accountType: $Enums.AccountType | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    twoFactorEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    panNumber: string | null
    aadhaarNumber: string | null
    dateOfBirth: Date | null
    kycStatus: $Enums.KYCStatus | null
    accountType: $Enums.AccountType | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    twoFactorEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    password: number
    firstName: number
    lastName: number
    panNumber: number
    aadhaarNumber: number
    dateOfBirth: number
    kycStatus: number
    accountType: number
    role: number
    isActive: number
    twoFactorEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    password?: true
    firstName?: true
    lastName?: true
    panNumber?: true
    aadhaarNumber?: true
    dateOfBirth?: true
    kycStatus?: true
    accountType?: true
    role?: true
    isActive?: true
    twoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    password?: true
    firstName?: true
    lastName?: true
    panNumber?: true
    aadhaarNumber?: true
    dateOfBirth?: true
    kycStatus?: true
    accountType?: true
    role?: true
    isActive?: true
    twoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    password?: true
    firstName?: true
    lastName?: true
    panNumber?: true
    aadhaarNumber?: true
    dateOfBirth?: true
    kycStatus?: true
    accountType?: true
    role?: true
    isActive?: true
    twoFactorEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    phone: string
    password: string | null
    firstName: string | null
    lastName: string | null
    panNumber: string | null
    aadhaarNumber: string | null
    dateOfBirth: Date | null
    kycStatus: $Enums.KYCStatus | null
    accountType: $Enums.AccountType | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    twoFactorEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    panNumber?: boolean
    aadhaarNumber?: boolean
    dateOfBirth?: boolean
    kycStatus?: boolean
    accountType?: boolean
    role?: boolean
    isActive?: boolean
    twoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    bankAccounts?: boolean | User$bankAccountsArgs<ExtArgs>
    funds?: boolean | User$fundsArgs<ExtArgs>
    holdings?: boolean | User$holdingsArgs<ExtArgs>
    positions?: boolean | User$positionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    trades?: boolean | User$tradesArgs<ExtArgs>
    watchlists?: boolean | User$watchlistsArgs<ExtArgs>
    portfolios?: boolean | User$portfoliosArgs<ExtArgs>
    gttOrders?: boolean | User$gttOrdersArgs<ExtArgs>
    baskets?: boolean | User$basketsArgs<ExtArgs>
    alerts?: boolean | User$alertsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    panNumber?: boolean
    aadhaarNumber?: boolean
    dateOfBirth?: boolean
    kycStatus?: boolean
    accountType?: boolean
    role?: boolean
    isActive?: boolean
    twoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    panNumber?: boolean
    aadhaarNumber?: boolean
    dateOfBirth?: boolean
    kycStatus?: boolean
    accountType?: boolean
    role?: boolean
    isActive?: boolean
    twoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    panNumber?: boolean
    aadhaarNumber?: boolean
    dateOfBirth?: boolean
    kycStatus?: boolean
    accountType?: boolean
    role?: boolean
    isActive?: boolean
    twoFactorEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "phone" | "password" | "firstName" | "lastName" | "panNumber" | "aadhaarNumber" | "dateOfBirth" | "kycStatus" | "accountType" | "role" | "isActive" | "twoFactorEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    bankAccounts?: boolean | User$bankAccountsArgs<ExtArgs>
    funds?: boolean | User$fundsArgs<ExtArgs>
    holdings?: boolean | User$holdingsArgs<ExtArgs>
    positions?: boolean | User$positionsArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    trades?: boolean | User$tradesArgs<ExtArgs>
    watchlists?: boolean | User$watchlistsArgs<ExtArgs>
    portfolios?: boolean | User$portfoliosArgs<ExtArgs>
    gttOrders?: boolean | User$gttOrdersArgs<ExtArgs>
    baskets?: boolean | User$basketsArgs<ExtArgs>
    alerts?: boolean | User$alertsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs> | null
      bankAccounts: Prisma.$BankAccountPayload<ExtArgs>[]
      funds: Prisma.$FundTransactionPayload<ExtArgs>[]
      holdings: Prisma.$HoldingPayload<ExtArgs>[]
      positions: Prisma.$PositionPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      trades: Prisma.$TradePayload<ExtArgs>[]
      watchlists: Prisma.$WatchlistPayload<ExtArgs>[]
      portfolios: Prisma.$PortfolioPayload<ExtArgs>[]
      gttOrders: Prisma.$GTTOrderPayload<ExtArgs>[]
      baskets: Prisma.$BasketPayload<ExtArgs>[]
      alerts: Prisma.$AlertPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      phone: string
      password: string | null
      firstName: string | null
      lastName: string | null
      panNumber: string | null
      aadhaarNumber: string | null
      dateOfBirth: Date | null
      kycStatus: $Enums.KYCStatus | null
      accountType: $Enums.AccountType | null
      role: $Enums.UserRole | null
      isActive: boolean | null
      twoFactorEnabled: boolean | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    bankAccounts<T extends User$bankAccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$bankAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    funds<T extends User$fundsArgs<ExtArgs> = {}>(args?: Subset<T, User$fundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    holdings<T extends User$holdingsArgs<ExtArgs> = {}>(args?: Subset<T, User$holdingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    positions<T extends User$positionsArgs<ExtArgs> = {}>(args?: Subset<T, User$positionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trades<T extends User$tradesArgs<ExtArgs> = {}>(args?: Subset<T, User$tradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchlists<T extends User$watchlistsArgs<ExtArgs> = {}>(args?: Subset<T, User$watchlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    portfolios<T extends User$portfoliosArgs<ExtArgs> = {}>(args?: Subset<T, User$portfoliosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gttOrders<T extends User$gttOrdersArgs<ExtArgs> = {}>(args?: Subset<T, User$gttOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    baskets<T extends User$basketsArgs<ExtArgs> = {}>(args?: Subset<T, User$basketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alerts<T extends User$alertsArgs<ExtArgs> = {}>(args?: Subset<T, User$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly panNumber: FieldRef<"User", 'String'>
    readonly aadhaarNumber: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly kycStatus: FieldRef<"User", 'KYCStatus'>
    readonly accountType: FieldRef<"User", 'AccountType'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly twoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.bankAccounts
   */
  export type User$bankAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    where?: BankAccountWhereInput
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    cursor?: BankAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BankAccountScalarFieldEnum | BankAccountScalarFieldEnum[]
  }

  /**
   * User.funds
   */
  export type User$fundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    where?: FundTransactionWhereInput
    orderBy?: FundTransactionOrderByWithRelationInput | FundTransactionOrderByWithRelationInput[]
    cursor?: FundTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FundTransactionScalarFieldEnum | FundTransactionScalarFieldEnum[]
  }

  /**
   * User.holdings
   */
  export type User$holdingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    where?: HoldingWhereInput
    orderBy?: HoldingOrderByWithRelationInput | HoldingOrderByWithRelationInput[]
    cursor?: HoldingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HoldingScalarFieldEnum | HoldingScalarFieldEnum[]
  }

  /**
   * User.positions
   */
  export type User$positionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    cursor?: PositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.trades
   */
  export type User$tradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    where?: TradeWhereInput
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    cursor?: TradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * User.watchlists
   */
  export type User$watchlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    where?: WatchlistWhereInput
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    cursor?: WatchlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * User.portfolios
   */
  export type User$portfoliosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    cursor?: PortfolioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * User.gttOrders
   */
  export type User$gttOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    where?: GTTOrderWhereInput
    orderBy?: GTTOrderOrderByWithRelationInput | GTTOrderOrderByWithRelationInput[]
    cursor?: GTTOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GTTOrderScalarFieldEnum | GTTOrderScalarFieldEnum[]
  }

  /**
   * User.baskets
   */
  export type User$basketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    cursor?: BasketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * User.alerts
   */
  export type User$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    state: string | null
    pincode: string | null
    fatherName: string | null
    motherName: string | null
    maritalStatus: string | null
    country: string | null
    occupation: string | null
    annualIncome: string | null
    tradingExperience: string | null
    riskProfile: $Enums.RiskProfile | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    addressLine1: string | null
    addressLine2: string | null
    city: string | null
    state: string | null
    pincode: string | null
    fatherName: string | null
    motherName: string | null
    maritalStatus: string | null
    country: string | null
    occupation: string | null
    annualIncome: string | null
    tradingExperience: string | null
    riskProfile: $Enums.RiskProfile | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    addressLine1: number
    addressLine2: number
    city: number
    state: number
    pincode: number
    fatherName: number
    motherName: number
    maritalStatus: number
    country: number
    occupation: number
    annualIncome: number
    tradingExperience: number
    riskProfile: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    pincode?: true
    fatherName?: true
    motherName?: true
    maritalStatus?: true
    country?: true
    occupation?: true
    annualIncome?: true
    tradingExperience?: true
    riskProfile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    pincode?: true
    fatherName?: true
    motherName?: true
    maritalStatus?: true
    country?: true
    occupation?: true
    annualIncome?: true
    tradingExperience?: true
    riskProfile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    addressLine1?: true
    addressLine2?: true
    city?: true
    state?: true
    pincode?: true
    fatherName?: true
    motherName?: true
    maritalStatus?: true
    country?: true
    occupation?: true
    annualIncome?: true
    tradingExperience?: true
    riskProfile?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: string
    userId: string
    addressLine1: string
    addressLine2: string | null
    city: string
    state: string
    pincode: string
    fatherName: string | null
    motherName: string | null
    maritalStatus: string | null
    country: string
    occupation: string | null
    annualIncome: string | null
    tradingExperience: string | null
    riskProfile: $Enums.RiskProfile
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    fatherName?: boolean
    motherName?: boolean
    maritalStatus?: boolean
    country?: boolean
    occupation?: boolean
    annualIncome?: boolean
    tradingExperience?: boolean
    riskProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    fatherName?: boolean
    motherName?: boolean
    maritalStatus?: boolean
    country?: boolean
    occupation?: boolean
    annualIncome?: boolean
    tradingExperience?: boolean
    riskProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    fatherName?: boolean
    motherName?: boolean
    maritalStatus?: boolean
    country?: boolean
    occupation?: boolean
    annualIncome?: boolean
    tradingExperience?: boolean
    riskProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    city?: boolean
    state?: boolean
    pincode?: boolean
    fatherName?: boolean
    motherName?: boolean
    maritalStatus?: boolean
    country?: boolean
    occupation?: boolean
    annualIncome?: boolean
    tradingExperience?: boolean
    riskProfile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "addressLine1" | "addressLine2" | "city" | "state" | "pincode" | "fatherName" | "motherName" | "maritalStatus" | "country" | "occupation" | "annualIncome" | "tradingExperience" | "riskProfile" | "createdAt" | "updatedAt", ExtArgs["result"]["userProfile"]>
  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      addressLine1: string
      addressLine2: string | null
      city: string
      state: string
      pincode: string
      fatherName: string | null
      motherName: string | null
      maritalStatus: string | null
      country: string
      occupation: string | null
      annualIncome: string | null
      tradingExperience: string | null
      riskProfile: $Enums.RiskProfile
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles and returns the data updated in the database.
     * @param {UserProfileUpdateManyAndReturnArgs} args - Arguments to update many UserProfiles.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'String'>
    readonly userId: FieldRef<"UserProfile", 'String'>
    readonly addressLine1: FieldRef<"UserProfile", 'String'>
    readonly addressLine2: FieldRef<"UserProfile", 'String'>
    readonly city: FieldRef<"UserProfile", 'String'>
    readonly state: FieldRef<"UserProfile", 'String'>
    readonly pincode: FieldRef<"UserProfile", 'String'>
    readonly fatherName: FieldRef<"UserProfile", 'String'>
    readonly motherName: FieldRef<"UserProfile", 'String'>
    readonly maritalStatus: FieldRef<"UserProfile", 'String'>
    readonly country: FieldRef<"UserProfile", 'String'>
    readonly occupation: FieldRef<"UserProfile", 'String'>
    readonly annualIncome: FieldRef<"UserProfile", 'String'>
    readonly tradingExperience: FieldRef<"UserProfile", 'String'>
    readonly riskProfile: FieldRef<"UserProfile", 'RiskProfile'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
  }

  /**
   * UserProfile updateManyAndReturn
   */
  export type UserProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to delete.
     */
    limit?: number
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model BankAccount
   */

  export type AggregateBankAccount = {
    _count: BankAccountCountAggregateOutputType | null
    _min: BankAccountMinAggregateOutputType | null
    _max: BankAccountMaxAggregateOutputType | null
  }

  export type BankAccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    accountNumber: string | null
    ifscCode: string | null
    bankName: string | null
    branchName: string | null
    accountHolderName: string | null
    accountType: $Enums.BankAccountType | null
    isPrimary: boolean | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankAccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    accountNumber: string | null
    ifscCode: string | null
    bankName: string | null
    branchName: string | null
    accountHolderName: string | null
    accountType: $Enums.BankAccountType | null
    isPrimary: boolean | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankAccountCountAggregateOutputType = {
    id: number
    userId: number
    accountNumber: number
    ifscCode: number
    bankName: number
    branchName: number
    accountHolderName: number
    accountType: number
    isPrimary: number
    isVerified: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BankAccountMinAggregateInputType = {
    id?: true
    userId?: true
    accountNumber?: true
    ifscCode?: true
    bankName?: true
    branchName?: true
    accountHolderName?: true
    accountType?: true
    isPrimary?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankAccountMaxAggregateInputType = {
    id?: true
    userId?: true
    accountNumber?: true
    ifscCode?: true
    bankName?: true
    branchName?: true
    accountHolderName?: true
    accountType?: true
    isPrimary?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankAccountCountAggregateInputType = {
    id?: true
    userId?: true
    accountNumber?: true
    ifscCode?: true
    bankName?: true
    branchName?: true
    accountHolderName?: true
    accountType?: true
    isPrimary?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BankAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankAccount to aggregate.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BankAccounts
    **/
    _count?: true | BankAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankAccountMaxAggregateInputType
  }

  export type GetBankAccountAggregateType<T extends BankAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateBankAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBankAccount[P]>
      : GetScalarType<T[P], AggregateBankAccount[P]>
  }




  export type BankAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankAccountWhereInput
    orderBy?: BankAccountOrderByWithAggregationInput | BankAccountOrderByWithAggregationInput[]
    by: BankAccountScalarFieldEnum[] | BankAccountScalarFieldEnum
    having?: BankAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankAccountCountAggregateInputType | true
    _min?: BankAccountMinAggregateInputType
    _max?: BankAccountMaxAggregateInputType
  }

  export type BankAccountGroupByOutputType = {
    id: string
    userId: string
    accountNumber: string
    ifscCode: string
    bankName: string
    branchName: string
    accountHolderName: string
    accountType: $Enums.BankAccountType
    isPrimary: boolean
    isVerified: boolean
    createdAt: Date
    updatedAt: Date
    _count: BankAccountCountAggregateOutputType | null
    _min: BankAccountMinAggregateOutputType | null
    _max: BankAccountMaxAggregateOutputType | null
  }

  type GetBankAccountGroupByPayload<T extends BankAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankAccountGroupByOutputType[P]>
            : GetScalarType<T[P], BankAccountGroupByOutputType[P]>
        }
      >
    >


  export type BankAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankName?: boolean
    branchName?: boolean
    accountHolderName?: boolean
    accountType?: boolean
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankAccount"]>

  export type BankAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankName?: boolean
    branchName?: boolean
    accountHolderName?: boolean
    accountType?: boolean
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankAccount"]>

  export type BankAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankName?: boolean
    branchName?: boolean
    accountHolderName?: boolean
    accountType?: boolean
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankAccount"]>

  export type BankAccountSelectScalar = {
    id?: boolean
    userId?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankName?: boolean
    branchName?: boolean
    accountHolderName?: boolean
    accountType?: boolean
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BankAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "accountNumber" | "ifscCode" | "bankName" | "branchName" | "accountHolderName" | "accountType" | "isPrimary" | "isVerified" | "createdAt" | "updatedAt", ExtArgs["result"]["bankAccount"]>
  export type BankAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BankAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BankAccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BankAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BankAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      accountNumber: string
      ifscCode: string
      bankName: string
      branchName: string
      accountHolderName: string
      accountType: $Enums.BankAccountType
      isPrimary: boolean
      isVerified: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bankAccount"]>
    composites: {}
  }

  type BankAccountGetPayload<S extends boolean | null | undefined | BankAccountDefaultArgs> = $Result.GetResult<Prisma.$BankAccountPayload, S>

  type BankAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BankAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BankAccountCountAggregateInputType | true
    }

  export interface BankAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankAccount'], meta: { name: 'BankAccount' } }
    /**
     * Find zero or one BankAccount that matches the filter.
     * @param {BankAccountFindUniqueArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BankAccountFindUniqueArgs>(args: SelectSubset<T, BankAccountFindUniqueArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BankAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BankAccountFindUniqueOrThrowArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BankAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, BankAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BankAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountFindFirstArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BankAccountFindFirstArgs>(args?: SelectSubset<T, BankAccountFindFirstArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BankAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountFindFirstOrThrowArgs} args - Arguments to find a BankAccount
     * @example
     * // Get one BankAccount
     * const bankAccount = await prisma.bankAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BankAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, BankAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BankAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BankAccounts
     * const bankAccounts = await prisma.bankAccount.findMany()
     * 
     * // Get first 10 BankAccounts
     * const bankAccounts = await prisma.bankAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankAccountWithIdOnly = await prisma.bankAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BankAccountFindManyArgs>(args?: SelectSubset<T, BankAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BankAccount.
     * @param {BankAccountCreateArgs} args - Arguments to create a BankAccount.
     * @example
     * // Create one BankAccount
     * const BankAccount = await prisma.bankAccount.create({
     *   data: {
     *     // ... data to create a BankAccount
     *   }
     * })
     * 
     */
    create<T extends BankAccountCreateArgs>(args: SelectSubset<T, BankAccountCreateArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BankAccounts.
     * @param {BankAccountCreateManyArgs} args - Arguments to create many BankAccounts.
     * @example
     * // Create many BankAccounts
     * const bankAccount = await prisma.bankAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BankAccountCreateManyArgs>(args?: SelectSubset<T, BankAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BankAccounts and returns the data saved in the database.
     * @param {BankAccountCreateManyAndReturnArgs} args - Arguments to create many BankAccounts.
     * @example
     * // Create many BankAccounts
     * const bankAccount = await prisma.bankAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BankAccounts and only return the `id`
     * const bankAccountWithIdOnly = await prisma.bankAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BankAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, BankAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BankAccount.
     * @param {BankAccountDeleteArgs} args - Arguments to delete one BankAccount.
     * @example
     * // Delete one BankAccount
     * const BankAccount = await prisma.bankAccount.delete({
     *   where: {
     *     // ... filter to delete one BankAccount
     *   }
     * })
     * 
     */
    delete<T extends BankAccountDeleteArgs>(args: SelectSubset<T, BankAccountDeleteArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BankAccount.
     * @param {BankAccountUpdateArgs} args - Arguments to update one BankAccount.
     * @example
     * // Update one BankAccount
     * const bankAccount = await prisma.bankAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BankAccountUpdateArgs>(args: SelectSubset<T, BankAccountUpdateArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BankAccounts.
     * @param {BankAccountDeleteManyArgs} args - Arguments to filter BankAccounts to delete.
     * @example
     * // Delete a few BankAccounts
     * const { count } = await prisma.bankAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BankAccountDeleteManyArgs>(args?: SelectSubset<T, BankAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BankAccounts
     * const bankAccount = await prisma.bankAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BankAccountUpdateManyArgs>(args: SelectSubset<T, BankAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankAccounts and returns the data updated in the database.
     * @param {BankAccountUpdateManyAndReturnArgs} args - Arguments to update many BankAccounts.
     * @example
     * // Update many BankAccounts
     * const bankAccount = await prisma.bankAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BankAccounts and only return the `id`
     * const bankAccountWithIdOnly = await prisma.bankAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BankAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, BankAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BankAccount.
     * @param {BankAccountUpsertArgs} args - Arguments to update or create a BankAccount.
     * @example
     * // Update or create a BankAccount
     * const bankAccount = await prisma.bankAccount.upsert({
     *   create: {
     *     // ... data to create a BankAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BankAccount we want to update
     *   }
     * })
     */
    upsert<T extends BankAccountUpsertArgs>(args: SelectSubset<T, BankAccountUpsertArgs<ExtArgs>>): Prisma__BankAccountClient<$Result.GetResult<Prisma.$BankAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BankAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountCountArgs} args - Arguments to filter BankAccounts to count.
     * @example
     * // Count the number of BankAccounts
     * const count = await prisma.bankAccount.count({
     *   where: {
     *     // ... the filter for the BankAccounts we want to count
     *   }
     * })
    **/
    count<T extends BankAccountCountArgs>(
      args?: Subset<T, BankAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BankAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankAccountAggregateArgs>(args: Subset<T, BankAccountAggregateArgs>): Prisma.PrismaPromise<GetBankAccountAggregateType<T>>

    /**
     * Group by BankAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankAccountGroupByArgs['orderBy'] }
        : { orderBy?: BankAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BankAccount model
   */
  readonly fields: BankAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BankAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BankAccount model
   */
  interface BankAccountFieldRefs {
    readonly id: FieldRef<"BankAccount", 'String'>
    readonly userId: FieldRef<"BankAccount", 'String'>
    readonly accountNumber: FieldRef<"BankAccount", 'String'>
    readonly ifscCode: FieldRef<"BankAccount", 'String'>
    readonly bankName: FieldRef<"BankAccount", 'String'>
    readonly branchName: FieldRef<"BankAccount", 'String'>
    readonly accountHolderName: FieldRef<"BankAccount", 'String'>
    readonly accountType: FieldRef<"BankAccount", 'BankAccountType'>
    readonly isPrimary: FieldRef<"BankAccount", 'Boolean'>
    readonly isVerified: FieldRef<"BankAccount", 'Boolean'>
    readonly createdAt: FieldRef<"BankAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"BankAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BankAccount findUnique
   */
  export type BankAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount findUniqueOrThrow
   */
  export type BankAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount findFirst
   */
  export type BankAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankAccounts.
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankAccounts.
     */
    distinct?: BankAccountScalarFieldEnum | BankAccountScalarFieldEnum[]
  }

  /**
   * BankAccount findFirstOrThrow
   */
  export type BankAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * Filter, which BankAccount to fetch.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankAccounts.
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankAccounts.
     */
    distinct?: BankAccountScalarFieldEnum | BankAccountScalarFieldEnum[]
  }

  /**
   * BankAccount findMany
   */
  export type BankAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * Filter, which BankAccounts to fetch.
     */
    where?: BankAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankAccounts to fetch.
     */
    orderBy?: BankAccountOrderByWithRelationInput | BankAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BankAccounts.
     */
    cursor?: BankAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankAccounts.
     */
    skip?: number
    distinct?: BankAccountScalarFieldEnum | BankAccountScalarFieldEnum[]
  }

  /**
   * BankAccount create
   */
  export type BankAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a BankAccount.
     */
    data: XOR<BankAccountCreateInput, BankAccountUncheckedCreateInput>
  }

  /**
   * BankAccount createMany
   */
  export type BankAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BankAccounts.
     */
    data: BankAccountCreateManyInput | BankAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BankAccount createManyAndReturn
   */
  export type BankAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * The data used to create many BankAccounts.
     */
    data: BankAccountCreateManyInput | BankAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BankAccount update
   */
  export type BankAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a BankAccount.
     */
    data: XOR<BankAccountUpdateInput, BankAccountUncheckedUpdateInput>
    /**
     * Choose, which BankAccount to update.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount updateMany
   */
  export type BankAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BankAccounts.
     */
    data: XOR<BankAccountUpdateManyMutationInput, BankAccountUncheckedUpdateManyInput>
    /**
     * Filter which BankAccounts to update
     */
    where?: BankAccountWhereInput
    /**
     * Limit how many BankAccounts to update.
     */
    limit?: number
  }

  /**
   * BankAccount updateManyAndReturn
   */
  export type BankAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * The data used to update BankAccounts.
     */
    data: XOR<BankAccountUpdateManyMutationInput, BankAccountUncheckedUpdateManyInput>
    /**
     * Filter which BankAccounts to update
     */
    where?: BankAccountWhereInput
    /**
     * Limit how many BankAccounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BankAccount upsert
   */
  export type BankAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the BankAccount to update in case it exists.
     */
    where: BankAccountWhereUniqueInput
    /**
     * In case the BankAccount found by the `where` argument doesn't exist, create a new BankAccount with this data.
     */
    create: XOR<BankAccountCreateInput, BankAccountUncheckedCreateInput>
    /**
     * In case the BankAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankAccountUpdateInput, BankAccountUncheckedUpdateInput>
  }

  /**
   * BankAccount delete
   */
  export type BankAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
    /**
     * Filter which BankAccount to delete.
     */
    where: BankAccountWhereUniqueInput
  }

  /**
   * BankAccount deleteMany
   */
  export type BankAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankAccounts to delete
     */
    where?: BankAccountWhereInput
    /**
     * Limit how many BankAccounts to delete.
     */
    limit?: number
  }

  /**
   * BankAccount without action
   */
  export type BankAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankAccount
     */
    select?: BankAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankAccount
     */
    omit?: BankAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankAccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    ipAddress: string | null
    userAgent: string | null
    deviceType: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    ipAddress: string | null
    userAgent: string | null
    deviceType: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    ipAddress: number
    userAgent: number
    deviceType: number
    isActive: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    deviceType?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    deviceType?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    ipAddress?: true
    userAgent?: true
    deviceType?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    ipAddress: string | null
    userAgent: string | null
    deviceType: string | null
    isActive: boolean
    expiresAt: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    deviceType?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    deviceType?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    deviceType?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    deviceType?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "token" | "ipAddress" | "userAgent" | "deviceType" | "isActive" | "expiresAt" | "createdAt", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      ipAddress: string | null
      userAgent: string | null
      deviceType: string | null
      isActive: boolean
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly deviceType: FieldRef<"Session", 'String'>
    readonly isActive: FieldRef<"Session", 'Boolean'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model FundTransaction
   */

  export type AggregateFundTransaction = {
    _count: FundTransactionCountAggregateOutputType | null
    _avg: FundTransactionAvgAggregateOutputType | null
    _sum: FundTransactionSumAggregateOutputType | null
    _min: FundTransactionMinAggregateOutputType | null
    _max: FundTransactionMaxAggregateOutputType | null
  }

  export type FundTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type FundTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type FundTransactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    transactionType: $Enums.FundTransactionType | null
    amount: number | null
    status: $Enums.TransactionStatus | null
    paymentMode: $Enums.PaymentMode | null
    utrNumber: string | null
    bankAccountId: string | null
    remarks: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FundTransactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    transactionType: $Enums.FundTransactionType | null
    amount: number | null
    status: $Enums.TransactionStatus | null
    paymentMode: $Enums.PaymentMode | null
    utrNumber: string | null
    bankAccountId: string | null
    remarks: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FundTransactionCountAggregateOutputType = {
    id: number
    userId: number
    transactionType: number
    amount: number
    status: number
    paymentMode: number
    utrNumber: number
    bankAccountId: number
    remarks: number
    processedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FundTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type FundTransactionSumAggregateInputType = {
    amount?: true
  }

  export type FundTransactionMinAggregateInputType = {
    id?: true
    userId?: true
    transactionType?: true
    amount?: true
    status?: true
    paymentMode?: true
    utrNumber?: true
    bankAccountId?: true
    remarks?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FundTransactionMaxAggregateInputType = {
    id?: true
    userId?: true
    transactionType?: true
    amount?: true
    status?: true
    paymentMode?: true
    utrNumber?: true
    bankAccountId?: true
    remarks?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FundTransactionCountAggregateInputType = {
    id?: true
    userId?: true
    transactionType?: true
    amount?: true
    status?: true
    paymentMode?: true
    utrNumber?: true
    bankAccountId?: true
    remarks?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FundTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FundTransaction to aggregate.
     */
    where?: FundTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundTransactions to fetch.
     */
    orderBy?: FundTransactionOrderByWithRelationInput | FundTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FundTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FundTransactions
    **/
    _count?: true | FundTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FundTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FundTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FundTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FundTransactionMaxAggregateInputType
  }

  export type GetFundTransactionAggregateType<T extends FundTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateFundTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFundTransaction[P]>
      : GetScalarType<T[P], AggregateFundTransaction[P]>
  }




  export type FundTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundTransactionWhereInput
    orderBy?: FundTransactionOrderByWithAggregationInput | FundTransactionOrderByWithAggregationInput[]
    by: FundTransactionScalarFieldEnum[] | FundTransactionScalarFieldEnum
    having?: FundTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FundTransactionCountAggregateInputType | true
    _avg?: FundTransactionAvgAggregateInputType
    _sum?: FundTransactionSumAggregateInputType
    _min?: FundTransactionMinAggregateInputType
    _max?: FundTransactionMaxAggregateInputType
  }

  export type FundTransactionGroupByOutputType = {
    id: string
    userId: string
    transactionType: $Enums.FundTransactionType
    amount: number
    status: $Enums.TransactionStatus
    paymentMode: $Enums.PaymentMode | null
    utrNumber: string | null
    bankAccountId: string | null
    remarks: string | null
    processedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: FundTransactionCountAggregateOutputType | null
    _avg: FundTransactionAvgAggregateOutputType | null
    _sum: FundTransactionSumAggregateOutputType | null
    _min: FundTransactionMinAggregateOutputType | null
    _max: FundTransactionMaxAggregateOutputType | null
  }

  type GetFundTransactionGroupByPayload<T extends FundTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FundTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FundTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FundTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], FundTransactionGroupByOutputType[P]>
        }
      >
    >


  export type FundTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    transactionType?: boolean
    amount?: boolean
    status?: boolean
    paymentMode?: boolean
    utrNumber?: boolean
    bankAccountId?: boolean
    remarks?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundTransaction"]>

  export type FundTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    transactionType?: boolean
    amount?: boolean
    status?: boolean
    paymentMode?: boolean
    utrNumber?: boolean
    bankAccountId?: boolean
    remarks?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundTransaction"]>

  export type FundTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    transactionType?: boolean
    amount?: boolean
    status?: boolean
    paymentMode?: boolean
    utrNumber?: boolean
    bankAccountId?: boolean
    remarks?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundTransaction"]>

  export type FundTransactionSelectScalar = {
    id?: boolean
    userId?: boolean
    transactionType?: boolean
    amount?: boolean
    status?: boolean
    paymentMode?: boolean
    utrNumber?: boolean
    bankAccountId?: boolean
    remarks?: boolean
    processedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FundTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "transactionType" | "amount" | "status" | "paymentMode" | "utrNumber" | "bankAccountId" | "remarks" | "processedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["fundTransaction"]>
  export type FundTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FundTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FundTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FundTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FundTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      transactionType: $Enums.FundTransactionType
      amount: number
      status: $Enums.TransactionStatus
      paymentMode: $Enums.PaymentMode | null
      utrNumber: string | null
      bankAccountId: string | null
      remarks: string | null
      processedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fundTransaction"]>
    composites: {}
  }

  type FundTransactionGetPayload<S extends boolean | null | undefined | FundTransactionDefaultArgs> = $Result.GetResult<Prisma.$FundTransactionPayload, S>

  type FundTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FundTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FundTransactionCountAggregateInputType | true
    }

  export interface FundTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FundTransaction'], meta: { name: 'FundTransaction' } }
    /**
     * Find zero or one FundTransaction that matches the filter.
     * @param {FundTransactionFindUniqueArgs} args - Arguments to find a FundTransaction
     * @example
     * // Get one FundTransaction
     * const fundTransaction = await prisma.fundTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FundTransactionFindUniqueArgs>(args: SelectSubset<T, FundTransactionFindUniqueArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FundTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FundTransactionFindUniqueOrThrowArgs} args - Arguments to find a FundTransaction
     * @example
     * // Get one FundTransaction
     * const fundTransaction = await prisma.fundTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FundTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, FundTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FundTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundTransactionFindFirstArgs} args - Arguments to find a FundTransaction
     * @example
     * // Get one FundTransaction
     * const fundTransaction = await prisma.fundTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FundTransactionFindFirstArgs>(args?: SelectSubset<T, FundTransactionFindFirstArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FundTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundTransactionFindFirstOrThrowArgs} args - Arguments to find a FundTransaction
     * @example
     * // Get one FundTransaction
     * const fundTransaction = await prisma.fundTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FundTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, FundTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FundTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FundTransactions
     * const fundTransactions = await prisma.fundTransaction.findMany()
     * 
     * // Get first 10 FundTransactions
     * const fundTransactions = await prisma.fundTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fundTransactionWithIdOnly = await prisma.fundTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FundTransactionFindManyArgs>(args?: SelectSubset<T, FundTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FundTransaction.
     * @param {FundTransactionCreateArgs} args - Arguments to create a FundTransaction.
     * @example
     * // Create one FundTransaction
     * const FundTransaction = await prisma.fundTransaction.create({
     *   data: {
     *     // ... data to create a FundTransaction
     *   }
     * })
     * 
     */
    create<T extends FundTransactionCreateArgs>(args: SelectSubset<T, FundTransactionCreateArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FundTransactions.
     * @param {FundTransactionCreateManyArgs} args - Arguments to create many FundTransactions.
     * @example
     * // Create many FundTransactions
     * const fundTransaction = await prisma.fundTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FundTransactionCreateManyArgs>(args?: SelectSubset<T, FundTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FundTransactions and returns the data saved in the database.
     * @param {FundTransactionCreateManyAndReturnArgs} args - Arguments to create many FundTransactions.
     * @example
     * // Create many FundTransactions
     * const fundTransaction = await prisma.fundTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FundTransactions and only return the `id`
     * const fundTransactionWithIdOnly = await prisma.fundTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FundTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, FundTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FundTransaction.
     * @param {FundTransactionDeleteArgs} args - Arguments to delete one FundTransaction.
     * @example
     * // Delete one FundTransaction
     * const FundTransaction = await prisma.fundTransaction.delete({
     *   where: {
     *     // ... filter to delete one FundTransaction
     *   }
     * })
     * 
     */
    delete<T extends FundTransactionDeleteArgs>(args: SelectSubset<T, FundTransactionDeleteArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FundTransaction.
     * @param {FundTransactionUpdateArgs} args - Arguments to update one FundTransaction.
     * @example
     * // Update one FundTransaction
     * const fundTransaction = await prisma.fundTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FundTransactionUpdateArgs>(args: SelectSubset<T, FundTransactionUpdateArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FundTransactions.
     * @param {FundTransactionDeleteManyArgs} args - Arguments to filter FundTransactions to delete.
     * @example
     * // Delete a few FundTransactions
     * const { count } = await prisma.fundTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FundTransactionDeleteManyArgs>(args?: SelectSubset<T, FundTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FundTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FundTransactions
     * const fundTransaction = await prisma.fundTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FundTransactionUpdateManyArgs>(args: SelectSubset<T, FundTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FundTransactions and returns the data updated in the database.
     * @param {FundTransactionUpdateManyAndReturnArgs} args - Arguments to update many FundTransactions.
     * @example
     * // Update many FundTransactions
     * const fundTransaction = await prisma.fundTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FundTransactions and only return the `id`
     * const fundTransactionWithIdOnly = await prisma.fundTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FundTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, FundTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FundTransaction.
     * @param {FundTransactionUpsertArgs} args - Arguments to update or create a FundTransaction.
     * @example
     * // Update or create a FundTransaction
     * const fundTransaction = await prisma.fundTransaction.upsert({
     *   create: {
     *     // ... data to create a FundTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FundTransaction we want to update
     *   }
     * })
     */
    upsert<T extends FundTransactionUpsertArgs>(args: SelectSubset<T, FundTransactionUpsertArgs<ExtArgs>>): Prisma__FundTransactionClient<$Result.GetResult<Prisma.$FundTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FundTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundTransactionCountArgs} args - Arguments to filter FundTransactions to count.
     * @example
     * // Count the number of FundTransactions
     * const count = await prisma.fundTransaction.count({
     *   where: {
     *     // ... the filter for the FundTransactions we want to count
     *   }
     * })
    **/
    count<T extends FundTransactionCountArgs>(
      args?: Subset<T, FundTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FundTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FundTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FundTransactionAggregateArgs>(args: Subset<T, FundTransactionAggregateArgs>): Prisma.PrismaPromise<GetFundTransactionAggregateType<T>>

    /**
     * Group by FundTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FundTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FundTransactionGroupByArgs['orderBy'] }
        : { orderBy?: FundTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FundTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFundTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FundTransaction model
   */
  readonly fields: FundTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FundTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FundTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FundTransaction model
   */
  interface FundTransactionFieldRefs {
    readonly id: FieldRef<"FundTransaction", 'String'>
    readonly userId: FieldRef<"FundTransaction", 'String'>
    readonly transactionType: FieldRef<"FundTransaction", 'FundTransactionType'>
    readonly amount: FieldRef<"FundTransaction", 'Float'>
    readonly status: FieldRef<"FundTransaction", 'TransactionStatus'>
    readonly paymentMode: FieldRef<"FundTransaction", 'PaymentMode'>
    readonly utrNumber: FieldRef<"FundTransaction", 'String'>
    readonly bankAccountId: FieldRef<"FundTransaction", 'String'>
    readonly remarks: FieldRef<"FundTransaction", 'String'>
    readonly processedAt: FieldRef<"FundTransaction", 'DateTime'>
    readonly createdAt: FieldRef<"FundTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"FundTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FundTransaction findUnique
   */
  export type FundTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FundTransaction to fetch.
     */
    where: FundTransactionWhereUniqueInput
  }

  /**
   * FundTransaction findUniqueOrThrow
   */
  export type FundTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FundTransaction to fetch.
     */
    where: FundTransactionWhereUniqueInput
  }

  /**
   * FundTransaction findFirst
   */
  export type FundTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FundTransaction to fetch.
     */
    where?: FundTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundTransactions to fetch.
     */
    orderBy?: FundTransactionOrderByWithRelationInput | FundTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FundTransactions.
     */
    cursor?: FundTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FundTransactions.
     */
    distinct?: FundTransactionScalarFieldEnum | FundTransactionScalarFieldEnum[]
  }

  /**
   * FundTransaction findFirstOrThrow
   */
  export type FundTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FundTransaction to fetch.
     */
    where?: FundTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundTransactions to fetch.
     */
    orderBy?: FundTransactionOrderByWithRelationInput | FundTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FundTransactions.
     */
    cursor?: FundTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FundTransactions.
     */
    distinct?: FundTransactionScalarFieldEnum | FundTransactionScalarFieldEnum[]
  }

  /**
   * FundTransaction findMany
   */
  export type FundTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FundTransactions to fetch.
     */
    where?: FundTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundTransactions to fetch.
     */
    orderBy?: FundTransactionOrderByWithRelationInput | FundTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FundTransactions.
     */
    cursor?: FundTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundTransactions.
     */
    skip?: number
    distinct?: FundTransactionScalarFieldEnum | FundTransactionScalarFieldEnum[]
  }

  /**
   * FundTransaction create
   */
  export type FundTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a FundTransaction.
     */
    data: XOR<FundTransactionCreateInput, FundTransactionUncheckedCreateInput>
  }

  /**
   * FundTransaction createMany
   */
  export type FundTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FundTransactions.
     */
    data: FundTransactionCreateManyInput | FundTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FundTransaction createManyAndReturn
   */
  export type FundTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many FundTransactions.
     */
    data: FundTransactionCreateManyInput | FundTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FundTransaction update
   */
  export type FundTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a FundTransaction.
     */
    data: XOR<FundTransactionUpdateInput, FundTransactionUncheckedUpdateInput>
    /**
     * Choose, which FundTransaction to update.
     */
    where: FundTransactionWhereUniqueInput
  }

  /**
   * FundTransaction updateMany
   */
  export type FundTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FundTransactions.
     */
    data: XOR<FundTransactionUpdateManyMutationInput, FundTransactionUncheckedUpdateManyInput>
    /**
     * Filter which FundTransactions to update
     */
    where?: FundTransactionWhereInput
    /**
     * Limit how many FundTransactions to update.
     */
    limit?: number
  }

  /**
   * FundTransaction updateManyAndReturn
   */
  export type FundTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * The data used to update FundTransactions.
     */
    data: XOR<FundTransactionUpdateManyMutationInput, FundTransactionUncheckedUpdateManyInput>
    /**
     * Filter which FundTransactions to update
     */
    where?: FundTransactionWhereInput
    /**
     * Limit how many FundTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FundTransaction upsert
   */
  export type FundTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the FundTransaction to update in case it exists.
     */
    where: FundTransactionWhereUniqueInput
    /**
     * In case the FundTransaction found by the `where` argument doesn't exist, create a new FundTransaction with this data.
     */
    create: XOR<FundTransactionCreateInput, FundTransactionUncheckedCreateInput>
    /**
     * In case the FundTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FundTransactionUpdateInput, FundTransactionUncheckedUpdateInput>
  }

  /**
   * FundTransaction delete
   */
  export type FundTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
    /**
     * Filter which FundTransaction to delete.
     */
    where: FundTransactionWhereUniqueInput
  }

  /**
   * FundTransaction deleteMany
   */
  export type FundTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FundTransactions to delete
     */
    where?: FundTransactionWhereInput
    /**
     * Limit how many FundTransactions to delete.
     */
    limit?: number
  }

  /**
   * FundTransaction without action
   */
  export type FundTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundTransaction
     */
    select?: FundTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FundTransaction
     */
    omit?: FundTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Margin
   */

  export type AggregateMargin = {
    _count: MarginCountAggregateOutputType | null
    _avg: MarginAvgAggregateOutputType | null
    _sum: MarginSumAggregateOutputType | null
    _min: MarginMinAggregateOutputType | null
    _max: MarginMaxAggregateOutputType | null
  }

  export type MarginAvgAggregateOutputType = {
    availableCash: number | null
    usedMargin: number | null
    availableMargin: number | null
    collateralValue: number | null
    openingBalance: number | null
    payin: number | null
    payout: number | null
    spanMargin: number | null
    exposureMargin: number | null
    optionPremium: number | null
  }

  export type MarginSumAggregateOutputType = {
    availableCash: number | null
    usedMargin: number | null
    availableMargin: number | null
    collateralValue: number | null
    openingBalance: number | null
    payin: number | null
    payout: number | null
    spanMargin: number | null
    exposureMargin: number | null
    optionPremium: number | null
  }

  export type MarginMinAggregateOutputType = {
    id: string | null
    userId: string | null
    availableCash: number | null
    usedMargin: number | null
    availableMargin: number | null
    collateralValue: number | null
    openingBalance: number | null
    payin: number | null
    payout: number | null
    spanMargin: number | null
    exposureMargin: number | null
    optionPremium: number | null
    updatedAt: Date | null
  }

  export type MarginMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    availableCash: number | null
    usedMargin: number | null
    availableMargin: number | null
    collateralValue: number | null
    openingBalance: number | null
    payin: number | null
    payout: number | null
    spanMargin: number | null
    exposureMargin: number | null
    optionPremium: number | null
    updatedAt: Date | null
  }

  export type MarginCountAggregateOutputType = {
    id: number
    userId: number
    availableCash: number
    usedMargin: number
    availableMargin: number
    collateralValue: number
    openingBalance: number
    payin: number
    payout: number
    spanMargin: number
    exposureMargin: number
    optionPremium: number
    updatedAt: number
    _all: number
  }


  export type MarginAvgAggregateInputType = {
    availableCash?: true
    usedMargin?: true
    availableMargin?: true
    collateralValue?: true
    openingBalance?: true
    payin?: true
    payout?: true
    spanMargin?: true
    exposureMargin?: true
    optionPremium?: true
  }

  export type MarginSumAggregateInputType = {
    availableCash?: true
    usedMargin?: true
    availableMargin?: true
    collateralValue?: true
    openingBalance?: true
    payin?: true
    payout?: true
    spanMargin?: true
    exposureMargin?: true
    optionPremium?: true
  }

  export type MarginMinAggregateInputType = {
    id?: true
    userId?: true
    availableCash?: true
    usedMargin?: true
    availableMargin?: true
    collateralValue?: true
    openingBalance?: true
    payin?: true
    payout?: true
    spanMargin?: true
    exposureMargin?: true
    optionPremium?: true
    updatedAt?: true
  }

  export type MarginMaxAggregateInputType = {
    id?: true
    userId?: true
    availableCash?: true
    usedMargin?: true
    availableMargin?: true
    collateralValue?: true
    openingBalance?: true
    payin?: true
    payout?: true
    spanMargin?: true
    exposureMargin?: true
    optionPremium?: true
    updatedAt?: true
  }

  export type MarginCountAggregateInputType = {
    id?: true
    userId?: true
    availableCash?: true
    usedMargin?: true
    availableMargin?: true
    collateralValue?: true
    openingBalance?: true
    payin?: true
    payout?: true
    spanMargin?: true
    exposureMargin?: true
    optionPremium?: true
    updatedAt?: true
    _all?: true
  }

  export type MarginAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Margin to aggregate.
     */
    where?: MarginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Margins to fetch.
     */
    orderBy?: MarginOrderByWithRelationInput | MarginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Margins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Margins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Margins
    **/
    _count?: true | MarginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarginAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarginSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarginMaxAggregateInputType
  }

  export type GetMarginAggregateType<T extends MarginAggregateArgs> = {
        [P in keyof T & keyof AggregateMargin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMargin[P]>
      : GetScalarType<T[P], AggregateMargin[P]>
  }




  export type MarginGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarginWhereInput
    orderBy?: MarginOrderByWithAggregationInput | MarginOrderByWithAggregationInput[]
    by: MarginScalarFieldEnum[] | MarginScalarFieldEnum
    having?: MarginScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarginCountAggregateInputType | true
    _avg?: MarginAvgAggregateInputType
    _sum?: MarginSumAggregateInputType
    _min?: MarginMinAggregateInputType
    _max?: MarginMaxAggregateInputType
  }

  export type MarginGroupByOutputType = {
    id: string
    userId: string
    availableCash: number
    usedMargin: number
    availableMargin: number
    collateralValue: number
    openingBalance: number
    payin: number
    payout: number
    spanMargin: number
    exposureMargin: number
    optionPremium: number
    updatedAt: Date
    _count: MarginCountAggregateOutputType | null
    _avg: MarginAvgAggregateOutputType | null
    _sum: MarginSumAggregateOutputType | null
    _min: MarginMinAggregateOutputType | null
    _max: MarginMaxAggregateOutputType | null
  }

  type GetMarginGroupByPayload<T extends MarginGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarginGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarginGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarginGroupByOutputType[P]>
            : GetScalarType<T[P], MarginGroupByOutputType[P]>
        }
      >
    >


  export type MarginSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    availableCash?: boolean
    usedMargin?: boolean
    availableMargin?: boolean
    collateralValue?: boolean
    openingBalance?: boolean
    payin?: boolean
    payout?: boolean
    spanMargin?: boolean
    exposureMargin?: boolean
    optionPremium?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["margin"]>

  export type MarginSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    availableCash?: boolean
    usedMargin?: boolean
    availableMargin?: boolean
    collateralValue?: boolean
    openingBalance?: boolean
    payin?: boolean
    payout?: boolean
    spanMargin?: boolean
    exposureMargin?: boolean
    optionPremium?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["margin"]>

  export type MarginSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    availableCash?: boolean
    usedMargin?: boolean
    availableMargin?: boolean
    collateralValue?: boolean
    openingBalance?: boolean
    payin?: boolean
    payout?: boolean
    spanMargin?: boolean
    exposureMargin?: boolean
    optionPremium?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["margin"]>

  export type MarginSelectScalar = {
    id?: boolean
    userId?: boolean
    availableCash?: boolean
    usedMargin?: boolean
    availableMargin?: boolean
    collateralValue?: boolean
    openingBalance?: boolean
    payin?: boolean
    payout?: boolean
    spanMargin?: boolean
    exposureMargin?: boolean
    optionPremium?: boolean
    updatedAt?: boolean
  }

  export type MarginOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "availableCash" | "usedMargin" | "availableMargin" | "collateralValue" | "openingBalance" | "payin" | "payout" | "spanMargin" | "exposureMargin" | "optionPremium" | "updatedAt", ExtArgs["result"]["margin"]>

  export type $MarginPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Margin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      availableCash: number
      usedMargin: number
      availableMargin: number
      collateralValue: number
      openingBalance: number
      payin: number
      payout: number
      spanMargin: number
      exposureMargin: number
      optionPremium: number
      updatedAt: Date
    }, ExtArgs["result"]["margin"]>
    composites: {}
  }

  type MarginGetPayload<S extends boolean | null | undefined | MarginDefaultArgs> = $Result.GetResult<Prisma.$MarginPayload, S>

  type MarginCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarginFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarginCountAggregateInputType | true
    }

  export interface MarginDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Margin'], meta: { name: 'Margin' } }
    /**
     * Find zero or one Margin that matches the filter.
     * @param {MarginFindUniqueArgs} args - Arguments to find a Margin
     * @example
     * // Get one Margin
     * const margin = await prisma.margin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarginFindUniqueArgs>(args: SelectSubset<T, MarginFindUniqueArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Margin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarginFindUniqueOrThrowArgs} args - Arguments to find a Margin
     * @example
     * // Get one Margin
     * const margin = await prisma.margin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarginFindUniqueOrThrowArgs>(args: SelectSubset<T, MarginFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Margin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarginFindFirstArgs} args - Arguments to find a Margin
     * @example
     * // Get one Margin
     * const margin = await prisma.margin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarginFindFirstArgs>(args?: SelectSubset<T, MarginFindFirstArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Margin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarginFindFirstOrThrowArgs} args - Arguments to find a Margin
     * @example
     * // Get one Margin
     * const margin = await prisma.margin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarginFindFirstOrThrowArgs>(args?: SelectSubset<T, MarginFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Margins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarginFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Margins
     * const margins = await prisma.margin.findMany()
     * 
     * // Get first 10 Margins
     * const margins = await prisma.margin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marginWithIdOnly = await prisma.margin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarginFindManyArgs>(args?: SelectSubset<T, MarginFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Margin.
     * @param {MarginCreateArgs} args - Arguments to create a Margin.
     * @example
     * // Create one Margin
     * const Margin = await prisma.margin.create({
     *   data: {
     *     // ... data to create a Margin
     *   }
     * })
     * 
     */
    create<T extends MarginCreateArgs>(args: SelectSubset<T, MarginCreateArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Margins.
     * @param {MarginCreateManyArgs} args - Arguments to create many Margins.
     * @example
     * // Create many Margins
     * const margin = await prisma.margin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarginCreateManyArgs>(args?: SelectSubset<T, MarginCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Margins and returns the data saved in the database.
     * @param {MarginCreateManyAndReturnArgs} args - Arguments to create many Margins.
     * @example
     * // Create many Margins
     * const margin = await prisma.margin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Margins and only return the `id`
     * const marginWithIdOnly = await prisma.margin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarginCreateManyAndReturnArgs>(args?: SelectSubset<T, MarginCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Margin.
     * @param {MarginDeleteArgs} args - Arguments to delete one Margin.
     * @example
     * // Delete one Margin
     * const Margin = await prisma.margin.delete({
     *   where: {
     *     // ... filter to delete one Margin
     *   }
     * })
     * 
     */
    delete<T extends MarginDeleteArgs>(args: SelectSubset<T, MarginDeleteArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Margin.
     * @param {MarginUpdateArgs} args - Arguments to update one Margin.
     * @example
     * // Update one Margin
     * const margin = await prisma.margin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarginUpdateArgs>(args: SelectSubset<T, MarginUpdateArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Margins.
     * @param {MarginDeleteManyArgs} args - Arguments to filter Margins to delete.
     * @example
     * // Delete a few Margins
     * const { count } = await prisma.margin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarginDeleteManyArgs>(args?: SelectSubset<T, MarginDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Margins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Margins
     * const margin = await prisma.margin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarginUpdateManyArgs>(args: SelectSubset<T, MarginUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Margins and returns the data updated in the database.
     * @param {MarginUpdateManyAndReturnArgs} args - Arguments to update many Margins.
     * @example
     * // Update many Margins
     * const margin = await prisma.margin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Margins and only return the `id`
     * const marginWithIdOnly = await prisma.margin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarginUpdateManyAndReturnArgs>(args: SelectSubset<T, MarginUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Margin.
     * @param {MarginUpsertArgs} args - Arguments to update or create a Margin.
     * @example
     * // Update or create a Margin
     * const margin = await prisma.margin.upsert({
     *   create: {
     *     // ... data to create a Margin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Margin we want to update
     *   }
     * })
     */
    upsert<T extends MarginUpsertArgs>(args: SelectSubset<T, MarginUpsertArgs<ExtArgs>>): Prisma__MarginClient<$Result.GetResult<Prisma.$MarginPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Margins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarginCountArgs} args - Arguments to filter Margins to count.
     * @example
     * // Count the number of Margins
     * const count = await prisma.margin.count({
     *   where: {
     *     // ... the filter for the Margins we want to count
     *   }
     * })
    **/
    count<T extends MarginCountArgs>(
      args?: Subset<T, MarginCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Margin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarginAggregateArgs>(args: Subset<T, MarginAggregateArgs>): Prisma.PrismaPromise<GetMarginAggregateType<T>>

    /**
     * Group by Margin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarginGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarginGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarginGroupByArgs['orderBy'] }
        : { orderBy?: MarginGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarginGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarginGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Margin model
   */
  readonly fields: MarginFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Margin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarginClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Margin model
   */
  interface MarginFieldRefs {
    readonly id: FieldRef<"Margin", 'String'>
    readonly userId: FieldRef<"Margin", 'String'>
    readonly availableCash: FieldRef<"Margin", 'Float'>
    readonly usedMargin: FieldRef<"Margin", 'Float'>
    readonly availableMargin: FieldRef<"Margin", 'Float'>
    readonly collateralValue: FieldRef<"Margin", 'Float'>
    readonly openingBalance: FieldRef<"Margin", 'Float'>
    readonly payin: FieldRef<"Margin", 'Float'>
    readonly payout: FieldRef<"Margin", 'Float'>
    readonly spanMargin: FieldRef<"Margin", 'Float'>
    readonly exposureMargin: FieldRef<"Margin", 'Float'>
    readonly optionPremium: FieldRef<"Margin", 'Float'>
    readonly updatedAt: FieldRef<"Margin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Margin findUnique
   */
  export type MarginFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * Filter, which Margin to fetch.
     */
    where: MarginWhereUniqueInput
  }

  /**
   * Margin findUniqueOrThrow
   */
  export type MarginFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * Filter, which Margin to fetch.
     */
    where: MarginWhereUniqueInput
  }

  /**
   * Margin findFirst
   */
  export type MarginFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * Filter, which Margin to fetch.
     */
    where?: MarginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Margins to fetch.
     */
    orderBy?: MarginOrderByWithRelationInput | MarginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Margins.
     */
    cursor?: MarginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Margins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Margins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Margins.
     */
    distinct?: MarginScalarFieldEnum | MarginScalarFieldEnum[]
  }

  /**
   * Margin findFirstOrThrow
   */
  export type MarginFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * Filter, which Margin to fetch.
     */
    where?: MarginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Margins to fetch.
     */
    orderBy?: MarginOrderByWithRelationInput | MarginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Margins.
     */
    cursor?: MarginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Margins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Margins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Margins.
     */
    distinct?: MarginScalarFieldEnum | MarginScalarFieldEnum[]
  }

  /**
   * Margin findMany
   */
  export type MarginFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * Filter, which Margins to fetch.
     */
    where?: MarginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Margins to fetch.
     */
    orderBy?: MarginOrderByWithRelationInput | MarginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Margins.
     */
    cursor?: MarginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Margins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Margins.
     */
    skip?: number
    distinct?: MarginScalarFieldEnum | MarginScalarFieldEnum[]
  }

  /**
   * Margin create
   */
  export type MarginCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * The data needed to create a Margin.
     */
    data: XOR<MarginCreateInput, MarginUncheckedCreateInput>
  }

  /**
   * Margin createMany
   */
  export type MarginCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Margins.
     */
    data: MarginCreateManyInput | MarginCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Margin createManyAndReturn
   */
  export type MarginCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * The data used to create many Margins.
     */
    data: MarginCreateManyInput | MarginCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Margin update
   */
  export type MarginUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * The data needed to update a Margin.
     */
    data: XOR<MarginUpdateInput, MarginUncheckedUpdateInput>
    /**
     * Choose, which Margin to update.
     */
    where: MarginWhereUniqueInput
  }

  /**
   * Margin updateMany
   */
  export type MarginUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Margins.
     */
    data: XOR<MarginUpdateManyMutationInput, MarginUncheckedUpdateManyInput>
    /**
     * Filter which Margins to update
     */
    where?: MarginWhereInput
    /**
     * Limit how many Margins to update.
     */
    limit?: number
  }

  /**
   * Margin updateManyAndReturn
   */
  export type MarginUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * The data used to update Margins.
     */
    data: XOR<MarginUpdateManyMutationInput, MarginUncheckedUpdateManyInput>
    /**
     * Filter which Margins to update
     */
    where?: MarginWhereInput
    /**
     * Limit how many Margins to update.
     */
    limit?: number
  }

  /**
   * Margin upsert
   */
  export type MarginUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * The filter to search for the Margin to update in case it exists.
     */
    where: MarginWhereUniqueInput
    /**
     * In case the Margin found by the `where` argument doesn't exist, create a new Margin with this data.
     */
    create: XOR<MarginCreateInput, MarginUncheckedCreateInput>
    /**
     * In case the Margin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarginUpdateInput, MarginUncheckedUpdateInput>
  }

  /**
   * Margin delete
   */
  export type MarginDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
    /**
     * Filter which Margin to delete.
     */
    where: MarginWhereUniqueInput
  }

  /**
   * Margin deleteMany
   */
  export type MarginDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Margins to delete
     */
    where?: MarginWhereInput
    /**
     * Limit how many Margins to delete.
     */
    limit?: number
  }

  /**
   * Margin without action
   */
  export type MarginDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Margin
     */
    select?: MarginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Margin
     */
    omit?: MarginOmit<ExtArgs> | null
  }


  /**
   * Model Instrument
   */

  export type AggregateInstrument = {
    _count: InstrumentCountAggregateOutputType | null
    _avg: InstrumentAvgAggregateOutputType | null
    _sum: InstrumentSumAggregateOutputType | null
    _min: InstrumentMinAggregateOutputType | null
    _max: InstrumentMaxAggregateOutputType | null
  }

  export type InstrumentAvgAggregateOutputType = {
    tickSize: number | null
    lotSize: number | null
    strike: number | null
    lastPrice: number | null
  }

  export type InstrumentSumAggregateOutputType = {
    tickSize: number | null
    lotSize: number | null
    strike: number | null
    lastPrice: number | null
  }

  export type InstrumentMinAggregateOutputType = {
    id: string | null
    instrumentToken: string | null
    exchangeToken: string | null
    tradingSymbol: string | null
    name: string | null
    exchange: $Enums.Exchange | null
    segment: $Enums.Segment | null
    instrumentType: $Enums.InstrumentType | null
    tickSize: number | null
    lotSize: number | null
    expiry: Date | null
    strike: number | null
    isin: string | null
    isActive: boolean | null
    lastPrice: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstrumentMaxAggregateOutputType = {
    id: string | null
    instrumentToken: string | null
    exchangeToken: string | null
    tradingSymbol: string | null
    name: string | null
    exchange: $Enums.Exchange | null
    segment: $Enums.Segment | null
    instrumentType: $Enums.InstrumentType | null
    tickSize: number | null
    lotSize: number | null
    expiry: Date | null
    strike: number | null
    isin: string | null
    isActive: boolean | null
    lastPrice: number | null
    lastUpdated: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstrumentCountAggregateOutputType = {
    id: number
    instrumentToken: number
    exchangeToken: number
    tradingSymbol: number
    name: number
    exchange: number
    segment: number
    instrumentType: number
    tickSize: number
    lotSize: number
    expiry: number
    strike: number
    isin: number
    isActive: number
    lastPrice: number
    lastUpdated: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InstrumentAvgAggregateInputType = {
    tickSize?: true
    lotSize?: true
    strike?: true
    lastPrice?: true
  }

  export type InstrumentSumAggregateInputType = {
    tickSize?: true
    lotSize?: true
    strike?: true
    lastPrice?: true
  }

  export type InstrumentMinAggregateInputType = {
    id?: true
    instrumentToken?: true
    exchangeToken?: true
    tradingSymbol?: true
    name?: true
    exchange?: true
    segment?: true
    instrumentType?: true
    tickSize?: true
    lotSize?: true
    expiry?: true
    strike?: true
    isin?: true
    isActive?: true
    lastPrice?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstrumentMaxAggregateInputType = {
    id?: true
    instrumentToken?: true
    exchangeToken?: true
    tradingSymbol?: true
    name?: true
    exchange?: true
    segment?: true
    instrumentType?: true
    tickSize?: true
    lotSize?: true
    expiry?: true
    strike?: true
    isin?: true
    isActive?: true
    lastPrice?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstrumentCountAggregateInputType = {
    id?: true
    instrumentToken?: true
    exchangeToken?: true
    tradingSymbol?: true
    name?: true
    exchange?: true
    segment?: true
    instrumentType?: true
    tickSize?: true
    lotSize?: true
    expiry?: true
    strike?: true
    isin?: true
    isActive?: true
    lastPrice?: true
    lastUpdated?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InstrumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instrument to aggregate.
     */
    where?: InstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instruments to fetch.
     */
    orderBy?: InstrumentOrderByWithRelationInput | InstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instruments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instruments
    **/
    _count?: true | InstrumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstrumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstrumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstrumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstrumentMaxAggregateInputType
  }

  export type GetInstrumentAggregateType<T extends InstrumentAggregateArgs> = {
        [P in keyof T & keyof AggregateInstrument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstrument[P]>
      : GetScalarType<T[P], AggregateInstrument[P]>
  }




  export type InstrumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstrumentWhereInput
    orderBy?: InstrumentOrderByWithAggregationInput | InstrumentOrderByWithAggregationInput[]
    by: InstrumentScalarFieldEnum[] | InstrumentScalarFieldEnum
    having?: InstrumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstrumentCountAggregateInputType | true
    _avg?: InstrumentAvgAggregateInputType
    _sum?: InstrumentSumAggregateInputType
    _min?: InstrumentMinAggregateInputType
    _max?: InstrumentMaxAggregateInputType
  }

  export type InstrumentGroupByOutputType = {
    id: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize: number
    lotSize: number
    expiry: Date | null
    strike: number | null
    isin: string | null
    isActive: boolean
    lastPrice: number
    lastUpdated: Date
    createdAt: Date
    updatedAt: Date
    _count: InstrumentCountAggregateOutputType | null
    _avg: InstrumentAvgAggregateOutputType | null
    _sum: InstrumentSumAggregateOutputType | null
    _min: InstrumentMinAggregateOutputType | null
    _max: InstrumentMaxAggregateOutputType | null
  }

  type GetInstrumentGroupByPayload<T extends InstrumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstrumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstrumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstrumentGroupByOutputType[P]>
            : GetScalarType<T[P], InstrumentGroupByOutputType[P]>
        }
      >
    >


  export type InstrumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentToken?: boolean
    exchangeToken?: boolean
    tradingSymbol?: boolean
    name?: boolean
    exchange?: boolean
    segment?: boolean
    instrumentType?: boolean
    tickSize?: boolean
    lotSize?: boolean
    expiry?: boolean
    strike?: boolean
    isin?: boolean
    isActive?: boolean
    lastPrice?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    holdings?: boolean | Instrument$holdingsArgs<ExtArgs>
    positions?: boolean | Instrument$positionsArgs<ExtArgs>
    orders?: boolean | Instrument$ordersArgs<ExtArgs>
    trades?: boolean | Instrument$tradesArgs<ExtArgs>
    marketDepth?: boolean | Instrument$marketDepthArgs<ExtArgs>
    priceHistory?: boolean | Instrument$priceHistoryArgs<ExtArgs>
    watchlistItems?: boolean | Instrument$watchlistItemsArgs<ExtArgs>
    _count?: boolean | InstrumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instrument"]>

  export type InstrumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentToken?: boolean
    exchangeToken?: boolean
    tradingSymbol?: boolean
    name?: boolean
    exchange?: boolean
    segment?: boolean
    instrumentType?: boolean
    tickSize?: boolean
    lotSize?: boolean
    expiry?: boolean
    strike?: boolean
    isin?: boolean
    isActive?: boolean
    lastPrice?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["instrument"]>

  export type InstrumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentToken?: boolean
    exchangeToken?: boolean
    tradingSymbol?: boolean
    name?: boolean
    exchange?: boolean
    segment?: boolean
    instrumentType?: boolean
    tickSize?: boolean
    lotSize?: boolean
    expiry?: boolean
    strike?: boolean
    isin?: boolean
    isActive?: boolean
    lastPrice?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["instrument"]>

  export type InstrumentSelectScalar = {
    id?: boolean
    instrumentToken?: boolean
    exchangeToken?: boolean
    tradingSymbol?: boolean
    name?: boolean
    exchange?: boolean
    segment?: boolean
    instrumentType?: boolean
    tickSize?: boolean
    lotSize?: boolean
    expiry?: boolean
    strike?: boolean
    isin?: boolean
    isActive?: boolean
    lastPrice?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InstrumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "instrumentToken" | "exchangeToken" | "tradingSymbol" | "name" | "exchange" | "segment" | "instrumentType" | "tickSize" | "lotSize" | "expiry" | "strike" | "isin" | "isActive" | "lastPrice" | "lastUpdated" | "createdAt" | "updatedAt", ExtArgs["result"]["instrument"]>
  export type InstrumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    holdings?: boolean | Instrument$holdingsArgs<ExtArgs>
    positions?: boolean | Instrument$positionsArgs<ExtArgs>
    orders?: boolean | Instrument$ordersArgs<ExtArgs>
    trades?: boolean | Instrument$tradesArgs<ExtArgs>
    marketDepth?: boolean | Instrument$marketDepthArgs<ExtArgs>
    priceHistory?: boolean | Instrument$priceHistoryArgs<ExtArgs>
    watchlistItems?: boolean | Instrument$watchlistItemsArgs<ExtArgs>
    _count?: boolean | InstrumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstrumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type InstrumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InstrumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Instrument"
    objects: {
      holdings: Prisma.$HoldingPayload<ExtArgs>[]
      positions: Prisma.$PositionPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      trades: Prisma.$TradePayload<ExtArgs>[]
      marketDepth: Prisma.$MarketDepthPayload<ExtArgs>[]
      priceHistory: Prisma.$PriceHistoryPayload<ExtArgs>[]
      watchlistItems: Prisma.$WatchlistItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instrumentToken: string
      exchangeToken: string
      tradingSymbol: string
      name: string
      exchange: $Enums.Exchange
      segment: $Enums.Segment
      instrumentType: $Enums.InstrumentType
      tickSize: number
      lotSize: number
      expiry: Date | null
      strike: number | null
      isin: string | null
      isActive: boolean
      lastPrice: number
      lastUpdated: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["instrument"]>
    composites: {}
  }

  type InstrumentGetPayload<S extends boolean | null | undefined | InstrumentDefaultArgs> = $Result.GetResult<Prisma.$InstrumentPayload, S>

  type InstrumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstrumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstrumentCountAggregateInputType | true
    }

  export interface InstrumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instrument'], meta: { name: 'Instrument' } }
    /**
     * Find zero or one Instrument that matches the filter.
     * @param {InstrumentFindUniqueArgs} args - Arguments to find a Instrument
     * @example
     * // Get one Instrument
     * const instrument = await prisma.instrument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstrumentFindUniqueArgs>(args: SelectSubset<T, InstrumentFindUniqueArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Instrument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstrumentFindUniqueOrThrowArgs} args - Arguments to find a Instrument
     * @example
     * // Get one Instrument
     * const instrument = await prisma.instrument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstrumentFindUniqueOrThrowArgs>(args: SelectSubset<T, InstrumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Instrument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentFindFirstArgs} args - Arguments to find a Instrument
     * @example
     * // Get one Instrument
     * const instrument = await prisma.instrument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstrumentFindFirstArgs>(args?: SelectSubset<T, InstrumentFindFirstArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Instrument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentFindFirstOrThrowArgs} args - Arguments to find a Instrument
     * @example
     * // Get one Instrument
     * const instrument = await prisma.instrument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstrumentFindFirstOrThrowArgs>(args?: SelectSubset<T, InstrumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Instruments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instruments
     * const instruments = await prisma.instrument.findMany()
     * 
     * // Get first 10 Instruments
     * const instruments = await prisma.instrument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instrumentWithIdOnly = await prisma.instrument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstrumentFindManyArgs>(args?: SelectSubset<T, InstrumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Instrument.
     * @param {InstrumentCreateArgs} args - Arguments to create a Instrument.
     * @example
     * // Create one Instrument
     * const Instrument = await prisma.instrument.create({
     *   data: {
     *     // ... data to create a Instrument
     *   }
     * })
     * 
     */
    create<T extends InstrumentCreateArgs>(args: SelectSubset<T, InstrumentCreateArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Instruments.
     * @param {InstrumentCreateManyArgs} args - Arguments to create many Instruments.
     * @example
     * // Create many Instruments
     * const instrument = await prisma.instrument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstrumentCreateManyArgs>(args?: SelectSubset<T, InstrumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Instruments and returns the data saved in the database.
     * @param {InstrumentCreateManyAndReturnArgs} args - Arguments to create many Instruments.
     * @example
     * // Create many Instruments
     * const instrument = await prisma.instrument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Instruments and only return the `id`
     * const instrumentWithIdOnly = await prisma.instrument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstrumentCreateManyAndReturnArgs>(args?: SelectSubset<T, InstrumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Instrument.
     * @param {InstrumentDeleteArgs} args - Arguments to delete one Instrument.
     * @example
     * // Delete one Instrument
     * const Instrument = await prisma.instrument.delete({
     *   where: {
     *     // ... filter to delete one Instrument
     *   }
     * })
     * 
     */
    delete<T extends InstrumentDeleteArgs>(args: SelectSubset<T, InstrumentDeleteArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Instrument.
     * @param {InstrumentUpdateArgs} args - Arguments to update one Instrument.
     * @example
     * // Update one Instrument
     * const instrument = await prisma.instrument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstrumentUpdateArgs>(args: SelectSubset<T, InstrumentUpdateArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Instruments.
     * @param {InstrumentDeleteManyArgs} args - Arguments to filter Instruments to delete.
     * @example
     * // Delete a few Instruments
     * const { count } = await prisma.instrument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstrumentDeleteManyArgs>(args?: SelectSubset<T, InstrumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instruments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instruments
     * const instrument = await prisma.instrument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstrumentUpdateManyArgs>(args: SelectSubset<T, InstrumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instruments and returns the data updated in the database.
     * @param {InstrumentUpdateManyAndReturnArgs} args - Arguments to update many Instruments.
     * @example
     * // Update many Instruments
     * const instrument = await prisma.instrument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Instruments and only return the `id`
     * const instrumentWithIdOnly = await prisma.instrument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstrumentUpdateManyAndReturnArgs>(args: SelectSubset<T, InstrumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Instrument.
     * @param {InstrumentUpsertArgs} args - Arguments to update or create a Instrument.
     * @example
     * // Update or create a Instrument
     * const instrument = await prisma.instrument.upsert({
     *   create: {
     *     // ... data to create a Instrument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instrument we want to update
     *   }
     * })
     */
    upsert<T extends InstrumentUpsertArgs>(args: SelectSubset<T, InstrumentUpsertArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Instruments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentCountArgs} args - Arguments to filter Instruments to count.
     * @example
     * // Count the number of Instruments
     * const count = await prisma.instrument.count({
     *   where: {
     *     // ... the filter for the Instruments we want to count
     *   }
     * })
    **/
    count<T extends InstrumentCountArgs>(
      args?: Subset<T, InstrumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstrumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instrument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstrumentAggregateArgs>(args: Subset<T, InstrumentAggregateArgs>): Prisma.PrismaPromise<GetInstrumentAggregateType<T>>

    /**
     * Group by Instrument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstrumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstrumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstrumentGroupByArgs['orderBy'] }
        : { orderBy?: InstrumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstrumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstrumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instrument model
   */
  readonly fields: InstrumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instrument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstrumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    holdings<T extends Instrument$holdingsArgs<ExtArgs> = {}>(args?: Subset<T, Instrument$holdingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    positions<T extends Instrument$positionsArgs<ExtArgs> = {}>(args?: Subset<T, Instrument$positionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    orders<T extends Instrument$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Instrument$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trades<T extends Instrument$tradesArgs<ExtArgs> = {}>(args?: Subset<T, Instrument$tradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    marketDepth<T extends Instrument$marketDepthArgs<ExtArgs> = {}>(args?: Subset<T, Instrument$marketDepthArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    priceHistory<T extends Instrument$priceHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Instrument$priceHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchlistItems<T extends Instrument$watchlistItemsArgs<ExtArgs> = {}>(args?: Subset<T, Instrument$watchlistItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Instrument model
   */
  interface InstrumentFieldRefs {
    readonly id: FieldRef<"Instrument", 'String'>
    readonly instrumentToken: FieldRef<"Instrument", 'String'>
    readonly exchangeToken: FieldRef<"Instrument", 'String'>
    readonly tradingSymbol: FieldRef<"Instrument", 'String'>
    readonly name: FieldRef<"Instrument", 'String'>
    readonly exchange: FieldRef<"Instrument", 'Exchange'>
    readonly segment: FieldRef<"Instrument", 'Segment'>
    readonly instrumentType: FieldRef<"Instrument", 'InstrumentType'>
    readonly tickSize: FieldRef<"Instrument", 'Float'>
    readonly lotSize: FieldRef<"Instrument", 'Int'>
    readonly expiry: FieldRef<"Instrument", 'DateTime'>
    readonly strike: FieldRef<"Instrument", 'Float'>
    readonly isin: FieldRef<"Instrument", 'String'>
    readonly isActive: FieldRef<"Instrument", 'Boolean'>
    readonly lastPrice: FieldRef<"Instrument", 'Float'>
    readonly lastUpdated: FieldRef<"Instrument", 'DateTime'>
    readonly createdAt: FieldRef<"Instrument", 'DateTime'>
    readonly updatedAt: FieldRef<"Instrument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Instrument findUnique
   */
  export type InstrumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * Filter, which Instrument to fetch.
     */
    where: InstrumentWhereUniqueInput
  }

  /**
   * Instrument findUniqueOrThrow
   */
  export type InstrumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * Filter, which Instrument to fetch.
     */
    where: InstrumentWhereUniqueInput
  }

  /**
   * Instrument findFirst
   */
  export type InstrumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * Filter, which Instrument to fetch.
     */
    where?: InstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instruments to fetch.
     */
    orderBy?: InstrumentOrderByWithRelationInput | InstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instruments.
     */
    cursor?: InstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instruments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instruments.
     */
    distinct?: InstrumentScalarFieldEnum | InstrumentScalarFieldEnum[]
  }

  /**
   * Instrument findFirstOrThrow
   */
  export type InstrumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * Filter, which Instrument to fetch.
     */
    where?: InstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instruments to fetch.
     */
    orderBy?: InstrumentOrderByWithRelationInput | InstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instruments.
     */
    cursor?: InstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instruments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instruments.
     */
    distinct?: InstrumentScalarFieldEnum | InstrumentScalarFieldEnum[]
  }

  /**
   * Instrument findMany
   */
  export type InstrumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * Filter, which Instruments to fetch.
     */
    where?: InstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instruments to fetch.
     */
    orderBy?: InstrumentOrderByWithRelationInput | InstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instruments.
     */
    cursor?: InstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instruments.
     */
    skip?: number
    distinct?: InstrumentScalarFieldEnum | InstrumentScalarFieldEnum[]
  }

  /**
   * Instrument create
   */
  export type InstrumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Instrument.
     */
    data: XOR<InstrumentCreateInput, InstrumentUncheckedCreateInput>
  }

  /**
   * Instrument createMany
   */
  export type InstrumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instruments.
     */
    data: InstrumentCreateManyInput | InstrumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Instrument createManyAndReturn
   */
  export type InstrumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * The data used to create many Instruments.
     */
    data: InstrumentCreateManyInput | InstrumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Instrument update
   */
  export type InstrumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Instrument.
     */
    data: XOR<InstrumentUpdateInput, InstrumentUncheckedUpdateInput>
    /**
     * Choose, which Instrument to update.
     */
    where: InstrumentWhereUniqueInput
  }

  /**
   * Instrument updateMany
   */
  export type InstrumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instruments.
     */
    data: XOR<InstrumentUpdateManyMutationInput, InstrumentUncheckedUpdateManyInput>
    /**
     * Filter which Instruments to update
     */
    where?: InstrumentWhereInput
    /**
     * Limit how many Instruments to update.
     */
    limit?: number
  }

  /**
   * Instrument updateManyAndReturn
   */
  export type InstrumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * The data used to update Instruments.
     */
    data: XOR<InstrumentUpdateManyMutationInput, InstrumentUncheckedUpdateManyInput>
    /**
     * Filter which Instruments to update
     */
    where?: InstrumentWhereInput
    /**
     * Limit how many Instruments to update.
     */
    limit?: number
  }

  /**
   * Instrument upsert
   */
  export type InstrumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Instrument to update in case it exists.
     */
    where: InstrumentWhereUniqueInput
    /**
     * In case the Instrument found by the `where` argument doesn't exist, create a new Instrument with this data.
     */
    create: XOR<InstrumentCreateInput, InstrumentUncheckedCreateInput>
    /**
     * In case the Instrument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstrumentUpdateInput, InstrumentUncheckedUpdateInput>
  }

  /**
   * Instrument delete
   */
  export type InstrumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
    /**
     * Filter which Instrument to delete.
     */
    where: InstrumentWhereUniqueInput
  }

  /**
   * Instrument deleteMany
   */
  export type InstrumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instruments to delete
     */
    where?: InstrumentWhereInput
    /**
     * Limit how many Instruments to delete.
     */
    limit?: number
  }

  /**
   * Instrument.holdings
   */
  export type Instrument$holdingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    where?: HoldingWhereInput
    orderBy?: HoldingOrderByWithRelationInput | HoldingOrderByWithRelationInput[]
    cursor?: HoldingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HoldingScalarFieldEnum | HoldingScalarFieldEnum[]
  }

  /**
   * Instrument.positions
   */
  export type Instrument$positionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    cursor?: PositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Instrument.orders
   */
  export type Instrument$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Instrument.trades
   */
  export type Instrument$tradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    where?: TradeWhereInput
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    cursor?: TradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Instrument.marketDepth
   */
  export type Instrument$marketDepthArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    where?: MarketDepthWhereInput
    orderBy?: MarketDepthOrderByWithRelationInput | MarketDepthOrderByWithRelationInput[]
    cursor?: MarketDepthWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarketDepthScalarFieldEnum | MarketDepthScalarFieldEnum[]
  }

  /**
   * Instrument.priceHistory
   */
  export type Instrument$priceHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    where?: PriceHistoryWhereInput
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    cursor?: PriceHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * Instrument.watchlistItems
   */
  export type Instrument$watchlistItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    where?: WatchlistItemWhereInput
    orderBy?: WatchlistItemOrderByWithRelationInput | WatchlistItemOrderByWithRelationInput[]
    cursor?: WatchlistItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchlistItemScalarFieldEnum | WatchlistItemScalarFieldEnum[]
  }

  /**
   * Instrument without action
   */
  export type InstrumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instrument
     */
    select?: InstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instrument
     */
    omit?: InstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstrumentInclude<ExtArgs> | null
  }


  /**
   * Model MarketDepth
   */

  export type AggregateMarketDepth = {
    _count: MarketDepthCountAggregateOutputType | null
    _avg: MarketDepthAvgAggregateOutputType | null
    _sum: MarketDepthSumAggregateOutputType | null
    _min: MarketDepthMinAggregateOutputType | null
    _max: MarketDepthMaxAggregateOutputType | null
  }

  export type MarketDepthAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
    orders: number | null
  }

  export type MarketDepthSumAggregateOutputType = {
    price: number | null
    quantity: number | null
    orders: number | null
  }

  export type MarketDepthMinAggregateOutputType = {
    id: string | null
    instrumentId: string | null
    side: $Enums.OrderSide | null
    price: number | null
    quantity: number | null
    orders: number | null
    timestamp: Date | null
  }

  export type MarketDepthMaxAggregateOutputType = {
    id: string | null
    instrumentId: string | null
    side: $Enums.OrderSide | null
    price: number | null
    quantity: number | null
    orders: number | null
    timestamp: Date | null
  }

  export type MarketDepthCountAggregateOutputType = {
    id: number
    instrumentId: number
    side: number
    price: number
    quantity: number
    orders: number
    timestamp: number
    _all: number
  }


  export type MarketDepthAvgAggregateInputType = {
    price?: true
    quantity?: true
    orders?: true
  }

  export type MarketDepthSumAggregateInputType = {
    price?: true
    quantity?: true
    orders?: true
  }

  export type MarketDepthMinAggregateInputType = {
    id?: true
    instrumentId?: true
    side?: true
    price?: true
    quantity?: true
    orders?: true
    timestamp?: true
  }

  export type MarketDepthMaxAggregateInputType = {
    id?: true
    instrumentId?: true
    side?: true
    price?: true
    quantity?: true
    orders?: true
    timestamp?: true
  }

  export type MarketDepthCountAggregateInputType = {
    id?: true
    instrumentId?: true
    side?: true
    price?: true
    quantity?: true
    orders?: true
    timestamp?: true
    _all?: true
  }

  export type MarketDepthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketDepth to aggregate.
     */
    where?: MarketDepthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketDepths to fetch.
     */
    orderBy?: MarketDepthOrderByWithRelationInput | MarketDepthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketDepthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketDepths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketDepths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketDepths
    **/
    _count?: true | MarketDepthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketDepthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketDepthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketDepthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketDepthMaxAggregateInputType
  }

  export type GetMarketDepthAggregateType<T extends MarketDepthAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketDepth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketDepth[P]>
      : GetScalarType<T[P], AggregateMarketDepth[P]>
  }




  export type MarketDepthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketDepthWhereInput
    orderBy?: MarketDepthOrderByWithAggregationInput | MarketDepthOrderByWithAggregationInput[]
    by: MarketDepthScalarFieldEnum[] | MarketDepthScalarFieldEnum
    having?: MarketDepthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketDepthCountAggregateInputType | true
    _avg?: MarketDepthAvgAggregateInputType
    _sum?: MarketDepthSumAggregateInputType
    _min?: MarketDepthMinAggregateInputType
    _max?: MarketDepthMaxAggregateInputType
  }

  export type MarketDepthGroupByOutputType = {
    id: string
    instrumentId: string
    side: $Enums.OrderSide
    price: number
    quantity: number
    orders: number
    timestamp: Date
    _count: MarketDepthCountAggregateOutputType | null
    _avg: MarketDepthAvgAggregateOutputType | null
    _sum: MarketDepthSumAggregateOutputType | null
    _min: MarketDepthMinAggregateOutputType | null
    _max: MarketDepthMaxAggregateOutputType | null
  }

  type GetMarketDepthGroupByPayload<T extends MarketDepthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketDepthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketDepthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketDepthGroupByOutputType[P]>
            : GetScalarType<T[P], MarketDepthGroupByOutputType[P]>
        }
      >
    >


  export type MarketDepthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    side?: boolean
    price?: boolean
    quantity?: boolean
    orders?: boolean
    timestamp?: boolean
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketDepth"]>

  export type MarketDepthSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    side?: boolean
    price?: boolean
    quantity?: boolean
    orders?: boolean
    timestamp?: boolean
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketDepth"]>

  export type MarketDepthSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    side?: boolean
    price?: boolean
    quantity?: boolean
    orders?: boolean
    timestamp?: boolean
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketDepth"]>

  export type MarketDepthSelectScalar = {
    id?: boolean
    instrumentId?: boolean
    side?: boolean
    price?: boolean
    quantity?: boolean
    orders?: boolean
    timestamp?: boolean
  }

  export type MarketDepthOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "instrumentId" | "side" | "price" | "quantity" | "orders" | "timestamp", ExtArgs["result"]["marketDepth"]>
  export type MarketDepthInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type MarketDepthIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type MarketDepthIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }

  export type $MarketDepthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketDepth"
    objects: {
      instrument: Prisma.$InstrumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instrumentId: string
      side: $Enums.OrderSide
      price: number
      quantity: number
      orders: number
      timestamp: Date
    }, ExtArgs["result"]["marketDepth"]>
    composites: {}
  }

  type MarketDepthGetPayload<S extends boolean | null | undefined | MarketDepthDefaultArgs> = $Result.GetResult<Prisma.$MarketDepthPayload, S>

  type MarketDepthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketDepthFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketDepthCountAggregateInputType | true
    }

  export interface MarketDepthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketDepth'], meta: { name: 'MarketDepth' } }
    /**
     * Find zero or one MarketDepth that matches the filter.
     * @param {MarketDepthFindUniqueArgs} args - Arguments to find a MarketDepth
     * @example
     * // Get one MarketDepth
     * const marketDepth = await prisma.marketDepth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketDepthFindUniqueArgs>(args: SelectSubset<T, MarketDepthFindUniqueArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketDepth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketDepthFindUniqueOrThrowArgs} args - Arguments to find a MarketDepth
     * @example
     * // Get one MarketDepth
     * const marketDepth = await prisma.marketDepth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketDepthFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketDepthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketDepth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDepthFindFirstArgs} args - Arguments to find a MarketDepth
     * @example
     * // Get one MarketDepth
     * const marketDepth = await prisma.marketDepth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketDepthFindFirstArgs>(args?: SelectSubset<T, MarketDepthFindFirstArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketDepth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDepthFindFirstOrThrowArgs} args - Arguments to find a MarketDepth
     * @example
     * // Get one MarketDepth
     * const marketDepth = await prisma.marketDepth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketDepthFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketDepthFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketDepths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDepthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketDepths
     * const marketDepths = await prisma.marketDepth.findMany()
     * 
     * // Get first 10 MarketDepths
     * const marketDepths = await prisma.marketDepth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketDepthWithIdOnly = await prisma.marketDepth.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketDepthFindManyArgs>(args?: SelectSubset<T, MarketDepthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketDepth.
     * @param {MarketDepthCreateArgs} args - Arguments to create a MarketDepth.
     * @example
     * // Create one MarketDepth
     * const MarketDepth = await prisma.marketDepth.create({
     *   data: {
     *     // ... data to create a MarketDepth
     *   }
     * })
     * 
     */
    create<T extends MarketDepthCreateArgs>(args: SelectSubset<T, MarketDepthCreateArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketDepths.
     * @param {MarketDepthCreateManyArgs} args - Arguments to create many MarketDepths.
     * @example
     * // Create many MarketDepths
     * const marketDepth = await prisma.marketDepth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketDepthCreateManyArgs>(args?: SelectSubset<T, MarketDepthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketDepths and returns the data saved in the database.
     * @param {MarketDepthCreateManyAndReturnArgs} args - Arguments to create many MarketDepths.
     * @example
     * // Create many MarketDepths
     * const marketDepth = await prisma.marketDepth.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketDepths and only return the `id`
     * const marketDepthWithIdOnly = await prisma.marketDepth.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketDepthCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketDepthCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketDepth.
     * @param {MarketDepthDeleteArgs} args - Arguments to delete one MarketDepth.
     * @example
     * // Delete one MarketDepth
     * const MarketDepth = await prisma.marketDepth.delete({
     *   where: {
     *     // ... filter to delete one MarketDepth
     *   }
     * })
     * 
     */
    delete<T extends MarketDepthDeleteArgs>(args: SelectSubset<T, MarketDepthDeleteArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketDepth.
     * @param {MarketDepthUpdateArgs} args - Arguments to update one MarketDepth.
     * @example
     * // Update one MarketDepth
     * const marketDepth = await prisma.marketDepth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketDepthUpdateArgs>(args: SelectSubset<T, MarketDepthUpdateArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketDepths.
     * @param {MarketDepthDeleteManyArgs} args - Arguments to filter MarketDepths to delete.
     * @example
     * // Delete a few MarketDepths
     * const { count } = await prisma.marketDepth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketDepthDeleteManyArgs>(args?: SelectSubset<T, MarketDepthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketDepths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDepthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketDepths
     * const marketDepth = await prisma.marketDepth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketDepthUpdateManyArgs>(args: SelectSubset<T, MarketDepthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketDepths and returns the data updated in the database.
     * @param {MarketDepthUpdateManyAndReturnArgs} args - Arguments to update many MarketDepths.
     * @example
     * // Update many MarketDepths
     * const marketDepth = await prisma.marketDepth.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketDepths and only return the `id`
     * const marketDepthWithIdOnly = await prisma.marketDepth.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketDepthUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketDepthUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketDepth.
     * @param {MarketDepthUpsertArgs} args - Arguments to update or create a MarketDepth.
     * @example
     * // Update or create a MarketDepth
     * const marketDepth = await prisma.marketDepth.upsert({
     *   create: {
     *     // ... data to create a MarketDepth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketDepth we want to update
     *   }
     * })
     */
    upsert<T extends MarketDepthUpsertArgs>(args: SelectSubset<T, MarketDepthUpsertArgs<ExtArgs>>): Prisma__MarketDepthClient<$Result.GetResult<Prisma.$MarketDepthPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketDepths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDepthCountArgs} args - Arguments to filter MarketDepths to count.
     * @example
     * // Count the number of MarketDepths
     * const count = await prisma.marketDepth.count({
     *   where: {
     *     // ... the filter for the MarketDepths we want to count
     *   }
     * })
    **/
    count<T extends MarketDepthCountArgs>(
      args?: Subset<T, MarketDepthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketDepthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketDepth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDepthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketDepthAggregateArgs>(args: Subset<T, MarketDepthAggregateArgs>): Prisma.PrismaPromise<GetMarketDepthAggregateType<T>>

    /**
     * Group by MarketDepth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDepthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketDepthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketDepthGroupByArgs['orderBy'] }
        : { orderBy?: MarketDepthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketDepthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketDepthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketDepth model
   */
  readonly fields: MarketDepthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketDepth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketDepthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instrument<T extends InstrumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentDefaultArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketDepth model
   */
  interface MarketDepthFieldRefs {
    readonly id: FieldRef<"MarketDepth", 'String'>
    readonly instrumentId: FieldRef<"MarketDepth", 'String'>
    readonly side: FieldRef<"MarketDepth", 'OrderSide'>
    readonly price: FieldRef<"MarketDepth", 'Float'>
    readonly quantity: FieldRef<"MarketDepth", 'Int'>
    readonly orders: FieldRef<"MarketDepth", 'Int'>
    readonly timestamp: FieldRef<"MarketDepth", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MarketDepth findUnique
   */
  export type MarketDepthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * Filter, which MarketDepth to fetch.
     */
    where: MarketDepthWhereUniqueInput
  }

  /**
   * MarketDepth findUniqueOrThrow
   */
  export type MarketDepthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * Filter, which MarketDepth to fetch.
     */
    where: MarketDepthWhereUniqueInput
  }

  /**
   * MarketDepth findFirst
   */
  export type MarketDepthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * Filter, which MarketDepth to fetch.
     */
    where?: MarketDepthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketDepths to fetch.
     */
    orderBy?: MarketDepthOrderByWithRelationInput | MarketDepthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketDepths.
     */
    cursor?: MarketDepthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketDepths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketDepths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketDepths.
     */
    distinct?: MarketDepthScalarFieldEnum | MarketDepthScalarFieldEnum[]
  }

  /**
   * MarketDepth findFirstOrThrow
   */
  export type MarketDepthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * Filter, which MarketDepth to fetch.
     */
    where?: MarketDepthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketDepths to fetch.
     */
    orderBy?: MarketDepthOrderByWithRelationInput | MarketDepthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketDepths.
     */
    cursor?: MarketDepthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketDepths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketDepths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketDepths.
     */
    distinct?: MarketDepthScalarFieldEnum | MarketDepthScalarFieldEnum[]
  }

  /**
   * MarketDepth findMany
   */
  export type MarketDepthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * Filter, which MarketDepths to fetch.
     */
    where?: MarketDepthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketDepths to fetch.
     */
    orderBy?: MarketDepthOrderByWithRelationInput | MarketDepthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketDepths.
     */
    cursor?: MarketDepthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketDepths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketDepths.
     */
    skip?: number
    distinct?: MarketDepthScalarFieldEnum | MarketDepthScalarFieldEnum[]
  }

  /**
   * MarketDepth create
   */
  export type MarketDepthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * The data needed to create a MarketDepth.
     */
    data: XOR<MarketDepthCreateInput, MarketDepthUncheckedCreateInput>
  }

  /**
   * MarketDepth createMany
   */
  export type MarketDepthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketDepths.
     */
    data: MarketDepthCreateManyInput | MarketDepthCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketDepth createManyAndReturn
   */
  export type MarketDepthCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * The data used to create many MarketDepths.
     */
    data: MarketDepthCreateManyInput | MarketDepthCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketDepth update
   */
  export type MarketDepthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * The data needed to update a MarketDepth.
     */
    data: XOR<MarketDepthUpdateInput, MarketDepthUncheckedUpdateInput>
    /**
     * Choose, which MarketDepth to update.
     */
    where: MarketDepthWhereUniqueInput
  }

  /**
   * MarketDepth updateMany
   */
  export type MarketDepthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketDepths.
     */
    data: XOR<MarketDepthUpdateManyMutationInput, MarketDepthUncheckedUpdateManyInput>
    /**
     * Filter which MarketDepths to update
     */
    where?: MarketDepthWhereInput
    /**
     * Limit how many MarketDepths to update.
     */
    limit?: number
  }

  /**
   * MarketDepth updateManyAndReturn
   */
  export type MarketDepthUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * The data used to update MarketDepths.
     */
    data: XOR<MarketDepthUpdateManyMutationInput, MarketDepthUncheckedUpdateManyInput>
    /**
     * Filter which MarketDepths to update
     */
    where?: MarketDepthWhereInput
    /**
     * Limit how many MarketDepths to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketDepth upsert
   */
  export type MarketDepthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * The filter to search for the MarketDepth to update in case it exists.
     */
    where: MarketDepthWhereUniqueInput
    /**
     * In case the MarketDepth found by the `where` argument doesn't exist, create a new MarketDepth with this data.
     */
    create: XOR<MarketDepthCreateInput, MarketDepthUncheckedCreateInput>
    /**
     * In case the MarketDepth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketDepthUpdateInput, MarketDepthUncheckedUpdateInput>
  }

  /**
   * MarketDepth delete
   */
  export type MarketDepthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
    /**
     * Filter which MarketDepth to delete.
     */
    where: MarketDepthWhereUniqueInput
  }

  /**
   * MarketDepth deleteMany
   */
  export type MarketDepthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketDepths to delete
     */
    where?: MarketDepthWhereInput
    /**
     * Limit how many MarketDepths to delete.
     */
    limit?: number
  }

  /**
   * MarketDepth without action
   */
  export type MarketDepthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketDepth
     */
    select?: MarketDepthSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketDepth
     */
    omit?: MarketDepthOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketDepthInclude<ExtArgs> | null
  }


  /**
   * Model PriceHistory
   */

  export type AggregatePriceHistory = {
    _count: PriceHistoryCountAggregateOutputType | null
    _avg: PriceHistoryAvgAggregateOutputType | null
    _sum: PriceHistorySumAggregateOutputType | null
    _min: PriceHistoryMinAggregateOutputType | null
    _max: PriceHistoryMaxAggregateOutputType | null
  }

  export type PriceHistoryAvgAggregateOutputType = {
    open: number | null
    high: number | null
    low: number | null
    close: number | null
    volume: number | null
  }

  export type PriceHistorySumAggregateOutputType = {
    open: number | null
    high: number | null
    low: number | null
    close: number | null
    volume: number | null
  }

  export type PriceHistoryMinAggregateOutputType = {
    id: string | null
    instrumentId: string | null
    open: number | null
    high: number | null
    low: number | null
    close: number | null
    volume: number | null
    ohlcDate: Date | null
    interval: string | null
  }

  export type PriceHistoryMaxAggregateOutputType = {
    id: string | null
    instrumentId: string | null
    open: number | null
    high: number | null
    low: number | null
    close: number | null
    volume: number | null
    ohlcDate: Date | null
    interval: string | null
  }

  export type PriceHistoryCountAggregateOutputType = {
    id: number
    instrumentId: number
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: number
    interval: number
    _all: number
  }


  export type PriceHistoryAvgAggregateInputType = {
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
  }

  export type PriceHistorySumAggregateInputType = {
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
  }

  export type PriceHistoryMinAggregateInputType = {
    id?: true
    instrumentId?: true
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
    ohlcDate?: true
    interval?: true
  }

  export type PriceHistoryMaxAggregateInputType = {
    id?: true
    instrumentId?: true
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
    ohlcDate?: true
    interval?: true
  }

  export type PriceHistoryCountAggregateInputType = {
    id?: true
    instrumentId?: true
    open?: true
    high?: true
    low?: true
    close?: true
    volume?: true
    ohlcDate?: true
    interval?: true
    _all?: true
  }

  export type PriceHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceHistory to aggregate.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PriceHistories
    **/
    _count?: true | PriceHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceHistoryMaxAggregateInputType
  }

  export type GetPriceHistoryAggregateType<T extends PriceHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePriceHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePriceHistory[P]>
      : GetScalarType<T[P], AggregatePriceHistory[P]>
  }




  export type PriceHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceHistoryWhereInput
    orderBy?: PriceHistoryOrderByWithAggregationInput | PriceHistoryOrderByWithAggregationInput[]
    by: PriceHistoryScalarFieldEnum[] | PriceHistoryScalarFieldEnum
    having?: PriceHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceHistoryCountAggregateInputType | true
    _avg?: PriceHistoryAvgAggregateInputType
    _sum?: PriceHistorySumAggregateInputType
    _min?: PriceHistoryMinAggregateInputType
    _max?: PriceHistoryMaxAggregateInputType
  }

  export type PriceHistoryGroupByOutputType = {
    id: string
    instrumentId: string
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: Date
    interval: string
    _count: PriceHistoryCountAggregateOutputType | null
    _avg: PriceHistoryAvgAggregateOutputType | null
    _sum: PriceHistorySumAggregateOutputType | null
    _min: PriceHistoryMinAggregateOutputType | null
    _max: PriceHistoryMaxAggregateOutputType | null
  }

  type GetPriceHistoryGroupByPayload<T extends PriceHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], PriceHistoryGroupByOutputType[P]>
        }
      >
    >


  export type PriceHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    open?: boolean
    high?: boolean
    low?: boolean
    close?: boolean
    volume?: boolean
    ohlcDate?: boolean
    interval?: boolean
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceHistory"]>

  export type PriceHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    open?: boolean
    high?: boolean
    low?: boolean
    close?: boolean
    volume?: boolean
    ohlcDate?: boolean
    interval?: boolean
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceHistory"]>

  export type PriceHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    open?: boolean
    high?: boolean
    low?: boolean
    close?: boolean
    volume?: boolean
    ohlcDate?: boolean
    interval?: boolean
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["priceHistory"]>

  export type PriceHistorySelectScalar = {
    id?: boolean
    instrumentId?: boolean
    open?: boolean
    high?: boolean
    low?: boolean
    close?: boolean
    volume?: boolean
    ohlcDate?: boolean
    interval?: boolean
  }

  export type PriceHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "instrumentId" | "open" | "high" | "low" | "close" | "volume" | "ohlcDate" | "interval", ExtArgs["result"]["priceHistory"]>
  export type PriceHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type PriceHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type PriceHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }

  export type $PriceHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PriceHistory"
    objects: {
      instrument: Prisma.$InstrumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instrumentId: string
      open: number
      high: number
      low: number
      close: number
      volume: number
      ohlcDate: Date
      interval: string
    }, ExtArgs["result"]["priceHistory"]>
    composites: {}
  }

  type PriceHistoryGetPayload<S extends boolean | null | undefined | PriceHistoryDefaultArgs> = $Result.GetResult<Prisma.$PriceHistoryPayload, S>

  type PriceHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PriceHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PriceHistoryCountAggregateInputType | true
    }

  export interface PriceHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PriceHistory'], meta: { name: 'PriceHistory' } }
    /**
     * Find zero or one PriceHistory that matches the filter.
     * @param {PriceHistoryFindUniqueArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PriceHistoryFindUniqueArgs>(args: SelectSubset<T, PriceHistoryFindUniqueArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PriceHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PriceHistoryFindUniqueOrThrowArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PriceHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PriceHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindFirstArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PriceHistoryFindFirstArgs>(args?: SelectSubset<T, PriceHistoryFindFirstArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PriceHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindFirstOrThrowArgs} args - Arguments to find a PriceHistory
     * @example
     * // Get one PriceHistory
     * const priceHistory = await prisma.priceHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PriceHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PriceHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PriceHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PriceHistories
     * const priceHistories = await prisma.priceHistory.findMany()
     * 
     * // Get first 10 PriceHistories
     * const priceHistories = await prisma.priceHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const priceHistoryWithIdOnly = await prisma.priceHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PriceHistoryFindManyArgs>(args?: SelectSubset<T, PriceHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PriceHistory.
     * @param {PriceHistoryCreateArgs} args - Arguments to create a PriceHistory.
     * @example
     * // Create one PriceHistory
     * const PriceHistory = await prisma.priceHistory.create({
     *   data: {
     *     // ... data to create a PriceHistory
     *   }
     * })
     * 
     */
    create<T extends PriceHistoryCreateArgs>(args: SelectSubset<T, PriceHistoryCreateArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PriceHistories.
     * @param {PriceHistoryCreateManyArgs} args - Arguments to create many PriceHistories.
     * @example
     * // Create many PriceHistories
     * const priceHistory = await prisma.priceHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PriceHistoryCreateManyArgs>(args?: SelectSubset<T, PriceHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PriceHistories and returns the data saved in the database.
     * @param {PriceHistoryCreateManyAndReturnArgs} args - Arguments to create many PriceHistories.
     * @example
     * // Create many PriceHistories
     * const priceHistory = await prisma.priceHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PriceHistories and only return the `id`
     * const priceHistoryWithIdOnly = await prisma.priceHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PriceHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PriceHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PriceHistory.
     * @param {PriceHistoryDeleteArgs} args - Arguments to delete one PriceHistory.
     * @example
     * // Delete one PriceHistory
     * const PriceHistory = await prisma.priceHistory.delete({
     *   where: {
     *     // ... filter to delete one PriceHistory
     *   }
     * })
     * 
     */
    delete<T extends PriceHistoryDeleteArgs>(args: SelectSubset<T, PriceHistoryDeleteArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PriceHistory.
     * @param {PriceHistoryUpdateArgs} args - Arguments to update one PriceHistory.
     * @example
     * // Update one PriceHistory
     * const priceHistory = await prisma.priceHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PriceHistoryUpdateArgs>(args: SelectSubset<T, PriceHistoryUpdateArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PriceHistories.
     * @param {PriceHistoryDeleteManyArgs} args - Arguments to filter PriceHistories to delete.
     * @example
     * // Delete a few PriceHistories
     * const { count } = await prisma.priceHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PriceHistoryDeleteManyArgs>(args?: SelectSubset<T, PriceHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PriceHistories
     * const priceHistory = await prisma.priceHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PriceHistoryUpdateManyArgs>(args: SelectSubset<T, PriceHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PriceHistories and returns the data updated in the database.
     * @param {PriceHistoryUpdateManyAndReturnArgs} args - Arguments to update many PriceHistories.
     * @example
     * // Update many PriceHistories
     * const priceHistory = await prisma.priceHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PriceHistories and only return the `id`
     * const priceHistoryWithIdOnly = await prisma.priceHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PriceHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, PriceHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PriceHistory.
     * @param {PriceHistoryUpsertArgs} args - Arguments to update or create a PriceHistory.
     * @example
     * // Update or create a PriceHistory
     * const priceHistory = await prisma.priceHistory.upsert({
     *   create: {
     *     // ... data to create a PriceHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PriceHistory we want to update
     *   }
     * })
     */
    upsert<T extends PriceHistoryUpsertArgs>(args: SelectSubset<T, PriceHistoryUpsertArgs<ExtArgs>>): Prisma__PriceHistoryClient<$Result.GetResult<Prisma.$PriceHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PriceHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryCountArgs} args - Arguments to filter PriceHistories to count.
     * @example
     * // Count the number of PriceHistories
     * const count = await prisma.priceHistory.count({
     *   where: {
     *     // ... the filter for the PriceHistories we want to count
     *   }
     * })
    **/
    count<T extends PriceHistoryCountArgs>(
      args?: Subset<T, PriceHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PriceHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceHistoryAggregateArgs>(args: Subset<T, PriceHistoryAggregateArgs>): Prisma.PrismaPromise<GetPriceHistoryAggregateType<T>>

    /**
     * Group by PriceHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceHistoryGroupByArgs['orderBy'] }
        : { orderBy?: PriceHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PriceHistory model
   */
  readonly fields: PriceHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PriceHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    instrument<T extends InstrumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentDefaultArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PriceHistory model
   */
  interface PriceHistoryFieldRefs {
    readonly id: FieldRef<"PriceHistory", 'String'>
    readonly instrumentId: FieldRef<"PriceHistory", 'String'>
    readonly open: FieldRef<"PriceHistory", 'Float'>
    readonly high: FieldRef<"PriceHistory", 'Float'>
    readonly low: FieldRef<"PriceHistory", 'Float'>
    readonly close: FieldRef<"PriceHistory", 'Float'>
    readonly volume: FieldRef<"PriceHistory", 'Int'>
    readonly ohlcDate: FieldRef<"PriceHistory", 'DateTime'>
    readonly interval: FieldRef<"PriceHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PriceHistory findUnique
   */
  export type PriceHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory findUniqueOrThrow
   */
  export type PriceHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory findFirst
   */
  export type PriceHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceHistories.
     */
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory findFirstOrThrow
   */
  export type PriceHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistory to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PriceHistories.
     */
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory findMany
   */
  export type PriceHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PriceHistories to fetch.
     */
    where?: PriceHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PriceHistories to fetch.
     */
    orderBy?: PriceHistoryOrderByWithRelationInput | PriceHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PriceHistories.
     */
    cursor?: PriceHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PriceHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PriceHistories.
     */
    skip?: number
    distinct?: PriceHistoryScalarFieldEnum | PriceHistoryScalarFieldEnum[]
  }

  /**
   * PriceHistory create
   */
  export type PriceHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PriceHistory.
     */
    data: XOR<PriceHistoryCreateInput, PriceHistoryUncheckedCreateInput>
  }

  /**
   * PriceHistory createMany
   */
  export type PriceHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PriceHistories.
     */
    data: PriceHistoryCreateManyInput | PriceHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PriceHistory createManyAndReturn
   */
  export type PriceHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many PriceHistories.
     */
    data: PriceHistoryCreateManyInput | PriceHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PriceHistory update
   */
  export type PriceHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PriceHistory.
     */
    data: XOR<PriceHistoryUpdateInput, PriceHistoryUncheckedUpdateInput>
    /**
     * Choose, which PriceHistory to update.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory updateMany
   */
  export type PriceHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PriceHistories.
     */
    data: XOR<PriceHistoryUpdateManyMutationInput, PriceHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PriceHistories to update
     */
    where?: PriceHistoryWhereInput
    /**
     * Limit how many PriceHistories to update.
     */
    limit?: number
  }

  /**
   * PriceHistory updateManyAndReturn
   */
  export type PriceHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * The data used to update PriceHistories.
     */
    data: XOR<PriceHistoryUpdateManyMutationInput, PriceHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PriceHistories to update
     */
    where?: PriceHistoryWhereInput
    /**
     * Limit how many PriceHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PriceHistory upsert
   */
  export type PriceHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PriceHistory to update in case it exists.
     */
    where: PriceHistoryWhereUniqueInput
    /**
     * In case the PriceHistory found by the `where` argument doesn't exist, create a new PriceHistory with this data.
     */
    create: XOR<PriceHistoryCreateInput, PriceHistoryUncheckedCreateInput>
    /**
     * In case the PriceHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceHistoryUpdateInput, PriceHistoryUncheckedUpdateInput>
  }

  /**
   * PriceHistory delete
   */
  export type PriceHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
    /**
     * Filter which PriceHistory to delete.
     */
    where: PriceHistoryWhereUniqueInput
  }

  /**
   * PriceHistory deleteMany
   */
  export type PriceHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PriceHistories to delete
     */
    where?: PriceHistoryWhereInput
    /**
     * Limit how many PriceHistories to delete.
     */
    limit?: number
  }

  /**
   * PriceHistory without action
   */
  export type PriceHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceHistory
     */
    select?: PriceHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PriceHistory
     */
    omit?: PriceHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Portfolio
   */

  export type AggregatePortfolio = {
    _count: PortfolioCountAggregateOutputType | null
    _avg: PortfolioAvgAggregateOutputType | null
    _sum: PortfolioSumAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  export type PortfolioAvgAggregateOutputType = {
    totalValue: number | null
    investedValue: number | null
    currentValue: number | null
    dayChange: number | null
    dayChangePercent: number | null
    totalPnl: number | null
    totalPnlPercent: number | null
    xirr: number | null
  }

  export type PortfolioSumAggregateOutputType = {
    totalValue: number | null
    investedValue: number | null
    currentValue: number | null
    dayChange: number | null
    dayChangePercent: number | null
    totalPnl: number | null
    totalPnlPercent: number | null
    xirr: number | null
  }

  export type PortfolioMinAggregateOutputType = {
    id: string | null
    userId: string | null
    totalValue: number | null
    investedValue: number | null
    currentValue: number | null
    dayChange: number | null
    dayChangePercent: number | null
    totalPnl: number | null
    totalPnlPercent: number | null
    xirr: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PortfolioMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    totalValue: number | null
    investedValue: number | null
    currentValue: number | null
    dayChange: number | null
    dayChangePercent: number | null
    totalPnl: number | null
    totalPnlPercent: number | null
    xirr: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type PortfolioCountAggregateOutputType = {
    id: number
    userId: number
    totalValue: number
    investedValue: number
    currentValue: number
    dayChange: number
    dayChangePercent: number
    totalPnl: number
    totalPnlPercent: number
    xirr: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type PortfolioAvgAggregateInputType = {
    totalValue?: true
    investedValue?: true
    currentValue?: true
    dayChange?: true
    dayChangePercent?: true
    totalPnl?: true
    totalPnlPercent?: true
    xirr?: true
  }

  export type PortfolioSumAggregateInputType = {
    totalValue?: true
    investedValue?: true
    currentValue?: true
    dayChange?: true
    dayChangePercent?: true
    totalPnl?: true
    totalPnlPercent?: true
    xirr?: true
  }

  export type PortfolioMinAggregateInputType = {
    id?: true
    userId?: true
    totalValue?: true
    investedValue?: true
    currentValue?: true
    dayChange?: true
    dayChangePercent?: true
    totalPnl?: true
    totalPnlPercent?: true
    xirr?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PortfolioMaxAggregateInputType = {
    id?: true
    userId?: true
    totalValue?: true
    investedValue?: true
    currentValue?: true
    dayChange?: true
    dayChangePercent?: true
    totalPnl?: true
    totalPnlPercent?: true
    xirr?: true
    updatedAt?: true
    createdAt?: true
  }

  export type PortfolioCountAggregateInputType = {
    id?: true
    userId?: true
    totalValue?: true
    investedValue?: true
    currentValue?: true
    dayChange?: true
    dayChangePercent?: true
    totalPnl?: true
    totalPnlPercent?: true
    xirr?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type PortfolioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolio to aggregate.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Portfolios
    **/
    _count?: true | PortfolioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PortfolioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PortfolioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortfolioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortfolioMaxAggregateInputType
  }

  export type GetPortfolioAggregateType<T extends PortfolioAggregateArgs> = {
        [P in keyof T & keyof AggregatePortfolio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePortfolio[P]>
      : GetScalarType<T[P], AggregatePortfolio[P]>
  }




  export type PortfolioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithAggregationInput | PortfolioOrderByWithAggregationInput[]
    by: PortfolioScalarFieldEnum[] | PortfolioScalarFieldEnum
    having?: PortfolioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortfolioCountAggregateInputType | true
    _avg?: PortfolioAvgAggregateInputType
    _sum?: PortfolioSumAggregateInputType
    _min?: PortfolioMinAggregateInputType
    _max?: PortfolioMaxAggregateInputType
  }

  export type PortfolioGroupByOutputType = {
    id: string
    userId: string
    totalValue: number
    investedValue: number
    currentValue: number
    dayChange: number
    dayChangePercent: number
    totalPnl: number
    totalPnlPercent: number
    xirr: number | null
    updatedAt: Date
    createdAt: Date
    _count: PortfolioCountAggregateOutputType | null
    _avg: PortfolioAvgAggregateOutputType | null
    _sum: PortfolioSumAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  type GetPortfolioGroupByPayload<T extends PortfolioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortfolioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortfolioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
            : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
        }
      >
    >


  export type PortfolioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalValue?: boolean
    investedValue?: boolean
    currentValue?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    totalPnl?: boolean
    totalPnlPercent?: boolean
    xirr?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalValue?: boolean
    investedValue?: boolean
    currentValue?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    totalPnl?: boolean
    totalPnlPercent?: boolean
    xirr?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalValue?: boolean
    investedValue?: boolean
    currentValue?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    totalPnl?: boolean
    totalPnlPercent?: boolean
    xirr?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectScalar = {
    id?: boolean
    userId?: boolean
    totalValue?: boolean
    investedValue?: boolean
    currentValue?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    totalPnl?: boolean
    totalPnlPercent?: boolean
    xirr?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type PortfolioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "totalValue" | "investedValue" | "currentValue" | "dayChange" | "dayChangePercent" | "totalPnl" | "totalPnlPercent" | "xirr" | "updatedAt" | "createdAt", ExtArgs["result"]["portfolio"]>
  export type PortfolioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PortfolioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PortfolioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PortfolioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Portfolio"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      totalValue: number
      investedValue: number
      currentValue: number
      dayChange: number
      dayChangePercent: number
      totalPnl: number
      totalPnlPercent: number
      xirr: number | null
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["portfolio"]>
    composites: {}
  }

  type PortfolioGetPayload<S extends boolean | null | undefined | PortfolioDefaultArgs> = $Result.GetResult<Prisma.$PortfolioPayload, S>

  type PortfolioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PortfolioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PortfolioCountAggregateInputType | true
    }

  export interface PortfolioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Portfolio'], meta: { name: 'Portfolio' } }
    /**
     * Find zero or one Portfolio that matches the filter.
     * @param {PortfolioFindUniqueArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PortfolioFindUniqueArgs>(args: SelectSubset<T, PortfolioFindUniqueArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Portfolio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PortfolioFindUniqueOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PortfolioFindUniqueOrThrowArgs>(args: SelectSubset<T, PortfolioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Portfolio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PortfolioFindFirstArgs>(args?: SelectSubset<T, PortfolioFindFirstArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Portfolio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PortfolioFindFirstOrThrowArgs>(args?: SelectSubset<T, PortfolioFindFirstOrThrowArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Portfolios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Portfolios
     * const portfolios = await prisma.portfolio.findMany()
     * 
     * // Get first 10 Portfolios
     * const portfolios = await prisma.portfolio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PortfolioFindManyArgs>(args?: SelectSubset<T, PortfolioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Portfolio.
     * @param {PortfolioCreateArgs} args - Arguments to create a Portfolio.
     * @example
     * // Create one Portfolio
     * const Portfolio = await prisma.portfolio.create({
     *   data: {
     *     // ... data to create a Portfolio
     *   }
     * })
     * 
     */
    create<T extends PortfolioCreateArgs>(args: SelectSubset<T, PortfolioCreateArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Portfolios.
     * @param {PortfolioCreateManyArgs} args - Arguments to create many Portfolios.
     * @example
     * // Create many Portfolios
     * const portfolio = await prisma.portfolio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PortfolioCreateManyArgs>(args?: SelectSubset<T, PortfolioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Portfolios and returns the data saved in the database.
     * @param {PortfolioCreateManyAndReturnArgs} args - Arguments to create many Portfolios.
     * @example
     * // Create many Portfolios
     * const portfolio = await prisma.portfolio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Portfolios and only return the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PortfolioCreateManyAndReturnArgs>(args?: SelectSubset<T, PortfolioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Portfolio.
     * @param {PortfolioDeleteArgs} args - Arguments to delete one Portfolio.
     * @example
     * // Delete one Portfolio
     * const Portfolio = await prisma.portfolio.delete({
     *   where: {
     *     // ... filter to delete one Portfolio
     *   }
     * })
     * 
     */
    delete<T extends PortfolioDeleteArgs>(args: SelectSubset<T, PortfolioDeleteArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Portfolio.
     * @param {PortfolioUpdateArgs} args - Arguments to update one Portfolio.
     * @example
     * // Update one Portfolio
     * const portfolio = await prisma.portfolio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PortfolioUpdateArgs>(args: SelectSubset<T, PortfolioUpdateArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Portfolios.
     * @param {PortfolioDeleteManyArgs} args - Arguments to filter Portfolios to delete.
     * @example
     * // Delete a few Portfolios
     * const { count } = await prisma.portfolio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PortfolioDeleteManyArgs>(args?: SelectSubset<T, PortfolioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Portfolios
     * const portfolio = await prisma.portfolio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PortfolioUpdateManyArgs>(args: SelectSubset<T, PortfolioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolios and returns the data updated in the database.
     * @param {PortfolioUpdateManyAndReturnArgs} args - Arguments to update many Portfolios.
     * @example
     * // Update many Portfolios
     * const portfolio = await prisma.portfolio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Portfolios and only return the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PortfolioUpdateManyAndReturnArgs>(args: SelectSubset<T, PortfolioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Portfolio.
     * @param {PortfolioUpsertArgs} args - Arguments to update or create a Portfolio.
     * @example
     * // Update or create a Portfolio
     * const portfolio = await prisma.portfolio.upsert({
     *   create: {
     *     // ... data to create a Portfolio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Portfolio we want to update
     *   }
     * })
     */
    upsert<T extends PortfolioUpsertArgs>(args: SelectSubset<T, PortfolioUpsertArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioCountArgs} args - Arguments to filter Portfolios to count.
     * @example
     * // Count the number of Portfolios
     * const count = await prisma.portfolio.count({
     *   where: {
     *     // ... the filter for the Portfolios we want to count
     *   }
     * })
    **/
    count<T extends PortfolioCountArgs>(
      args?: Subset<T, PortfolioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortfolioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortfolioAggregateArgs>(args: Subset<T, PortfolioAggregateArgs>): Prisma.PrismaPromise<GetPortfolioAggregateType<T>>

    /**
     * Group by Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortfolioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortfolioGroupByArgs['orderBy'] }
        : { orderBy?: PortfolioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortfolioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Portfolio model
   */
  readonly fields: PortfolioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Portfolio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortfolioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Portfolio model
   */
  interface PortfolioFieldRefs {
    readonly id: FieldRef<"Portfolio", 'String'>
    readonly userId: FieldRef<"Portfolio", 'String'>
    readonly totalValue: FieldRef<"Portfolio", 'Float'>
    readonly investedValue: FieldRef<"Portfolio", 'Float'>
    readonly currentValue: FieldRef<"Portfolio", 'Float'>
    readonly dayChange: FieldRef<"Portfolio", 'Float'>
    readonly dayChangePercent: FieldRef<"Portfolio", 'Float'>
    readonly totalPnl: FieldRef<"Portfolio", 'Float'>
    readonly totalPnlPercent: FieldRef<"Portfolio", 'Float'>
    readonly xirr: FieldRef<"Portfolio", 'Float'>
    readonly updatedAt: FieldRef<"Portfolio", 'DateTime'>
    readonly createdAt: FieldRef<"Portfolio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Portfolio findUnique
   */
  export type PortfolioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio findUniqueOrThrow
   */
  export type PortfolioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio findFirst
   */
  export type PortfolioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio findFirstOrThrow
   */
  export type PortfolioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio findMany
   */
  export type PortfolioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolios to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio create
   */
  export type PortfolioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to create a Portfolio.
     */
    data: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
  }

  /**
   * Portfolio createMany
   */
  export type PortfolioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Portfolios.
     */
    data: PortfolioCreateManyInput | PortfolioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Portfolio createManyAndReturn
   */
  export type PortfolioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * The data used to create many Portfolios.
     */
    data: PortfolioCreateManyInput | PortfolioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Portfolio update
   */
  export type PortfolioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to update a Portfolio.
     */
    data: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
    /**
     * Choose, which Portfolio to update.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio updateMany
   */
  export type PortfolioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Portfolios.
     */
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyInput>
    /**
     * Filter which Portfolios to update
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to update.
     */
    limit?: number
  }

  /**
   * Portfolio updateManyAndReturn
   */
  export type PortfolioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * The data used to update Portfolios.
     */
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyInput>
    /**
     * Filter which Portfolios to update
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Portfolio upsert
   */
  export type PortfolioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The filter to search for the Portfolio to update in case it exists.
     */
    where: PortfolioWhereUniqueInput
    /**
     * In case the Portfolio found by the `where` argument doesn't exist, create a new Portfolio with this data.
     */
    create: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
    /**
     * In case the Portfolio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
  }

  /**
   * Portfolio delete
   */
  export type PortfolioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter which Portfolio to delete.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio deleteMany
   */
  export type PortfolioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolios to delete
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to delete.
     */
    limit?: number
  }

  /**
   * Portfolio without action
   */
  export type PortfolioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
  }


  /**
   * Model Holding
   */

  export type AggregateHolding = {
    _count: HoldingCountAggregateOutputType | null
    _avg: HoldingAvgAggregateOutputType | null
    _sum: HoldingSumAggregateOutputType | null
    _min: HoldingMinAggregateOutputType | null
    _max: HoldingMaxAggregateOutputType | null
  }

  export type HoldingAvgAggregateOutputType = {
    quantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    pnl: number | null
    dayChange: number | null
    dayChangePercent: number | null
    collateralQuantity: number | null
  }

  export type HoldingSumAggregateOutputType = {
    quantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    pnl: number | null
    dayChange: number | null
    dayChangePercent: number | null
    collateralQuantity: number | null
  }

  export type HoldingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    instrumentId: string | null
    quantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    pnl: number | null
    dayChange: number | null
    dayChangePercent: number | null
    collateralQuantity: number | null
    collateralType: string | null
    product: $Enums.ProductType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HoldingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    instrumentId: string | null
    quantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    pnl: number | null
    dayChange: number | null
    dayChangePercent: number | null
    collateralQuantity: number | null
    collateralType: string | null
    product: $Enums.ProductType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HoldingCountAggregateOutputType = {
    id: number
    userId: number
    instrumentId: number
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl: number
    dayChange: number
    dayChangePercent: number
    collateralQuantity: number
    collateralType: number
    product: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HoldingAvgAggregateInputType = {
    quantity?: true
    averagePrice?: true
    lastPrice?: true
    pnl?: true
    dayChange?: true
    dayChangePercent?: true
    collateralQuantity?: true
  }

  export type HoldingSumAggregateInputType = {
    quantity?: true
    averagePrice?: true
    lastPrice?: true
    pnl?: true
    dayChange?: true
    dayChangePercent?: true
    collateralQuantity?: true
  }

  export type HoldingMinAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    quantity?: true
    averagePrice?: true
    lastPrice?: true
    pnl?: true
    dayChange?: true
    dayChangePercent?: true
    collateralQuantity?: true
    collateralType?: true
    product?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HoldingMaxAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    quantity?: true
    averagePrice?: true
    lastPrice?: true
    pnl?: true
    dayChange?: true
    dayChangePercent?: true
    collateralQuantity?: true
    collateralType?: true
    product?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HoldingCountAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    quantity?: true
    averagePrice?: true
    lastPrice?: true
    pnl?: true
    dayChange?: true
    dayChangePercent?: true
    collateralQuantity?: true
    collateralType?: true
    product?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HoldingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holding to aggregate.
     */
    where?: HoldingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holdings to fetch.
     */
    orderBy?: HoldingOrderByWithRelationInput | HoldingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HoldingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holdings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Holdings
    **/
    _count?: true | HoldingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HoldingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HoldingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HoldingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HoldingMaxAggregateInputType
  }

  export type GetHoldingAggregateType<T extends HoldingAggregateArgs> = {
        [P in keyof T & keyof AggregateHolding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHolding[P]>
      : GetScalarType<T[P], AggregateHolding[P]>
  }




  export type HoldingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HoldingWhereInput
    orderBy?: HoldingOrderByWithAggregationInput | HoldingOrderByWithAggregationInput[]
    by: HoldingScalarFieldEnum[] | HoldingScalarFieldEnum
    having?: HoldingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HoldingCountAggregateInputType | true
    _avg?: HoldingAvgAggregateInputType
    _sum?: HoldingSumAggregateInputType
    _min?: HoldingMinAggregateInputType
    _max?: HoldingMaxAggregateInputType
  }

  export type HoldingGroupByOutputType = {
    id: string
    userId: string
    instrumentId: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl: number
    dayChange: number
    dayChangePercent: number
    collateralQuantity: number
    collateralType: string | null
    product: $Enums.ProductType
    createdAt: Date
    updatedAt: Date
    _count: HoldingCountAggregateOutputType | null
    _avg: HoldingAvgAggregateOutputType | null
    _sum: HoldingSumAggregateOutputType | null
    _min: HoldingMinAggregateOutputType | null
    _max: HoldingMaxAggregateOutputType | null
  }

  type GetHoldingGroupByPayload<T extends HoldingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HoldingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HoldingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HoldingGroupByOutputType[P]>
            : GetScalarType<T[P], HoldingGroupByOutputType[P]>
        }
      >
    >


  export type HoldingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    quantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    pnl?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    collateralQuantity?: boolean
    collateralType?: boolean
    product?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holding"]>

  export type HoldingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    quantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    pnl?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    collateralQuantity?: boolean
    collateralType?: boolean
    product?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holding"]>

  export type HoldingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    quantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    pnl?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    collateralQuantity?: boolean
    collateralType?: boolean
    product?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["holding"]>

  export type HoldingSelectScalar = {
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    quantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    pnl?: boolean
    dayChange?: boolean
    dayChangePercent?: boolean
    collateralQuantity?: boolean
    collateralType?: boolean
    product?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HoldingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "instrumentId" | "quantity" | "averagePrice" | "lastPrice" | "pnl" | "dayChange" | "dayChangePercent" | "collateralQuantity" | "collateralType" | "product" | "createdAt" | "updatedAt", ExtArgs["result"]["holding"]>
  export type HoldingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type HoldingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type HoldingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }

  export type $HoldingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Holding"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      instrument: Prisma.$InstrumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      instrumentId: string
      quantity: number
      averagePrice: number
      lastPrice: number
      pnl: number
      dayChange: number
      dayChangePercent: number
      collateralQuantity: number
      collateralType: string | null
      product: $Enums.ProductType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["holding"]>
    composites: {}
  }

  type HoldingGetPayload<S extends boolean | null | undefined | HoldingDefaultArgs> = $Result.GetResult<Prisma.$HoldingPayload, S>

  type HoldingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HoldingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HoldingCountAggregateInputType | true
    }

  export interface HoldingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Holding'], meta: { name: 'Holding' } }
    /**
     * Find zero or one Holding that matches the filter.
     * @param {HoldingFindUniqueArgs} args - Arguments to find a Holding
     * @example
     * // Get one Holding
     * const holding = await prisma.holding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HoldingFindUniqueArgs>(args: SelectSubset<T, HoldingFindUniqueArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Holding that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HoldingFindUniqueOrThrowArgs} args - Arguments to find a Holding
     * @example
     * // Get one Holding
     * const holding = await prisma.holding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HoldingFindUniqueOrThrowArgs>(args: SelectSubset<T, HoldingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoldingFindFirstArgs} args - Arguments to find a Holding
     * @example
     * // Get one Holding
     * const holding = await prisma.holding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HoldingFindFirstArgs>(args?: SelectSubset<T, HoldingFindFirstArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoldingFindFirstOrThrowArgs} args - Arguments to find a Holding
     * @example
     * // Get one Holding
     * const holding = await prisma.holding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HoldingFindFirstOrThrowArgs>(args?: SelectSubset<T, HoldingFindFirstOrThrowArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Holdings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoldingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Holdings
     * const holdings = await prisma.holding.findMany()
     * 
     * // Get first 10 Holdings
     * const holdings = await prisma.holding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const holdingWithIdOnly = await prisma.holding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HoldingFindManyArgs>(args?: SelectSubset<T, HoldingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Holding.
     * @param {HoldingCreateArgs} args - Arguments to create a Holding.
     * @example
     * // Create one Holding
     * const Holding = await prisma.holding.create({
     *   data: {
     *     // ... data to create a Holding
     *   }
     * })
     * 
     */
    create<T extends HoldingCreateArgs>(args: SelectSubset<T, HoldingCreateArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Holdings.
     * @param {HoldingCreateManyArgs} args - Arguments to create many Holdings.
     * @example
     * // Create many Holdings
     * const holding = await prisma.holding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HoldingCreateManyArgs>(args?: SelectSubset<T, HoldingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Holdings and returns the data saved in the database.
     * @param {HoldingCreateManyAndReturnArgs} args - Arguments to create many Holdings.
     * @example
     * // Create many Holdings
     * const holding = await prisma.holding.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Holdings and only return the `id`
     * const holdingWithIdOnly = await prisma.holding.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HoldingCreateManyAndReturnArgs>(args?: SelectSubset<T, HoldingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Holding.
     * @param {HoldingDeleteArgs} args - Arguments to delete one Holding.
     * @example
     * // Delete one Holding
     * const Holding = await prisma.holding.delete({
     *   where: {
     *     // ... filter to delete one Holding
     *   }
     * })
     * 
     */
    delete<T extends HoldingDeleteArgs>(args: SelectSubset<T, HoldingDeleteArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Holding.
     * @param {HoldingUpdateArgs} args - Arguments to update one Holding.
     * @example
     * // Update one Holding
     * const holding = await prisma.holding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HoldingUpdateArgs>(args: SelectSubset<T, HoldingUpdateArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Holdings.
     * @param {HoldingDeleteManyArgs} args - Arguments to filter Holdings to delete.
     * @example
     * // Delete a few Holdings
     * const { count } = await prisma.holding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HoldingDeleteManyArgs>(args?: SelectSubset<T, HoldingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holdings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoldingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Holdings
     * const holding = await prisma.holding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HoldingUpdateManyArgs>(args: SelectSubset<T, HoldingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holdings and returns the data updated in the database.
     * @param {HoldingUpdateManyAndReturnArgs} args - Arguments to update many Holdings.
     * @example
     * // Update many Holdings
     * const holding = await prisma.holding.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Holdings and only return the `id`
     * const holdingWithIdOnly = await prisma.holding.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HoldingUpdateManyAndReturnArgs>(args: SelectSubset<T, HoldingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Holding.
     * @param {HoldingUpsertArgs} args - Arguments to update or create a Holding.
     * @example
     * // Update or create a Holding
     * const holding = await prisma.holding.upsert({
     *   create: {
     *     // ... data to create a Holding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Holding we want to update
     *   }
     * })
     */
    upsert<T extends HoldingUpsertArgs>(args: SelectSubset<T, HoldingUpsertArgs<ExtArgs>>): Prisma__HoldingClient<$Result.GetResult<Prisma.$HoldingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Holdings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoldingCountArgs} args - Arguments to filter Holdings to count.
     * @example
     * // Count the number of Holdings
     * const count = await prisma.holding.count({
     *   where: {
     *     // ... the filter for the Holdings we want to count
     *   }
     * })
    **/
    count<T extends HoldingCountArgs>(
      args?: Subset<T, HoldingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HoldingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Holding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoldingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HoldingAggregateArgs>(args: Subset<T, HoldingAggregateArgs>): Prisma.PrismaPromise<GetHoldingAggregateType<T>>

    /**
     * Group by Holding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HoldingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HoldingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HoldingGroupByArgs['orderBy'] }
        : { orderBy?: HoldingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HoldingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHoldingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Holding model
   */
  readonly fields: HoldingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Holding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HoldingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instrument<T extends InstrumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentDefaultArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Holding model
   */
  interface HoldingFieldRefs {
    readonly id: FieldRef<"Holding", 'String'>
    readonly userId: FieldRef<"Holding", 'String'>
    readonly instrumentId: FieldRef<"Holding", 'String'>
    readonly quantity: FieldRef<"Holding", 'Int'>
    readonly averagePrice: FieldRef<"Holding", 'Float'>
    readonly lastPrice: FieldRef<"Holding", 'Float'>
    readonly pnl: FieldRef<"Holding", 'Float'>
    readonly dayChange: FieldRef<"Holding", 'Float'>
    readonly dayChangePercent: FieldRef<"Holding", 'Float'>
    readonly collateralQuantity: FieldRef<"Holding", 'Int'>
    readonly collateralType: FieldRef<"Holding", 'String'>
    readonly product: FieldRef<"Holding", 'ProductType'>
    readonly createdAt: FieldRef<"Holding", 'DateTime'>
    readonly updatedAt: FieldRef<"Holding", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Holding findUnique
   */
  export type HoldingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * Filter, which Holding to fetch.
     */
    where: HoldingWhereUniqueInput
  }

  /**
   * Holding findUniqueOrThrow
   */
  export type HoldingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * Filter, which Holding to fetch.
     */
    where: HoldingWhereUniqueInput
  }

  /**
   * Holding findFirst
   */
  export type HoldingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * Filter, which Holding to fetch.
     */
    where?: HoldingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holdings to fetch.
     */
    orderBy?: HoldingOrderByWithRelationInput | HoldingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holdings.
     */
    cursor?: HoldingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holdings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holdings.
     */
    distinct?: HoldingScalarFieldEnum | HoldingScalarFieldEnum[]
  }

  /**
   * Holding findFirstOrThrow
   */
  export type HoldingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * Filter, which Holding to fetch.
     */
    where?: HoldingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holdings to fetch.
     */
    orderBy?: HoldingOrderByWithRelationInput | HoldingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holdings.
     */
    cursor?: HoldingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holdings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holdings.
     */
    distinct?: HoldingScalarFieldEnum | HoldingScalarFieldEnum[]
  }

  /**
   * Holding findMany
   */
  export type HoldingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * Filter, which Holdings to fetch.
     */
    where?: HoldingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holdings to fetch.
     */
    orderBy?: HoldingOrderByWithRelationInput | HoldingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Holdings.
     */
    cursor?: HoldingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holdings.
     */
    skip?: number
    distinct?: HoldingScalarFieldEnum | HoldingScalarFieldEnum[]
  }

  /**
   * Holding create
   */
  export type HoldingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * The data needed to create a Holding.
     */
    data: XOR<HoldingCreateInput, HoldingUncheckedCreateInput>
  }

  /**
   * Holding createMany
   */
  export type HoldingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Holdings.
     */
    data: HoldingCreateManyInput | HoldingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Holding createManyAndReturn
   */
  export type HoldingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * The data used to create many Holdings.
     */
    data: HoldingCreateManyInput | HoldingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Holding update
   */
  export type HoldingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * The data needed to update a Holding.
     */
    data: XOR<HoldingUpdateInput, HoldingUncheckedUpdateInput>
    /**
     * Choose, which Holding to update.
     */
    where: HoldingWhereUniqueInput
  }

  /**
   * Holding updateMany
   */
  export type HoldingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Holdings.
     */
    data: XOR<HoldingUpdateManyMutationInput, HoldingUncheckedUpdateManyInput>
    /**
     * Filter which Holdings to update
     */
    where?: HoldingWhereInput
    /**
     * Limit how many Holdings to update.
     */
    limit?: number
  }

  /**
   * Holding updateManyAndReturn
   */
  export type HoldingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * The data used to update Holdings.
     */
    data: XOR<HoldingUpdateManyMutationInput, HoldingUncheckedUpdateManyInput>
    /**
     * Filter which Holdings to update
     */
    where?: HoldingWhereInput
    /**
     * Limit how many Holdings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Holding upsert
   */
  export type HoldingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * The filter to search for the Holding to update in case it exists.
     */
    where: HoldingWhereUniqueInput
    /**
     * In case the Holding found by the `where` argument doesn't exist, create a new Holding with this data.
     */
    create: XOR<HoldingCreateInput, HoldingUncheckedCreateInput>
    /**
     * In case the Holding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HoldingUpdateInput, HoldingUncheckedUpdateInput>
  }

  /**
   * Holding delete
   */
  export type HoldingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
    /**
     * Filter which Holding to delete.
     */
    where: HoldingWhereUniqueInput
  }

  /**
   * Holding deleteMany
   */
  export type HoldingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holdings to delete
     */
    where?: HoldingWhereInput
    /**
     * Limit how many Holdings to delete.
     */
    limit?: number
  }

  /**
   * Holding without action
   */
  export type HoldingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holding
     */
    select?: HoldingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holding
     */
    omit?: HoldingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HoldingInclude<ExtArgs> | null
  }


  /**
   * Model Position
   */

  export type AggregatePosition = {
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  export type PositionAvgAggregateOutputType = {
    quantity: number | null
    overnightQuantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    value: number | null
    pnl: number | null
    m2m: number | null
    unrealised: number | null
    realised: number | null
    buyQuantity: number | null
    buyValue: number | null
    buyPrice: number | null
    sellQuantity: number | null
    sellValue: number | null
    sellPrice: number | null
    multiplier: number | null
  }

  export type PositionSumAggregateOutputType = {
    quantity: number | null
    overnightQuantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    value: number | null
    pnl: number | null
    m2m: number | null
    unrealised: number | null
    realised: number | null
    buyQuantity: number | null
    buyValue: number | null
    buyPrice: number | null
    sellQuantity: number | null
    sellValue: number | null
    sellPrice: number | null
    multiplier: number | null
  }

  export type PositionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    instrumentId: string | null
    product: $Enums.ProductType | null
    quantity: number | null
    overnightQuantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    value: number | null
    pnl: number | null
    m2m: number | null
    unrealised: number | null
    realised: number | null
    buyQuantity: number | null
    buyValue: number | null
    buyPrice: number | null
    sellQuantity: number | null
    sellValue: number | null
    sellPrice: number | null
    multiplier: number | null
    tradingSymbol: string | null
    exchange: $Enums.Exchange | null
    positionType: $Enums.PositionType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PositionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    instrumentId: string | null
    product: $Enums.ProductType | null
    quantity: number | null
    overnightQuantity: number | null
    averagePrice: number | null
    lastPrice: number | null
    value: number | null
    pnl: number | null
    m2m: number | null
    unrealised: number | null
    realised: number | null
    buyQuantity: number | null
    buyValue: number | null
    buyPrice: number | null
    sellQuantity: number | null
    sellValue: number | null
    sellPrice: number | null
    multiplier: number | null
    tradingSymbol: string | null
    exchange: $Enums.Exchange | null
    positionType: $Enums.PositionType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PositionCountAggregateOutputType = {
    id: number
    userId: number
    instrumentId: number
    product: number
    quantity: number
    overnightQuantity: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl: number
    m2m: number
    unrealised: number
    realised: number
    buyQuantity: number
    buyValue: number
    buyPrice: number
    sellQuantity: number
    sellValue: number
    sellPrice: number
    multiplier: number
    tradingSymbol: number
    exchange: number
    positionType: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PositionAvgAggregateInputType = {
    quantity?: true
    overnightQuantity?: true
    averagePrice?: true
    lastPrice?: true
    value?: true
    pnl?: true
    m2m?: true
    unrealised?: true
    realised?: true
    buyQuantity?: true
    buyValue?: true
    buyPrice?: true
    sellQuantity?: true
    sellValue?: true
    sellPrice?: true
    multiplier?: true
  }

  export type PositionSumAggregateInputType = {
    quantity?: true
    overnightQuantity?: true
    averagePrice?: true
    lastPrice?: true
    value?: true
    pnl?: true
    m2m?: true
    unrealised?: true
    realised?: true
    buyQuantity?: true
    buyValue?: true
    buyPrice?: true
    sellQuantity?: true
    sellValue?: true
    sellPrice?: true
    multiplier?: true
  }

  export type PositionMinAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    product?: true
    quantity?: true
    overnightQuantity?: true
    averagePrice?: true
    lastPrice?: true
    value?: true
    pnl?: true
    m2m?: true
    unrealised?: true
    realised?: true
    buyQuantity?: true
    buyValue?: true
    buyPrice?: true
    sellQuantity?: true
    sellValue?: true
    sellPrice?: true
    multiplier?: true
    tradingSymbol?: true
    exchange?: true
    positionType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PositionMaxAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    product?: true
    quantity?: true
    overnightQuantity?: true
    averagePrice?: true
    lastPrice?: true
    value?: true
    pnl?: true
    m2m?: true
    unrealised?: true
    realised?: true
    buyQuantity?: true
    buyValue?: true
    buyPrice?: true
    sellQuantity?: true
    sellValue?: true
    sellPrice?: true
    multiplier?: true
    tradingSymbol?: true
    exchange?: true
    positionType?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PositionCountAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    product?: true
    quantity?: true
    overnightQuantity?: true
    averagePrice?: true
    lastPrice?: true
    value?: true
    pnl?: true
    m2m?: true
    unrealised?: true
    realised?: true
    buyQuantity?: true
    buyValue?: true
    buyPrice?: true
    sellQuantity?: true
    sellValue?: true
    sellPrice?: true
    multiplier?: true
    tradingSymbol?: true
    exchange?: true
    positionType?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Position to aggregate.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Positions
    **/
    _count?: true | PositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PositionMaxAggregateInputType
  }

  export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
        [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosition[P]>
      : GetScalarType<T[P], AggregatePosition[P]>
  }




  export type PositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithAggregationInput | PositionOrderByWithAggregationInput[]
    by: PositionScalarFieldEnum[] | PositionScalarFieldEnum
    having?: PositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PositionCountAggregateInputType | true
    _avg?: PositionAvgAggregateInputType
    _sum?: PositionSumAggregateInputType
    _min?: PositionMinAggregateInputType
    _max?: PositionMaxAggregateInputType
  }

  export type PositionGroupByOutputType = {
    id: string
    userId: string
    instrumentId: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl: number
    m2m: number
    unrealised: number
    realised: number
    buyQuantity: number
    buyValue: number
    buyPrice: number
    sellQuantity: number
    sellValue: number
    sellPrice: number
    multiplier: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt: Date
    updatedAt: Date
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PositionGroupByOutputType[P]>
            : GetScalarType<T[P], PositionGroupByOutputType[P]>
        }
      >
    >


  export type PositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    product?: boolean
    quantity?: boolean
    overnightQuantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    value?: boolean
    pnl?: boolean
    m2m?: boolean
    unrealised?: boolean
    realised?: boolean
    buyQuantity?: boolean
    buyValue?: boolean
    buyPrice?: boolean
    sellQuantity?: boolean
    sellValue?: boolean
    sellPrice?: boolean
    multiplier?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    positionType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    product?: boolean
    quantity?: boolean
    overnightQuantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    value?: boolean
    pnl?: boolean
    m2m?: boolean
    unrealised?: boolean
    realised?: boolean
    buyQuantity?: boolean
    buyValue?: boolean
    buyPrice?: boolean
    sellQuantity?: boolean
    sellValue?: boolean
    sellPrice?: boolean
    multiplier?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    positionType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    product?: boolean
    quantity?: boolean
    overnightQuantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    value?: boolean
    pnl?: boolean
    m2m?: boolean
    unrealised?: boolean
    realised?: boolean
    buyQuantity?: boolean
    buyValue?: boolean
    buyPrice?: boolean
    sellQuantity?: boolean
    sellValue?: boolean
    sellPrice?: boolean
    multiplier?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    positionType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectScalar = {
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    product?: boolean
    quantity?: boolean
    overnightQuantity?: boolean
    averagePrice?: boolean
    lastPrice?: boolean
    value?: boolean
    pnl?: boolean
    m2m?: boolean
    unrealised?: boolean
    realised?: boolean
    buyQuantity?: boolean
    buyValue?: boolean
    buyPrice?: boolean
    sellQuantity?: boolean
    sellValue?: boolean
    sellPrice?: boolean
    multiplier?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    positionType?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PositionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "instrumentId" | "product" | "quantity" | "overnightQuantity" | "averagePrice" | "lastPrice" | "value" | "pnl" | "m2m" | "unrealised" | "realised" | "buyQuantity" | "buyValue" | "buyPrice" | "sellQuantity" | "sellValue" | "sellPrice" | "multiplier" | "tradingSymbol" | "exchange" | "positionType" | "createdAt" | "updatedAt", ExtArgs["result"]["position"]>
  export type PositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type PositionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type PositionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }

  export type $PositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Position"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      instrument: Prisma.$InstrumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      instrumentId: string
      product: $Enums.ProductType
      quantity: number
      overnightQuantity: number
      averagePrice: number
      lastPrice: number
      value: number
      pnl: number
      m2m: number
      unrealised: number
      realised: number
      buyQuantity: number
      buyValue: number
      buyPrice: number
      sellQuantity: number
      sellValue: number
      sellPrice: number
      multiplier: number
      tradingSymbol: string
      exchange: $Enums.Exchange
      positionType: $Enums.PositionType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["position"]>
    composites: {}
  }

  type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = $Result.GetResult<Prisma.$PositionPayload, S>

  type PositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PositionCountAggregateInputType | true
    }

  export interface PositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
    /**
     * Find zero or one Position that matches the filter.
     * @param {PositionFindUniqueArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PositionFindUniqueArgs>(args: SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Position that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs>(args: SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PositionFindFirstArgs>(args?: SelectSubset<T, PositionFindFirstArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Position that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PositionFindFirstOrThrowArgs>(args?: SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Positions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Positions
     * const positions = await prisma.position.findMany()
     * 
     * // Get first 10 Positions
     * const positions = await prisma.position.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const positionWithIdOnly = await prisma.position.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PositionFindManyArgs>(args?: SelectSubset<T, PositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Position.
     * @param {PositionCreateArgs} args - Arguments to create a Position.
     * @example
     * // Create one Position
     * const Position = await prisma.position.create({
     *   data: {
     *     // ... data to create a Position
     *   }
     * })
     * 
     */
    create<T extends PositionCreateArgs>(args: SelectSubset<T, PositionCreateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Positions.
     * @param {PositionCreateManyArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PositionCreateManyArgs>(args?: SelectSubset<T, PositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Positions and returns the data saved in the database.
     * @param {PositionCreateManyAndReturnArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Positions and only return the `id`
     * const positionWithIdOnly = await prisma.position.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PositionCreateManyAndReturnArgs>(args?: SelectSubset<T, PositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Position.
     * @param {PositionDeleteArgs} args - Arguments to delete one Position.
     * @example
     * // Delete one Position
     * const Position = await prisma.position.delete({
     *   where: {
     *     // ... filter to delete one Position
     *   }
     * })
     * 
     */
    delete<T extends PositionDeleteArgs>(args: SelectSubset<T, PositionDeleteArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Position.
     * @param {PositionUpdateArgs} args - Arguments to update one Position.
     * @example
     * // Update one Position
     * const position = await prisma.position.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PositionUpdateArgs>(args: SelectSubset<T, PositionUpdateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Positions.
     * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
     * @example
     * // Delete a few Positions
     * const { count } = await prisma.position.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PositionDeleteManyArgs>(args?: SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PositionUpdateManyArgs>(args: SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions and returns the data updated in the database.
     * @param {PositionUpdateManyAndReturnArgs} args - Arguments to update many Positions.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Positions and only return the `id`
     * const positionWithIdOnly = await prisma.position.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PositionUpdateManyAndReturnArgs>(args: SelectSubset<T, PositionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Position.
     * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
     * @example
     * // Update or create a Position
     * const position = await prisma.position.upsert({
     *   create: {
     *     // ... data to create a Position
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Position we want to update
     *   }
     * })
     */
    upsert<T extends PositionUpsertArgs>(args: SelectSubset<T, PositionUpsertArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionCountArgs} args - Arguments to filter Positions to count.
     * @example
     * // Count the number of Positions
     * const count = await prisma.position.count({
     *   where: {
     *     // ... the filter for the Positions we want to count
     *   }
     * })
    **/
    count<T extends PositionCountArgs>(
      args?: Subset<T, PositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PositionAggregateArgs>(args: Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

    /**
     * Group by Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PositionGroupByArgs['orderBy'] }
        : { orderBy?: PositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Position model
   */
  readonly fields: PositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Position.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instrument<T extends InstrumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentDefaultArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Position model
   */
  interface PositionFieldRefs {
    readonly id: FieldRef<"Position", 'String'>
    readonly userId: FieldRef<"Position", 'String'>
    readonly instrumentId: FieldRef<"Position", 'String'>
    readonly product: FieldRef<"Position", 'ProductType'>
    readonly quantity: FieldRef<"Position", 'Int'>
    readonly overnightQuantity: FieldRef<"Position", 'Int'>
    readonly averagePrice: FieldRef<"Position", 'Float'>
    readonly lastPrice: FieldRef<"Position", 'Float'>
    readonly value: FieldRef<"Position", 'Float'>
    readonly pnl: FieldRef<"Position", 'Float'>
    readonly m2m: FieldRef<"Position", 'Float'>
    readonly unrealised: FieldRef<"Position", 'Float'>
    readonly realised: FieldRef<"Position", 'Float'>
    readonly buyQuantity: FieldRef<"Position", 'Int'>
    readonly buyValue: FieldRef<"Position", 'Float'>
    readonly buyPrice: FieldRef<"Position", 'Float'>
    readonly sellQuantity: FieldRef<"Position", 'Int'>
    readonly sellValue: FieldRef<"Position", 'Float'>
    readonly sellPrice: FieldRef<"Position", 'Float'>
    readonly multiplier: FieldRef<"Position", 'Float'>
    readonly tradingSymbol: FieldRef<"Position", 'String'>
    readonly exchange: FieldRef<"Position", 'Exchange'>
    readonly positionType: FieldRef<"Position", 'PositionType'>
    readonly createdAt: FieldRef<"Position", 'DateTime'>
    readonly updatedAt: FieldRef<"Position", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Position findUnique
   */
  export type PositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findUniqueOrThrow
   */
  export type PositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findFirst
   */
  export type PositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findFirstOrThrow
   */
  export type PositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findMany
   */
  export type PositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Positions to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position create
   */
  export type PositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Position.
     */
    data: XOR<PositionCreateInput, PositionUncheckedCreateInput>
  }

  /**
   * Position createMany
   */
  export type PositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Position createManyAndReturn
   */
  export type PositionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Position update
   */
  export type PositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Position.
     */
    data: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
    /**
     * Choose, which Position to update.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position updateMany
   */
  export type PositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to update.
     */
    limit?: number
  }

  /**
   * Position updateManyAndReturn
   */
  export type PositionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Position upsert
   */
  export type PositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Position to update in case it exists.
     */
    where: PositionWhereUniqueInput
    /**
     * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
     */
    create: XOR<PositionCreateInput, PositionUncheckedCreateInput>
    /**
     * In case the Position was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
  }

  /**
   * Position delete
   */
  export type PositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter which Position to delete.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position deleteMany
   */
  export type PositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Positions to delete
     */
    where?: PositionWhereInput
    /**
     * Limit how many Positions to delete.
     */
    limit?: number
  }

  /**
   * Position without action
   */
  export type PositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Position
     */
    omit?: PositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    quantity: number | null
    disclosedQuantity: number | null
    price: number | null
    triggerPrice: number | null
    averagePrice: number | null
    filledQuantity: number | null
    pendingQuantity: number | null
    cancelledQuantity: number | null
  }

  export type OrderSumAggregateOutputType = {
    quantity: number | null
    disclosedQuantity: number | null
    price: number | null
    triggerPrice: number | null
    averagePrice: number | null
    filledQuantity: number | null
    pendingQuantity: number | null
    cancelledQuantity: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    orderId: string | null
    userId: string | null
    instrumentId: string | null
    parentOrderId: string | null
    exchangeOrderId: string | null
    exchangeTimestamp: Date | null
    placedBy: string | null
    variety: $Enums.OrderVariety | null
    orderType: $Enums.OrderType | null
    transactionType: $Enums.TransactionType | null
    validity: $Enums.OrderValidity | null
    product: $Enums.ProductType | null
    exchange: $Enums.Exchange | null
    tradingSymbol: string | null
    quantity: number | null
    disclosedQuantity: number | null
    price: number | null
    triggerPrice: number | null
    averagePrice: number | null
    filledQuantity: number | null
    pendingQuantity: number | null
    cancelledQuantity: number | null
    status: $Enums.OrderStatus | null
    statusMessage: string | null
    tag: string | null
    clientOrderId: string | null
    orderTimestamp: Date | null
    exchangeUpdateTime: Date | null
    rejectedBy: string | null
    cancelledBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    orderId: string | null
    userId: string | null
    instrumentId: string | null
    parentOrderId: string | null
    exchangeOrderId: string | null
    exchangeTimestamp: Date | null
    placedBy: string | null
    variety: $Enums.OrderVariety | null
    orderType: $Enums.OrderType | null
    transactionType: $Enums.TransactionType | null
    validity: $Enums.OrderValidity | null
    product: $Enums.ProductType | null
    exchange: $Enums.Exchange | null
    tradingSymbol: string | null
    quantity: number | null
    disclosedQuantity: number | null
    price: number | null
    triggerPrice: number | null
    averagePrice: number | null
    filledQuantity: number | null
    pendingQuantity: number | null
    cancelledQuantity: number | null
    status: $Enums.OrderStatus | null
    statusMessage: string | null
    tag: string | null
    clientOrderId: string | null
    orderTimestamp: Date | null
    exchangeUpdateTime: Date | null
    rejectedBy: string | null
    cancelledBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    orderId: number
    userId: number
    instrumentId: number
    parentOrderId: number
    exchangeOrderId: number
    exchangeTimestamp: number
    placedBy: number
    variety: number
    orderType: number
    transactionType: number
    validity: number
    product: number
    exchange: number
    tradingSymbol: number
    quantity: number
    disclosedQuantity: number
    price: number
    triggerPrice: number
    averagePrice: number
    filledQuantity: number
    pendingQuantity: number
    cancelledQuantity: number
    status: number
    statusMessage: number
    tag: number
    clientOrderId: number
    orderTimestamp: number
    exchangeUpdateTime: number
    rejectedBy: number
    cancelledBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    quantity?: true
    disclosedQuantity?: true
    price?: true
    triggerPrice?: true
    averagePrice?: true
    filledQuantity?: true
    pendingQuantity?: true
    cancelledQuantity?: true
  }

  export type OrderSumAggregateInputType = {
    quantity?: true
    disclosedQuantity?: true
    price?: true
    triggerPrice?: true
    averagePrice?: true
    filledQuantity?: true
    pendingQuantity?: true
    cancelledQuantity?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    orderId?: true
    userId?: true
    instrumentId?: true
    parentOrderId?: true
    exchangeOrderId?: true
    exchangeTimestamp?: true
    placedBy?: true
    variety?: true
    orderType?: true
    transactionType?: true
    validity?: true
    product?: true
    exchange?: true
    tradingSymbol?: true
    quantity?: true
    disclosedQuantity?: true
    price?: true
    triggerPrice?: true
    averagePrice?: true
    filledQuantity?: true
    pendingQuantity?: true
    cancelledQuantity?: true
    status?: true
    statusMessage?: true
    tag?: true
    clientOrderId?: true
    orderTimestamp?: true
    exchangeUpdateTime?: true
    rejectedBy?: true
    cancelledBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    orderId?: true
    userId?: true
    instrumentId?: true
    parentOrderId?: true
    exchangeOrderId?: true
    exchangeTimestamp?: true
    placedBy?: true
    variety?: true
    orderType?: true
    transactionType?: true
    validity?: true
    product?: true
    exchange?: true
    tradingSymbol?: true
    quantity?: true
    disclosedQuantity?: true
    price?: true
    triggerPrice?: true
    averagePrice?: true
    filledQuantity?: true
    pendingQuantity?: true
    cancelledQuantity?: true
    status?: true
    statusMessage?: true
    tag?: true
    clientOrderId?: true
    orderTimestamp?: true
    exchangeUpdateTime?: true
    rejectedBy?: true
    cancelledBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    orderId?: true
    userId?: true
    instrumentId?: true
    parentOrderId?: true
    exchangeOrderId?: true
    exchangeTimestamp?: true
    placedBy?: true
    variety?: true
    orderType?: true
    transactionType?: true
    validity?: true
    product?: true
    exchange?: true
    tradingSymbol?: true
    quantity?: true
    disclosedQuantity?: true
    price?: true
    triggerPrice?: true
    averagePrice?: true
    filledQuantity?: true
    pendingQuantity?: true
    cancelledQuantity?: true
    status?: true
    statusMessage?: true
    tag?: true
    clientOrderId?: true
    orderTimestamp?: true
    exchangeUpdateTime?: true
    rejectedBy?: true
    cancelledBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    orderId: string
    userId: string
    instrumentId: string
    parentOrderId: string | null
    exchangeOrderId: string | null
    exchangeTimestamp: Date | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity: number
    price: number
    triggerPrice: number
    averagePrice: number
    filledQuantity: number
    pendingQuantity: number
    cancelledQuantity: number
    status: $Enums.OrderStatus
    statusMessage: string | null
    tag: string | null
    clientOrderId: string | null
    orderTimestamp: Date
    exchangeUpdateTime: Date | null
    rejectedBy: string | null
    cancelledBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    parentOrderId?: boolean
    exchangeOrderId?: boolean
    exchangeTimestamp?: boolean
    placedBy?: boolean
    variety?: boolean
    orderType?: boolean
    transactionType?: boolean
    validity?: boolean
    product?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    quantity?: boolean
    disclosedQuantity?: boolean
    price?: boolean
    triggerPrice?: boolean
    averagePrice?: boolean
    filledQuantity?: boolean
    pendingQuantity?: boolean
    cancelledQuantity?: boolean
    status?: boolean
    statusMessage?: boolean
    tag?: boolean
    clientOrderId?: boolean
    orderTimestamp?: boolean
    exchangeUpdateTime?: boolean
    rejectedBy?: boolean
    cancelledBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
    trades?: boolean | Order$tradesArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    parentOrderId?: boolean
    exchangeOrderId?: boolean
    exchangeTimestamp?: boolean
    placedBy?: boolean
    variety?: boolean
    orderType?: boolean
    transactionType?: boolean
    validity?: boolean
    product?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    quantity?: boolean
    disclosedQuantity?: boolean
    price?: boolean
    triggerPrice?: boolean
    averagePrice?: boolean
    filledQuantity?: boolean
    pendingQuantity?: boolean
    cancelledQuantity?: boolean
    status?: boolean
    statusMessage?: boolean
    tag?: boolean
    clientOrderId?: boolean
    orderTimestamp?: boolean
    exchangeUpdateTime?: boolean
    rejectedBy?: boolean
    cancelledBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    parentOrderId?: boolean
    exchangeOrderId?: boolean
    exchangeTimestamp?: boolean
    placedBy?: boolean
    variety?: boolean
    orderType?: boolean
    transactionType?: boolean
    validity?: boolean
    product?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    quantity?: boolean
    disclosedQuantity?: boolean
    price?: boolean
    triggerPrice?: boolean
    averagePrice?: boolean
    filledQuantity?: boolean
    pendingQuantity?: boolean
    cancelledQuantity?: boolean
    status?: boolean
    statusMessage?: boolean
    tag?: boolean
    clientOrderId?: boolean
    orderTimestamp?: boolean
    exchangeUpdateTime?: boolean
    rejectedBy?: boolean
    cancelledBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    parentOrderId?: boolean
    exchangeOrderId?: boolean
    exchangeTimestamp?: boolean
    placedBy?: boolean
    variety?: boolean
    orderType?: boolean
    transactionType?: boolean
    validity?: boolean
    product?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    quantity?: boolean
    disclosedQuantity?: boolean
    price?: boolean
    triggerPrice?: boolean
    averagePrice?: boolean
    filledQuantity?: boolean
    pendingQuantity?: boolean
    cancelledQuantity?: boolean
    status?: boolean
    statusMessage?: boolean
    tag?: boolean
    clientOrderId?: boolean
    orderTimestamp?: boolean
    exchangeUpdateTime?: boolean
    rejectedBy?: boolean
    cancelledBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderId" | "userId" | "instrumentId" | "parentOrderId" | "exchangeOrderId" | "exchangeTimestamp" | "placedBy" | "variety" | "orderType" | "transactionType" | "validity" | "product" | "exchange" | "tradingSymbol" | "quantity" | "disclosedQuantity" | "price" | "triggerPrice" | "averagePrice" | "filledQuantity" | "pendingQuantity" | "cancelledQuantity" | "status" | "statusMessage" | "tag" | "clientOrderId" | "orderTimestamp" | "exchangeUpdateTime" | "rejectedBy" | "cancelledBy" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
    trades?: boolean | Order$tradesArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      instrument: Prisma.$InstrumentPayload<ExtArgs>
      trades: Prisma.$TradePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderId: string
      userId: string
      instrumentId: string
      parentOrderId: string | null
      exchangeOrderId: string | null
      exchangeTimestamp: Date | null
      placedBy: string
      variety: $Enums.OrderVariety
      orderType: $Enums.OrderType
      transactionType: $Enums.TransactionType
      validity: $Enums.OrderValidity
      product: $Enums.ProductType
      exchange: $Enums.Exchange
      tradingSymbol: string
      quantity: number
      disclosedQuantity: number
      price: number
      triggerPrice: number
      averagePrice: number
      filledQuantity: number
      pendingQuantity: number
      cancelledQuantity: number
      status: $Enums.OrderStatus
      statusMessage: string | null
      tag: string | null
      clientOrderId: string | null
      orderTimestamp: Date
      exchangeUpdateTime: Date | null
      rejectedBy: string | null
      cancelledBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instrument<T extends InstrumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentDefaultArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    trades<T extends Order$tradesArgs<ExtArgs> = {}>(args?: Subset<T, Order$tradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'String'>
    readonly orderId: FieldRef<"Order", 'String'>
    readonly userId: FieldRef<"Order", 'String'>
    readonly instrumentId: FieldRef<"Order", 'String'>
    readonly parentOrderId: FieldRef<"Order", 'String'>
    readonly exchangeOrderId: FieldRef<"Order", 'String'>
    readonly exchangeTimestamp: FieldRef<"Order", 'DateTime'>
    readonly placedBy: FieldRef<"Order", 'String'>
    readonly variety: FieldRef<"Order", 'OrderVariety'>
    readonly orderType: FieldRef<"Order", 'OrderType'>
    readonly transactionType: FieldRef<"Order", 'TransactionType'>
    readonly validity: FieldRef<"Order", 'OrderValidity'>
    readonly product: FieldRef<"Order", 'ProductType'>
    readonly exchange: FieldRef<"Order", 'Exchange'>
    readonly tradingSymbol: FieldRef<"Order", 'String'>
    readonly quantity: FieldRef<"Order", 'Int'>
    readonly disclosedQuantity: FieldRef<"Order", 'Int'>
    readonly price: FieldRef<"Order", 'Float'>
    readonly triggerPrice: FieldRef<"Order", 'Float'>
    readonly averagePrice: FieldRef<"Order", 'Float'>
    readonly filledQuantity: FieldRef<"Order", 'Int'>
    readonly pendingQuantity: FieldRef<"Order", 'Int'>
    readonly cancelledQuantity: FieldRef<"Order", 'Int'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly statusMessage: FieldRef<"Order", 'String'>
    readonly tag: FieldRef<"Order", 'String'>
    readonly clientOrderId: FieldRef<"Order", 'String'>
    readonly orderTimestamp: FieldRef<"Order", 'DateTime'>
    readonly exchangeUpdateTime: FieldRef<"Order", 'DateTime'>
    readonly rejectedBy: FieldRef<"Order", 'String'>
    readonly cancelledBy: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order.trades
   */
  export type Order$tradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    where?: TradeWhereInput
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    cursor?: TradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model Trade
   */

  export type AggregateTrade = {
    _count: TradeCountAggregateOutputType | null
    _avg: TradeAvgAggregateOutputType | null
    _sum: TradeSumAggregateOutputType | null
    _min: TradeMinAggregateOutputType | null
    _max: TradeMaxAggregateOutputType | null
  }

  export type TradeAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
    value: number | null
  }

  export type TradeSumAggregateOutputType = {
    quantity: number | null
    price: number | null
    value: number | null
  }

  export type TradeMinAggregateOutputType = {
    id: string | null
    tradeId: string | null
    orderId: string | null
    userId: string | null
    instrumentId: string | null
    exchange: $Enums.Exchange | null
    tradingSymbol: string | null
    transactionType: $Enums.TransactionType | null
    product: $Enums.ProductType | null
    quantity: number | null
    price: number | null
    value: number | null
    exchangeTimestamp: Date | null
    createdAt: Date | null
  }

  export type TradeMaxAggregateOutputType = {
    id: string | null
    tradeId: string | null
    orderId: string | null
    userId: string | null
    instrumentId: string | null
    exchange: $Enums.Exchange | null
    tradingSymbol: string | null
    transactionType: $Enums.TransactionType | null
    product: $Enums.ProductType | null
    quantity: number | null
    price: number | null
    value: number | null
    exchangeTimestamp: Date | null
    createdAt: Date | null
  }

  export type TradeCountAggregateOutputType = {
    id: number
    tradeId: number
    orderId: number
    userId: number
    instrumentId: number
    exchange: number
    tradingSymbol: number
    transactionType: number
    product: number
    quantity: number
    price: number
    value: number
    exchangeTimestamp: number
    createdAt: number
    _all: number
  }


  export type TradeAvgAggregateInputType = {
    quantity?: true
    price?: true
    value?: true
  }

  export type TradeSumAggregateInputType = {
    quantity?: true
    price?: true
    value?: true
  }

  export type TradeMinAggregateInputType = {
    id?: true
    tradeId?: true
    orderId?: true
    userId?: true
    instrumentId?: true
    exchange?: true
    tradingSymbol?: true
    transactionType?: true
    product?: true
    quantity?: true
    price?: true
    value?: true
    exchangeTimestamp?: true
    createdAt?: true
  }

  export type TradeMaxAggregateInputType = {
    id?: true
    tradeId?: true
    orderId?: true
    userId?: true
    instrumentId?: true
    exchange?: true
    tradingSymbol?: true
    transactionType?: true
    product?: true
    quantity?: true
    price?: true
    value?: true
    exchangeTimestamp?: true
    createdAt?: true
  }

  export type TradeCountAggregateInputType = {
    id?: true
    tradeId?: true
    orderId?: true
    userId?: true
    instrumentId?: true
    exchange?: true
    tradingSymbol?: true
    transactionType?: true
    product?: true
    quantity?: true
    price?: true
    value?: true
    exchangeTimestamp?: true
    createdAt?: true
    _all?: true
  }

  export type TradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trade to aggregate.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trades
    **/
    _count?: true | TradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradeMaxAggregateInputType
  }

  export type GetTradeAggregateType<T extends TradeAggregateArgs> = {
        [P in keyof T & keyof AggregateTrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrade[P]>
      : GetScalarType<T[P], AggregateTrade[P]>
  }




  export type TradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeWhereInput
    orderBy?: TradeOrderByWithAggregationInput | TradeOrderByWithAggregationInput[]
    by: TradeScalarFieldEnum[] | TradeScalarFieldEnum
    having?: TradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradeCountAggregateInputType | true
    _avg?: TradeAvgAggregateInputType
    _sum?: TradeSumAggregateInputType
    _min?: TradeMinAggregateInputType
    _max?: TradeMaxAggregateInputType
  }

  export type TradeGroupByOutputType = {
    id: string
    tradeId: string
    orderId: string
    userId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date
    createdAt: Date
    _count: TradeCountAggregateOutputType | null
    _avg: TradeAvgAggregateOutputType | null
    _sum: TradeSumAggregateOutputType | null
    _min: TradeMinAggregateOutputType | null
    _max: TradeMaxAggregateOutputType | null
  }

  type GetTradeGroupByPayload<T extends TradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradeGroupByOutputType[P]>
            : GetScalarType<T[P], TradeGroupByOutputType[P]>
        }
      >
    >


  export type TradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    transactionType?: boolean
    product?: boolean
    quantity?: boolean
    price?: boolean
    value?: boolean
    exchangeTimestamp?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
    charges?: boolean | Trade$chargesArgs<ExtArgs>
  }, ExtArgs["result"]["trade"]>

  export type TradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    transactionType?: boolean
    product?: boolean
    quantity?: boolean
    price?: boolean
    value?: boolean
    exchangeTimestamp?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trade"]>

  export type TradeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    transactionType?: boolean
    product?: boolean
    quantity?: boolean
    price?: boolean
    value?: boolean
    exchangeTimestamp?: boolean
    createdAt?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trade"]>

  export type TradeSelectScalar = {
    id?: boolean
    tradeId?: boolean
    orderId?: boolean
    userId?: boolean
    instrumentId?: boolean
    exchange?: boolean
    tradingSymbol?: boolean
    transactionType?: boolean
    product?: boolean
    quantity?: boolean
    price?: boolean
    value?: boolean
    exchangeTimestamp?: boolean
    createdAt?: boolean
  }

  export type TradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tradeId" | "orderId" | "userId" | "instrumentId" | "exchange" | "tradingSymbol" | "transactionType" | "product" | "quantity" | "price" | "value" | "exchangeTimestamp" | "createdAt", ExtArgs["result"]["trade"]>
  export type TradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
    charges?: boolean | Trade$chargesArgs<ExtArgs>
  }
  export type TradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type TradeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }

  export type $TradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trade"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      instrument: Prisma.$InstrumentPayload<ExtArgs>
      charges: Prisma.$TradeChargesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tradeId: string
      orderId: string
      userId: string
      instrumentId: string
      exchange: $Enums.Exchange
      tradingSymbol: string
      transactionType: $Enums.TransactionType
      product: $Enums.ProductType
      quantity: number
      price: number
      value: number
      exchangeTimestamp: Date
      createdAt: Date
    }, ExtArgs["result"]["trade"]>
    composites: {}
  }

  type TradeGetPayload<S extends boolean | null | undefined | TradeDefaultArgs> = $Result.GetResult<Prisma.$TradePayload, S>

  type TradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TradeCountAggregateInputType | true
    }

  export interface TradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trade'], meta: { name: 'Trade' } }
    /**
     * Find zero or one Trade that matches the filter.
     * @param {TradeFindUniqueArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TradeFindUniqueArgs>(args: SelectSubset<T, TradeFindUniqueArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TradeFindUniqueOrThrowArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TradeFindUniqueOrThrowArgs>(args: SelectSubset<T, TradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeFindFirstArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TradeFindFirstArgs>(args?: SelectSubset<T, TradeFindFirstArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeFindFirstOrThrowArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TradeFindFirstOrThrowArgs>(args?: SelectSubset<T, TradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trades
     * const trades = await prisma.trade.findMany()
     * 
     * // Get first 10 Trades
     * const trades = await prisma.trade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradeWithIdOnly = await prisma.trade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TradeFindManyArgs>(args?: SelectSubset<T, TradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trade.
     * @param {TradeCreateArgs} args - Arguments to create a Trade.
     * @example
     * // Create one Trade
     * const Trade = await prisma.trade.create({
     *   data: {
     *     // ... data to create a Trade
     *   }
     * })
     * 
     */
    create<T extends TradeCreateArgs>(args: SelectSubset<T, TradeCreateArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trades.
     * @param {TradeCreateManyArgs} args - Arguments to create many Trades.
     * @example
     * // Create many Trades
     * const trade = await prisma.trade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TradeCreateManyArgs>(args?: SelectSubset<T, TradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trades and returns the data saved in the database.
     * @param {TradeCreateManyAndReturnArgs} args - Arguments to create many Trades.
     * @example
     * // Create many Trades
     * const trade = await prisma.trade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trades and only return the `id`
     * const tradeWithIdOnly = await prisma.trade.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TradeCreateManyAndReturnArgs>(args?: SelectSubset<T, TradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Trade.
     * @param {TradeDeleteArgs} args - Arguments to delete one Trade.
     * @example
     * // Delete one Trade
     * const Trade = await prisma.trade.delete({
     *   where: {
     *     // ... filter to delete one Trade
     *   }
     * })
     * 
     */
    delete<T extends TradeDeleteArgs>(args: SelectSubset<T, TradeDeleteArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trade.
     * @param {TradeUpdateArgs} args - Arguments to update one Trade.
     * @example
     * // Update one Trade
     * const trade = await prisma.trade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TradeUpdateArgs>(args: SelectSubset<T, TradeUpdateArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trades.
     * @param {TradeDeleteManyArgs} args - Arguments to filter Trades to delete.
     * @example
     * // Delete a few Trades
     * const { count } = await prisma.trade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TradeDeleteManyArgs>(args?: SelectSubset<T, TradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trades
     * const trade = await prisma.trade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TradeUpdateManyArgs>(args: SelectSubset<T, TradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trades and returns the data updated in the database.
     * @param {TradeUpdateManyAndReturnArgs} args - Arguments to update many Trades.
     * @example
     * // Update many Trades
     * const trade = await prisma.trade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Trades and only return the `id`
     * const tradeWithIdOnly = await prisma.trade.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TradeUpdateManyAndReturnArgs>(args: SelectSubset<T, TradeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Trade.
     * @param {TradeUpsertArgs} args - Arguments to update or create a Trade.
     * @example
     * // Update or create a Trade
     * const trade = await prisma.trade.upsert({
     *   create: {
     *     // ... data to create a Trade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trade we want to update
     *   }
     * })
     */
    upsert<T extends TradeUpsertArgs>(args: SelectSubset<T, TradeUpsertArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCountArgs} args - Arguments to filter Trades to count.
     * @example
     * // Count the number of Trades
     * const count = await prisma.trade.count({
     *   where: {
     *     // ... the filter for the Trades we want to count
     *   }
     * })
    **/
    count<T extends TradeCountArgs>(
      args?: Subset<T, TradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradeAggregateArgs>(args: Subset<T, TradeAggregateArgs>): Prisma.PrismaPromise<GetTradeAggregateType<T>>

    /**
     * Group by Trade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradeGroupByArgs['orderBy'] }
        : { orderBy?: TradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trade model
   */
  readonly fields: TradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instrument<T extends InstrumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentDefaultArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    charges<T extends Trade$chargesArgs<ExtArgs> = {}>(args?: Subset<T, Trade$chargesArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trade model
   */
  interface TradeFieldRefs {
    readonly id: FieldRef<"Trade", 'String'>
    readonly tradeId: FieldRef<"Trade", 'String'>
    readonly orderId: FieldRef<"Trade", 'String'>
    readonly userId: FieldRef<"Trade", 'String'>
    readonly instrumentId: FieldRef<"Trade", 'String'>
    readonly exchange: FieldRef<"Trade", 'Exchange'>
    readonly tradingSymbol: FieldRef<"Trade", 'String'>
    readonly transactionType: FieldRef<"Trade", 'TransactionType'>
    readonly product: FieldRef<"Trade", 'ProductType'>
    readonly quantity: FieldRef<"Trade", 'Int'>
    readonly price: FieldRef<"Trade", 'Float'>
    readonly value: FieldRef<"Trade", 'Float'>
    readonly exchangeTimestamp: FieldRef<"Trade", 'DateTime'>
    readonly createdAt: FieldRef<"Trade", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Trade findUnique
   */
  export type TradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade findUniqueOrThrow
   */
  export type TradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade findFirst
   */
  export type TradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trades.
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trades.
     */
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Trade findFirstOrThrow
   */
  export type TradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trades.
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trades.
     */
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Trade findMany
   */
  export type TradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trades to fetch.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trades.
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Trade create
   */
  export type TradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Trade.
     */
    data: XOR<TradeCreateInput, TradeUncheckedCreateInput>
  }

  /**
   * Trade createMany
   */
  export type TradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trades.
     */
    data: TradeCreateManyInput | TradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trade createManyAndReturn
   */
  export type TradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * The data used to create many Trades.
     */
    data: TradeCreateManyInput | TradeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trade update
   */
  export type TradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Trade.
     */
    data: XOR<TradeUpdateInput, TradeUncheckedUpdateInput>
    /**
     * Choose, which Trade to update.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade updateMany
   */
  export type TradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trades.
     */
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyInput>
    /**
     * Filter which Trades to update
     */
    where?: TradeWhereInput
    /**
     * Limit how many Trades to update.
     */
    limit?: number
  }

  /**
   * Trade updateManyAndReturn
   */
  export type TradeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * The data used to update Trades.
     */
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyInput>
    /**
     * Filter which Trades to update
     */
    where?: TradeWhereInput
    /**
     * Limit how many Trades to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Trade upsert
   */
  export type TradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Trade to update in case it exists.
     */
    where: TradeWhereUniqueInput
    /**
     * In case the Trade found by the `where` argument doesn't exist, create a new Trade with this data.
     */
    create: XOR<TradeCreateInput, TradeUncheckedCreateInput>
    /**
     * In case the Trade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TradeUpdateInput, TradeUncheckedUpdateInput>
  }

  /**
   * Trade delete
   */
  export type TradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter which Trade to delete.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade deleteMany
   */
  export type TradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trades to delete
     */
    where?: TradeWhereInput
    /**
     * Limit how many Trades to delete.
     */
    limit?: number
  }

  /**
   * Trade.charges
   */
  export type Trade$chargesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    where?: TradeChargesWhereInput
  }

  /**
   * Trade without action
   */
  export type TradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
  }


  /**
   * Model TradeCharges
   */

  export type AggregateTradeCharges = {
    _count: TradeChargesCountAggregateOutputType | null
    _avg: TradeChargesAvgAggregateOutputType | null
    _sum: TradeChargesSumAggregateOutputType | null
    _min: TradeChargesMinAggregateOutputType | null
    _max: TradeChargesMaxAggregateOutputType | null
  }

  export type TradeChargesAvgAggregateOutputType = {
    brokerage: number | null
    stt: number | null
    exchangeTxnCharge: number | null
    gst: number | null
    sebiTurnover: number | null
    stampDuty: number | null
    totalCharges: number | null
    netAmount: number | null
  }

  export type TradeChargesSumAggregateOutputType = {
    brokerage: number | null
    stt: number | null
    exchangeTxnCharge: number | null
    gst: number | null
    sebiTurnover: number | null
    stampDuty: number | null
    totalCharges: number | null
    netAmount: number | null
  }

  export type TradeChargesMinAggregateOutputType = {
    id: string | null
    tradeId: string | null
    brokerage: number | null
    stt: number | null
    exchangeTxnCharge: number | null
    gst: number | null
    sebiTurnover: number | null
    stampDuty: number | null
    totalCharges: number | null
    netAmount: number | null
  }

  export type TradeChargesMaxAggregateOutputType = {
    id: string | null
    tradeId: string | null
    brokerage: number | null
    stt: number | null
    exchangeTxnCharge: number | null
    gst: number | null
    sebiTurnover: number | null
    stampDuty: number | null
    totalCharges: number | null
    netAmount: number | null
  }

  export type TradeChargesCountAggregateOutputType = {
    id: number
    tradeId: number
    brokerage: number
    stt: number
    exchangeTxnCharge: number
    gst: number
    sebiTurnover: number
    stampDuty: number
    totalCharges: number
    netAmount: number
    _all: number
  }


  export type TradeChargesAvgAggregateInputType = {
    brokerage?: true
    stt?: true
    exchangeTxnCharge?: true
    gst?: true
    sebiTurnover?: true
    stampDuty?: true
    totalCharges?: true
    netAmount?: true
  }

  export type TradeChargesSumAggregateInputType = {
    brokerage?: true
    stt?: true
    exchangeTxnCharge?: true
    gst?: true
    sebiTurnover?: true
    stampDuty?: true
    totalCharges?: true
    netAmount?: true
  }

  export type TradeChargesMinAggregateInputType = {
    id?: true
    tradeId?: true
    brokerage?: true
    stt?: true
    exchangeTxnCharge?: true
    gst?: true
    sebiTurnover?: true
    stampDuty?: true
    totalCharges?: true
    netAmount?: true
  }

  export type TradeChargesMaxAggregateInputType = {
    id?: true
    tradeId?: true
    brokerage?: true
    stt?: true
    exchangeTxnCharge?: true
    gst?: true
    sebiTurnover?: true
    stampDuty?: true
    totalCharges?: true
    netAmount?: true
  }

  export type TradeChargesCountAggregateInputType = {
    id?: true
    tradeId?: true
    brokerage?: true
    stt?: true
    exchangeTxnCharge?: true
    gst?: true
    sebiTurnover?: true
    stampDuty?: true
    totalCharges?: true
    netAmount?: true
    _all?: true
  }

  export type TradeChargesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradeCharges to aggregate.
     */
    where?: TradeChargesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeCharges to fetch.
     */
    orderBy?: TradeChargesOrderByWithRelationInput | TradeChargesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TradeChargesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeCharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeCharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TradeCharges
    **/
    _count?: true | TradeChargesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradeChargesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradeChargesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradeChargesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradeChargesMaxAggregateInputType
  }

  export type GetTradeChargesAggregateType<T extends TradeChargesAggregateArgs> = {
        [P in keyof T & keyof AggregateTradeCharges]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTradeCharges[P]>
      : GetScalarType<T[P], AggregateTradeCharges[P]>
  }




  export type TradeChargesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeChargesWhereInput
    orderBy?: TradeChargesOrderByWithAggregationInput | TradeChargesOrderByWithAggregationInput[]
    by: TradeChargesScalarFieldEnum[] | TradeChargesScalarFieldEnum
    having?: TradeChargesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradeChargesCountAggregateInputType | true
    _avg?: TradeChargesAvgAggregateInputType
    _sum?: TradeChargesSumAggregateInputType
    _min?: TradeChargesMinAggregateInputType
    _max?: TradeChargesMaxAggregateInputType
  }

  export type TradeChargesGroupByOutputType = {
    id: string
    tradeId: string
    brokerage: number
    stt: number
    exchangeTxnCharge: number
    gst: number
    sebiTurnover: number
    stampDuty: number
    totalCharges: number
    netAmount: number
    _count: TradeChargesCountAggregateOutputType | null
    _avg: TradeChargesAvgAggregateOutputType | null
    _sum: TradeChargesSumAggregateOutputType | null
    _min: TradeChargesMinAggregateOutputType | null
    _max: TradeChargesMaxAggregateOutputType | null
  }

  type GetTradeChargesGroupByPayload<T extends TradeChargesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TradeChargesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradeChargesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradeChargesGroupByOutputType[P]>
            : GetScalarType<T[P], TradeChargesGroupByOutputType[P]>
        }
      >
    >


  export type TradeChargesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    brokerage?: boolean
    stt?: boolean
    exchangeTxnCharge?: boolean
    gst?: boolean
    sebiTurnover?: boolean
    stampDuty?: boolean
    totalCharges?: boolean
    netAmount?: boolean
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tradeCharges"]>

  export type TradeChargesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    brokerage?: boolean
    stt?: boolean
    exchangeTxnCharge?: boolean
    gst?: boolean
    sebiTurnover?: boolean
    stampDuty?: boolean
    totalCharges?: boolean
    netAmount?: boolean
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tradeCharges"]>

  export type TradeChargesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    brokerage?: boolean
    stt?: boolean
    exchangeTxnCharge?: boolean
    gst?: boolean
    sebiTurnover?: boolean
    stampDuty?: boolean
    totalCharges?: boolean
    netAmount?: boolean
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tradeCharges"]>

  export type TradeChargesSelectScalar = {
    id?: boolean
    tradeId?: boolean
    brokerage?: boolean
    stt?: boolean
    exchangeTxnCharge?: boolean
    gst?: boolean
    sebiTurnover?: boolean
    stampDuty?: boolean
    totalCharges?: boolean
    netAmount?: boolean
  }

  export type TradeChargesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tradeId" | "brokerage" | "stt" | "exchangeTxnCharge" | "gst" | "sebiTurnover" | "stampDuty" | "totalCharges" | "netAmount", ExtArgs["result"]["tradeCharges"]>
  export type TradeChargesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }
  export type TradeChargesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }
  export type TradeChargesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }

  export type $TradeChargesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TradeCharges"
    objects: {
      trade: Prisma.$TradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tradeId: string
      brokerage: number
      stt: number
      exchangeTxnCharge: number
      gst: number
      sebiTurnover: number
      stampDuty: number
      totalCharges: number
      netAmount: number
    }, ExtArgs["result"]["tradeCharges"]>
    composites: {}
  }

  type TradeChargesGetPayload<S extends boolean | null | undefined | TradeChargesDefaultArgs> = $Result.GetResult<Prisma.$TradeChargesPayload, S>

  type TradeChargesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TradeChargesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TradeChargesCountAggregateInputType | true
    }

  export interface TradeChargesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TradeCharges'], meta: { name: 'TradeCharges' } }
    /**
     * Find zero or one TradeCharges that matches the filter.
     * @param {TradeChargesFindUniqueArgs} args - Arguments to find a TradeCharges
     * @example
     * // Get one TradeCharges
     * const tradeCharges = await prisma.tradeCharges.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TradeChargesFindUniqueArgs>(args: SelectSubset<T, TradeChargesFindUniqueArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TradeCharges that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TradeChargesFindUniqueOrThrowArgs} args - Arguments to find a TradeCharges
     * @example
     * // Get one TradeCharges
     * const tradeCharges = await prisma.tradeCharges.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TradeChargesFindUniqueOrThrowArgs>(args: SelectSubset<T, TradeChargesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TradeCharges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeChargesFindFirstArgs} args - Arguments to find a TradeCharges
     * @example
     * // Get one TradeCharges
     * const tradeCharges = await prisma.tradeCharges.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TradeChargesFindFirstArgs>(args?: SelectSubset<T, TradeChargesFindFirstArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TradeCharges that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeChargesFindFirstOrThrowArgs} args - Arguments to find a TradeCharges
     * @example
     * // Get one TradeCharges
     * const tradeCharges = await prisma.tradeCharges.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TradeChargesFindFirstOrThrowArgs>(args?: SelectSubset<T, TradeChargesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TradeCharges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeChargesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TradeCharges
     * const tradeCharges = await prisma.tradeCharges.findMany()
     * 
     * // Get first 10 TradeCharges
     * const tradeCharges = await prisma.tradeCharges.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradeChargesWithIdOnly = await prisma.tradeCharges.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TradeChargesFindManyArgs>(args?: SelectSubset<T, TradeChargesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TradeCharges.
     * @param {TradeChargesCreateArgs} args - Arguments to create a TradeCharges.
     * @example
     * // Create one TradeCharges
     * const TradeCharges = await prisma.tradeCharges.create({
     *   data: {
     *     // ... data to create a TradeCharges
     *   }
     * })
     * 
     */
    create<T extends TradeChargesCreateArgs>(args: SelectSubset<T, TradeChargesCreateArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TradeCharges.
     * @param {TradeChargesCreateManyArgs} args - Arguments to create many TradeCharges.
     * @example
     * // Create many TradeCharges
     * const tradeCharges = await prisma.tradeCharges.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TradeChargesCreateManyArgs>(args?: SelectSubset<T, TradeChargesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TradeCharges and returns the data saved in the database.
     * @param {TradeChargesCreateManyAndReturnArgs} args - Arguments to create many TradeCharges.
     * @example
     * // Create many TradeCharges
     * const tradeCharges = await prisma.tradeCharges.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TradeCharges and only return the `id`
     * const tradeChargesWithIdOnly = await prisma.tradeCharges.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TradeChargesCreateManyAndReturnArgs>(args?: SelectSubset<T, TradeChargesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TradeCharges.
     * @param {TradeChargesDeleteArgs} args - Arguments to delete one TradeCharges.
     * @example
     * // Delete one TradeCharges
     * const TradeCharges = await prisma.tradeCharges.delete({
     *   where: {
     *     // ... filter to delete one TradeCharges
     *   }
     * })
     * 
     */
    delete<T extends TradeChargesDeleteArgs>(args: SelectSubset<T, TradeChargesDeleteArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TradeCharges.
     * @param {TradeChargesUpdateArgs} args - Arguments to update one TradeCharges.
     * @example
     * // Update one TradeCharges
     * const tradeCharges = await prisma.tradeCharges.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TradeChargesUpdateArgs>(args: SelectSubset<T, TradeChargesUpdateArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TradeCharges.
     * @param {TradeChargesDeleteManyArgs} args - Arguments to filter TradeCharges to delete.
     * @example
     * // Delete a few TradeCharges
     * const { count } = await prisma.tradeCharges.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TradeChargesDeleteManyArgs>(args?: SelectSubset<T, TradeChargesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradeCharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeChargesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TradeCharges
     * const tradeCharges = await prisma.tradeCharges.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TradeChargesUpdateManyArgs>(args: SelectSubset<T, TradeChargesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradeCharges and returns the data updated in the database.
     * @param {TradeChargesUpdateManyAndReturnArgs} args - Arguments to update many TradeCharges.
     * @example
     * // Update many TradeCharges
     * const tradeCharges = await prisma.tradeCharges.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TradeCharges and only return the `id`
     * const tradeChargesWithIdOnly = await prisma.tradeCharges.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TradeChargesUpdateManyAndReturnArgs>(args: SelectSubset<T, TradeChargesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TradeCharges.
     * @param {TradeChargesUpsertArgs} args - Arguments to update or create a TradeCharges.
     * @example
     * // Update or create a TradeCharges
     * const tradeCharges = await prisma.tradeCharges.upsert({
     *   create: {
     *     // ... data to create a TradeCharges
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TradeCharges we want to update
     *   }
     * })
     */
    upsert<T extends TradeChargesUpsertArgs>(args: SelectSubset<T, TradeChargesUpsertArgs<ExtArgs>>): Prisma__TradeChargesClient<$Result.GetResult<Prisma.$TradeChargesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TradeCharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeChargesCountArgs} args - Arguments to filter TradeCharges to count.
     * @example
     * // Count the number of TradeCharges
     * const count = await prisma.tradeCharges.count({
     *   where: {
     *     // ... the filter for the TradeCharges we want to count
     *   }
     * })
    **/
    count<T extends TradeChargesCountArgs>(
      args?: Subset<T, TradeChargesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradeChargesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TradeCharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeChargesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradeChargesAggregateArgs>(args: Subset<T, TradeChargesAggregateArgs>): Prisma.PrismaPromise<GetTradeChargesAggregateType<T>>

    /**
     * Group by TradeCharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeChargesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradeChargesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradeChargesGroupByArgs['orderBy'] }
        : { orderBy?: TradeChargesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradeChargesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradeChargesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TradeCharges model
   */
  readonly fields: TradeChargesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TradeCharges.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TradeChargesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    trade<T extends TradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TradeDefaultArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TradeCharges model
   */
  interface TradeChargesFieldRefs {
    readonly id: FieldRef<"TradeCharges", 'String'>
    readonly tradeId: FieldRef<"TradeCharges", 'String'>
    readonly brokerage: FieldRef<"TradeCharges", 'Float'>
    readonly stt: FieldRef<"TradeCharges", 'Float'>
    readonly exchangeTxnCharge: FieldRef<"TradeCharges", 'Float'>
    readonly gst: FieldRef<"TradeCharges", 'Float'>
    readonly sebiTurnover: FieldRef<"TradeCharges", 'Float'>
    readonly stampDuty: FieldRef<"TradeCharges", 'Float'>
    readonly totalCharges: FieldRef<"TradeCharges", 'Float'>
    readonly netAmount: FieldRef<"TradeCharges", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * TradeCharges findUnique
   */
  export type TradeChargesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * Filter, which TradeCharges to fetch.
     */
    where: TradeChargesWhereUniqueInput
  }

  /**
   * TradeCharges findUniqueOrThrow
   */
  export type TradeChargesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * Filter, which TradeCharges to fetch.
     */
    where: TradeChargesWhereUniqueInput
  }

  /**
   * TradeCharges findFirst
   */
  export type TradeChargesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * Filter, which TradeCharges to fetch.
     */
    where?: TradeChargesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeCharges to fetch.
     */
    orderBy?: TradeChargesOrderByWithRelationInput | TradeChargesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradeCharges.
     */
    cursor?: TradeChargesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeCharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeCharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradeCharges.
     */
    distinct?: TradeChargesScalarFieldEnum | TradeChargesScalarFieldEnum[]
  }

  /**
   * TradeCharges findFirstOrThrow
   */
  export type TradeChargesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * Filter, which TradeCharges to fetch.
     */
    where?: TradeChargesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeCharges to fetch.
     */
    orderBy?: TradeChargesOrderByWithRelationInput | TradeChargesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradeCharges.
     */
    cursor?: TradeChargesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeCharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeCharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradeCharges.
     */
    distinct?: TradeChargesScalarFieldEnum | TradeChargesScalarFieldEnum[]
  }

  /**
   * TradeCharges findMany
   */
  export type TradeChargesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * Filter, which TradeCharges to fetch.
     */
    where?: TradeChargesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeCharges to fetch.
     */
    orderBy?: TradeChargesOrderByWithRelationInput | TradeChargesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TradeCharges.
     */
    cursor?: TradeChargesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeCharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeCharges.
     */
    skip?: number
    distinct?: TradeChargesScalarFieldEnum | TradeChargesScalarFieldEnum[]
  }

  /**
   * TradeCharges create
   */
  export type TradeChargesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * The data needed to create a TradeCharges.
     */
    data: XOR<TradeChargesCreateInput, TradeChargesUncheckedCreateInput>
  }

  /**
   * TradeCharges createMany
   */
  export type TradeChargesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TradeCharges.
     */
    data: TradeChargesCreateManyInput | TradeChargesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TradeCharges createManyAndReturn
   */
  export type TradeChargesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * The data used to create many TradeCharges.
     */
    data: TradeChargesCreateManyInput | TradeChargesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TradeCharges update
   */
  export type TradeChargesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * The data needed to update a TradeCharges.
     */
    data: XOR<TradeChargesUpdateInput, TradeChargesUncheckedUpdateInput>
    /**
     * Choose, which TradeCharges to update.
     */
    where: TradeChargesWhereUniqueInput
  }

  /**
   * TradeCharges updateMany
   */
  export type TradeChargesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TradeCharges.
     */
    data: XOR<TradeChargesUpdateManyMutationInput, TradeChargesUncheckedUpdateManyInput>
    /**
     * Filter which TradeCharges to update
     */
    where?: TradeChargesWhereInput
    /**
     * Limit how many TradeCharges to update.
     */
    limit?: number
  }

  /**
   * TradeCharges updateManyAndReturn
   */
  export type TradeChargesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * The data used to update TradeCharges.
     */
    data: XOR<TradeChargesUpdateManyMutationInput, TradeChargesUncheckedUpdateManyInput>
    /**
     * Filter which TradeCharges to update
     */
    where?: TradeChargesWhereInput
    /**
     * Limit how many TradeCharges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TradeCharges upsert
   */
  export type TradeChargesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * The filter to search for the TradeCharges to update in case it exists.
     */
    where: TradeChargesWhereUniqueInput
    /**
     * In case the TradeCharges found by the `where` argument doesn't exist, create a new TradeCharges with this data.
     */
    create: XOR<TradeChargesCreateInput, TradeChargesUncheckedCreateInput>
    /**
     * In case the TradeCharges was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TradeChargesUpdateInput, TradeChargesUncheckedUpdateInput>
  }

  /**
   * TradeCharges delete
   */
  export type TradeChargesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
    /**
     * Filter which TradeCharges to delete.
     */
    where: TradeChargesWhereUniqueInput
  }

  /**
   * TradeCharges deleteMany
   */
  export type TradeChargesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradeCharges to delete
     */
    where?: TradeChargesWhereInput
    /**
     * Limit how many TradeCharges to delete.
     */
    limit?: number
  }

  /**
   * TradeCharges without action
   */
  export type TradeChargesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCharges
     */
    select?: TradeChargesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeCharges
     */
    omit?: TradeChargesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeChargesInclude<ExtArgs> | null
  }


  /**
   * Model GTTOrder
   */

  export type AggregateGTTOrder = {
    _count: GTTOrderCountAggregateOutputType | null
    _avg: GTTOrderAvgAggregateOutputType | null
    _sum: GTTOrderSumAggregateOutputType | null
    _min: GTTOrderMinAggregateOutputType | null
    _max: GTTOrderMaxAggregateOutputType | null
  }

  export type GTTOrderAvgAggregateOutputType = {
    triggerPrice: number | null
    lastPrice: number | null
    limitPrice: number | null
    stopLossPrice: number | null
    quantity: number | null
  }

  export type GTTOrderSumAggregateOutputType = {
    triggerPrice: number | null
    lastPrice: number | null
    limitPrice: number | null
    stopLossPrice: number | null
    quantity: number | null
  }

  export type GTTOrderMinAggregateOutputType = {
    id: string | null
    userId: string | null
    gttType: $Enums.GTTType | null
    instrumentId: string | null
    tradingSymbol: string | null
    exchange: $Enums.Exchange | null
    triggerType: $Enums.TriggerType | null
    triggerPrice: number | null
    lastPrice: number | null
    limitPrice: number | null
    stopLossPrice: number | null
    quantity: number | null
    product: $Enums.ProductType | null
    orderType: $Enums.OrderType | null
    status: $Enums.GTTStatus | null
    expiresAt: Date | null
    triggeredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GTTOrderMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    gttType: $Enums.GTTType | null
    instrumentId: string | null
    tradingSymbol: string | null
    exchange: $Enums.Exchange | null
    triggerType: $Enums.TriggerType | null
    triggerPrice: number | null
    lastPrice: number | null
    limitPrice: number | null
    stopLossPrice: number | null
    quantity: number | null
    product: $Enums.ProductType | null
    orderType: $Enums.OrderType | null
    status: $Enums.GTTStatus | null
    expiresAt: Date | null
    triggeredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GTTOrderCountAggregateOutputType = {
    id: number
    userId: number
    gttType: number
    instrumentId: number
    tradingSymbol: number
    exchange: number
    triggerType: number
    triggerPrice: number
    lastPrice: number
    limitPrice: number
    stopLossPrice: number
    quantity: number
    product: number
    orderType: number
    status: number
    expiresAt: number
    triggeredAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GTTOrderAvgAggregateInputType = {
    triggerPrice?: true
    lastPrice?: true
    limitPrice?: true
    stopLossPrice?: true
    quantity?: true
  }

  export type GTTOrderSumAggregateInputType = {
    triggerPrice?: true
    lastPrice?: true
    limitPrice?: true
    stopLossPrice?: true
    quantity?: true
  }

  export type GTTOrderMinAggregateInputType = {
    id?: true
    userId?: true
    gttType?: true
    instrumentId?: true
    tradingSymbol?: true
    exchange?: true
    triggerType?: true
    triggerPrice?: true
    lastPrice?: true
    limitPrice?: true
    stopLossPrice?: true
    quantity?: true
    product?: true
    orderType?: true
    status?: true
    expiresAt?: true
    triggeredAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GTTOrderMaxAggregateInputType = {
    id?: true
    userId?: true
    gttType?: true
    instrumentId?: true
    tradingSymbol?: true
    exchange?: true
    triggerType?: true
    triggerPrice?: true
    lastPrice?: true
    limitPrice?: true
    stopLossPrice?: true
    quantity?: true
    product?: true
    orderType?: true
    status?: true
    expiresAt?: true
    triggeredAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GTTOrderCountAggregateInputType = {
    id?: true
    userId?: true
    gttType?: true
    instrumentId?: true
    tradingSymbol?: true
    exchange?: true
    triggerType?: true
    triggerPrice?: true
    lastPrice?: true
    limitPrice?: true
    stopLossPrice?: true
    quantity?: true
    product?: true
    orderType?: true
    status?: true
    expiresAt?: true
    triggeredAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GTTOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GTTOrder to aggregate.
     */
    where?: GTTOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GTTOrders to fetch.
     */
    orderBy?: GTTOrderOrderByWithRelationInput | GTTOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GTTOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GTTOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GTTOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GTTOrders
    **/
    _count?: true | GTTOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GTTOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GTTOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GTTOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GTTOrderMaxAggregateInputType
  }

  export type GetGTTOrderAggregateType<T extends GTTOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateGTTOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGTTOrder[P]>
      : GetScalarType<T[P], AggregateGTTOrder[P]>
  }




  export type GTTOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GTTOrderWhereInput
    orderBy?: GTTOrderOrderByWithAggregationInput | GTTOrderOrderByWithAggregationInput[]
    by: GTTOrderScalarFieldEnum[] | GTTOrderScalarFieldEnum
    having?: GTTOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GTTOrderCountAggregateInputType | true
    _avg?: GTTOrderAvgAggregateInputType
    _sum?: GTTOrderSumAggregateInputType
    _min?: GTTOrderMinAggregateInputType
    _max?: GTTOrderMaxAggregateInputType
  }

  export type GTTOrderGroupByOutputType = {
    id: string
    userId: string
    gttType: $Enums.GTTType
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    triggerType: $Enums.TriggerType
    triggerPrice: number
    lastPrice: number
    limitPrice: number | null
    stopLossPrice: number | null
    quantity: number
    product: $Enums.ProductType
    orderType: $Enums.OrderType
    status: $Enums.GTTStatus
    expiresAt: Date | null
    triggeredAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: GTTOrderCountAggregateOutputType | null
    _avg: GTTOrderAvgAggregateOutputType | null
    _sum: GTTOrderSumAggregateOutputType | null
    _min: GTTOrderMinAggregateOutputType | null
    _max: GTTOrderMaxAggregateOutputType | null
  }

  type GetGTTOrderGroupByPayload<T extends GTTOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GTTOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GTTOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GTTOrderGroupByOutputType[P]>
            : GetScalarType<T[P], GTTOrderGroupByOutputType[P]>
        }
      >
    >


  export type GTTOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gttType?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    triggerType?: boolean
    triggerPrice?: boolean
    lastPrice?: boolean
    limitPrice?: boolean
    stopLossPrice?: boolean
    quantity?: boolean
    product?: boolean
    orderType?: boolean
    status?: boolean
    expiresAt?: boolean
    triggeredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gTTOrder"]>

  export type GTTOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gttType?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    triggerType?: boolean
    triggerPrice?: boolean
    lastPrice?: boolean
    limitPrice?: boolean
    stopLossPrice?: boolean
    quantity?: boolean
    product?: boolean
    orderType?: boolean
    status?: boolean
    expiresAt?: boolean
    triggeredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gTTOrder"]>

  export type GTTOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    gttType?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    triggerType?: boolean
    triggerPrice?: boolean
    lastPrice?: boolean
    limitPrice?: boolean
    stopLossPrice?: boolean
    quantity?: boolean
    product?: boolean
    orderType?: boolean
    status?: boolean
    expiresAt?: boolean
    triggeredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gTTOrder"]>

  export type GTTOrderSelectScalar = {
    id?: boolean
    userId?: boolean
    gttType?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    triggerType?: boolean
    triggerPrice?: boolean
    lastPrice?: boolean
    limitPrice?: boolean
    stopLossPrice?: boolean
    quantity?: boolean
    product?: boolean
    orderType?: boolean
    status?: boolean
    expiresAt?: boolean
    triggeredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GTTOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "gttType" | "instrumentId" | "tradingSymbol" | "exchange" | "triggerType" | "triggerPrice" | "lastPrice" | "limitPrice" | "stopLossPrice" | "quantity" | "product" | "orderType" | "status" | "expiresAt" | "triggeredAt" | "createdAt" | "updatedAt", ExtArgs["result"]["gTTOrder"]>
  export type GTTOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GTTOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GTTOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GTTOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GTTOrder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      gttType: $Enums.GTTType
      instrumentId: string
      tradingSymbol: string
      exchange: $Enums.Exchange
      triggerType: $Enums.TriggerType
      triggerPrice: number
      lastPrice: number
      limitPrice: number | null
      stopLossPrice: number | null
      quantity: number
      product: $Enums.ProductType
      orderType: $Enums.OrderType
      status: $Enums.GTTStatus
      expiresAt: Date | null
      triggeredAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["gTTOrder"]>
    composites: {}
  }

  type GTTOrderGetPayload<S extends boolean | null | undefined | GTTOrderDefaultArgs> = $Result.GetResult<Prisma.$GTTOrderPayload, S>

  type GTTOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GTTOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GTTOrderCountAggregateInputType | true
    }

  export interface GTTOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GTTOrder'], meta: { name: 'GTTOrder' } }
    /**
     * Find zero or one GTTOrder that matches the filter.
     * @param {GTTOrderFindUniqueArgs} args - Arguments to find a GTTOrder
     * @example
     * // Get one GTTOrder
     * const gTTOrder = await prisma.gTTOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GTTOrderFindUniqueArgs>(args: SelectSubset<T, GTTOrderFindUniqueArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GTTOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GTTOrderFindUniqueOrThrowArgs} args - Arguments to find a GTTOrder
     * @example
     * // Get one GTTOrder
     * const gTTOrder = await prisma.gTTOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GTTOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, GTTOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GTTOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GTTOrderFindFirstArgs} args - Arguments to find a GTTOrder
     * @example
     * // Get one GTTOrder
     * const gTTOrder = await prisma.gTTOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GTTOrderFindFirstArgs>(args?: SelectSubset<T, GTTOrderFindFirstArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GTTOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GTTOrderFindFirstOrThrowArgs} args - Arguments to find a GTTOrder
     * @example
     * // Get one GTTOrder
     * const gTTOrder = await prisma.gTTOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GTTOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, GTTOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GTTOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GTTOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GTTOrders
     * const gTTOrders = await prisma.gTTOrder.findMany()
     * 
     * // Get first 10 GTTOrders
     * const gTTOrders = await prisma.gTTOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gTTOrderWithIdOnly = await prisma.gTTOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GTTOrderFindManyArgs>(args?: SelectSubset<T, GTTOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GTTOrder.
     * @param {GTTOrderCreateArgs} args - Arguments to create a GTTOrder.
     * @example
     * // Create one GTTOrder
     * const GTTOrder = await prisma.gTTOrder.create({
     *   data: {
     *     // ... data to create a GTTOrder
     *   }
     * })
     * 
     */
    create<T extends GTTOrderCreateArgs>(args: SelectSubset<T, GTTOrderCreateArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GTTOrders.
     * @param {GTTOrderCreateManyArgs} args - Arguments to create many GTTOrders.
     * @example
     * // Create many GTTOrders
     * const gTTOrder = await prisma.gTTOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GTTOrderCreateManyArgs>(args?: SelectSubset<T, GTTOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GTTOrders and returns the data saved in the database.
     * @param {GTTOrderCreateManyAndReturnArgs} args - Arguments to create many GTTOrders.
     * @example
     * // Create many GTTOrders
     * const gTTOrder = await prisma.gTTOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GTTOrders and only return the `id`
     * const gTTOrderWithIdOnly = await prisma.gTTOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GTTOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, GTTOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GTTOrder.
     * @param {GTTOrderDeleteArgs} args - Arguments to delete one GTTOrder.
     * @example
     * // Delete one GTTOrder
     * const GTTOrder = await prisma.gTTOrder.delete({
     *   where: {
     *     // ... filter to delete one GTTOrder
     *   }
     * })
     * 
     */
    delete<T extends GTTOrderDeleteArgs>(args: SelectSubset<T, GTTOrderDeleteArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GTTOrder.
     * @param {GTTOrderUpdateArgs} args - Arguments to update one GTTOrder.
     * @example
     * // Update one GTTOrder
     * const gTTOrder = await prisma.gTTOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GTTOrderUpdateArgs>(args: SelectSubset<T, GTTOrderUpdateArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GTTOrders.
     * @param {GTTOrderDeleteManyArgs} args - Arguments to filter GTTOrders to delete.
     * @example
     * // Delete a few GTTOrders
     * const { count } = await prisma.gTTOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GTTOrderDeleteManyArgs>(args?: SelectSubset<T, GTTOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GTTOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GTTOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GTTOrders
     * const gTTOrder = await prisma.gTTOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GTTOrderUpdateManyArgs>(args: SelectSubset<T, GTTOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GTTOrders and returns the data updated in the database.
     * @param {GTTOrderUpdateManyAndReturnArgs} args - Arguments to update many GTTOrders.
     * @example
     * // Update many GTTOrders
     * const gTTOrder = await prisma.gTTOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GTTOrders and only return the `id`
     * const gTTOrderWithIdOnly = await prisma.gTTOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GTTOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, GTTOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GTTOrder.
     * @param {GTTOrderUpsertArgs} args - Arguments to update or create a GTTOrder.
     * @example
     * // Update or create a GTTOrder
     * const gTTOrder = await prisma.gTTOrder.upsert({
     *   create: {
     *     // ... data to create a GTTOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GTTOrder we want to update
     *   }
     * })
     */
    upsert<T extends GTTOrderUpsertArgs>(args: SelectSubset<T, GTTOrderUpsertArgs<ExtArgs>>): Prisma__GTTOrderClient<$Result.GetResult<Prisma.$GTTOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GTTOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GTTOrderCountArgs} args - Arguments to filter GTTOrders to count.
     * @example
     * // Count the number of GTTOrders
     * const count = await prisma.gTTOrder.count({
     *   where: {
     *     // ... the filter for the GTTOrders we want to count
     *   }
     * })
    **/
    count<T extends GTTOrderCountArgs>(
      args?: Subset<T, GTTOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GTTOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GTTOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GTTOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GTTOrderAggregateArgs>(args: Subset<T, GTTOrderAggregateArgs>): Prisma.PrismaPromise<GetGTTOrderAggregateType<T>>

    /**
     * Group by GTTOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GTTOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GTTOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GTTOrderGroupByArgs['orderBy'] }
        : { orderBy?: GTTOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GTTOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGTTOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GTTOrder model
   */
  readonly fields: GTTOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GTTOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GTTOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GTTOrder model
   */
  interface GTTOrderFieldRefs {
    readonly id: FieldRef<"GTTOrder", 'String'>
    readonly userId: FieldRef<"GTTOrder", 'String'>
    readonly gttType: FieldRef<"GTTOrder", 'GTTType'>
    readonly instrumentId: FieldRef<"GTTOrder", 'String'>
    readonly tradingSymbol: FieldRef<"GTTOrder", 'String'>
    readonly exchange: FieldRef<"GTTOrder", 'Exchange'>
    readonly triggerType: FieldRef<"GTTOrder", 'TriggerType'>
    readonly triggerPrice: FieldRef<"GTTOrder", 'Float'>
    readonly lastPrice: FieldRef<"GTTOrder", 'Float'>
    readonly limitPrice: FieldRef<"GTTOrder", 'Float'>
    readonly stopLossPrice: FieldRef<"GTTOrder", 'Float'>
    readonly quantity: FieldRef<"GTTOrder", 'Int'>
    readonly product: FieldRef<"GTTOrder", 'ProductType'>
    readonly orderType: FieldRef<"GTTOrder", 'OrderType'>
    readonly status: FieldRef<"GTTOrder", 'GTTStatus'>
    readonly expiresAt: FieldRef<"GTTOrder", 'DateTime'>
    readonly triggeredAt: FieldRef<"GTTOrder", 'DateTime'>
    readonly createdAt: FieldRef<"GTTOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"GTTOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GTTOrder findUnique
   */
  export type GTTOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * Filter, which GTTOrder to fetch.
     */
    where: GTTOrderWhereUniqueInput
  }

  /**
   * GTTOrder findUniqueOrThrow
   */
  export type GTTOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * Filter, which GTTOrder to fetch.
     */
    where: GTTOrderWhereUniqueInput
  }

  /**
   * GTTOrder findFirst
   */
  export type GTTOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * Filter, which GTTOrder to fetch.
     */
    where?: GTTOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GTTOrders to fetch.
     */
    orderBy?: GTTOrderOrderByWithRelationInput | GTTOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GTTOrders.
     */
    cursor?: GTTOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GTTOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GTTOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GTTOrders.
     */
    distinct?: GTTOrderScalarFieldEnum | GTTOrderScalarFieldEnum[]
  }

  /**
   * GTTOrder findFirstOrThrow
   */
  export type GTTOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * Filter, which GTTOrder to fetch.
     */
    where?: GTTOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GTTOrders to fetch.
     */
    orderBy?: GTTOrderOrderByWithRelationInput | GTTOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GTTOrders.
     */
    cursor?: GTTOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GTTOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GTTOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GTTOrders.
     */
    distinct?: GTTOrderScalarFieldEnum | GTTOrderScalarFieldEnum[]
  }

  /**
   * GTTOrder findMany
   */
  export type GTTOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * Filter, which GTTOrders to fetch.
     */
    where?: GTTOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GTTOrders to fetch.
     */
    orderBy?: GTTOrderOrderByWithRelationInput | GTTOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GTTOrders.
     */
    cursor?: GTTOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GTTOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GTTOrders.
     */
    skip?: number
    distinct?: GTTOrderScalarFieldEnum | GTTOrderScalarFieldEnum[]
  }

  /**
   * GTTOrder create
   */
  export type GTTOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a GTTOrder.
     */
    data: XOR<GTTOrderCreateInput, GTTOrderUncheckedCreateInput>
  }

  /**
   * GTTOrder createMany
   */
  export type GTTOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GTTOrders.
     */
    data: GTTOrderCreateManyInput | GTTOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GTTOrder createManyAndReturn
   */
  export type GTTOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * The data used to create many GTTOrders.
     */
    data: GTTOrderCreateManyInput | GTTOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GTTOrder update
   */
  export type GTTOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a GTTOrder.
     */
    data: XOR<GTTOrderUpdateInput, GTTOrderUncheckedUpdateInput>
    /**
     * Choose, which GTTOrder to update.
     */
    where: GTTOrderWhereUniqueInput
  }

  /**
   * GTTOrder updateMany
   */
  export type GTTOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GTTOrders.
     */
    data: XOR<GTTOrderUpdateManyMutationInput, GTTOrderUncheckedUpdateManyInput>
    /**
     * Filter which GTTOrders to update
     */
    where?: GTTOrderWhereInput
    /**
     * Limit how many GTTOrders to update.
     */
    limit?: number
  }

  /**
   * GTTOrder updateManyAndReturn
   */
  export type GTTOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * The data used to update GTTOrders.
     */
    data: XOR<GTTOrderUpdateManyMutationInput, GTTOrderUncheckedUpdateManyInput>
    /**
     * Filter which GTTOrders to update
     */
    where?: GTTOrderWhereInput
    /**
     * Limit how many GTTOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GTTOrder upsert
   */
  export type GTTOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the GTTOrder to update in case it exists.
     */
    where: GTTOrderWhereUniqueInput
    /**
     * In case the GTTOrder found by the `where` argument doesn't exist, create a new GTTOrder with this data.
     */
    create: XOR<GTTOrderCreateInput, GTTOrderUncheckedCreateInput>
    /**
     * In case the GTTOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GTTOrderUpdateInput, GTTOrderUncheckedUpdateInput>
  }

  /**
   * GTTOrder delete
   */
  export type GTTOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
    /**
     * Filter which GTTOrder to delete.
     */
    where: GTTOrderWhereUniqueInput
  }

  /**
   * GTTOrder deleteMany
   */
  export type GTTOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GTTOrders to delete
     */
    where?: GTTOrderWhereInput
    /**
     * Limit how many GTTOrders to delete.
     */
    limit?: number
  }

  /**
   * GTTOrder without action
   */
  export type GTTOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GTTOrder
     */
    select?: GTTOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GTTOrder
     */
    omit?: GTTOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GTTOrderInclude<ExtArgs> | null
  }


  /**
   * Model Watchlist
   */

  export type AggregateWatchlist = {
    _count: WatchlistCountAggregateOutputType | null
    _min: WatchlistMinAggregateOutputType | null
    _max: WatchlistMaxAggregateOutputType | null
  }

  export type WatchlistMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WatchlistMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WatchlistCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WatchlistMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WatchlistMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WatchlistCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WatchlistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watchlist to aggregate.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Watchlists
    **/
    _count?: true | WatchlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchlistMaxAggregateInputType
  }

  export type GetWatchlistAggregateType<T extends WatchlistAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchlist[P]>
      : GetScalarType<T[P], AggregateWatchlist[P]>
  }




  export type WatchlistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistWhereInput
    orderBy?: WatchlistOrderByWithAggregationInput | WatchlistOrderByWithAggregationInput[]
    by: WatchlistScalarFieldEnum[] | WatchlistScalarFieldEnum
    having?: WatchlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchlistCountAggregateInputType | true
    _min?: WatchlistMinAggregateInputType
    _max?: WatchlistMaxAggregateInputType
  }

  export type WatchlistGroupByOutputType = {
    id: string
    userId: string
    name: string
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: WatchlistCountAggregateOutputType | null
    _min: WatchlistMinAggregateOutputType | null
    _max: WatchlistMaxAggregateOutputType | null
  }

  type GetWatchlistGroupByPayload<T extends WatchlistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchlistGroupByOutputType[P]>
            : GetScalarType<T[P], WatchlistGroupByOutputType[P]>
        }
      >
    >


  export type WatchlistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Watchlist$itemsArgs<ExtArgs>
    _count?: boolean | WatchlistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WatchlistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "isDefault" | "createdAt" | "updatedAt", ExtArgs["result"]["watchlist"]>
  export type WatchlistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Watchlist$itemsArgs<ExtArgs>
    _count?: boolean | WatchlistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WatchlistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WatchlistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WatchlistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Watchlist"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$WatchlistItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["watchlist"]>
    composites: {}
  }

  type WatchlistGetPayload<S extends boolean | null | undefined | WatchlistDefaultArgs> = $Result.GetResult<Prisma.$WatchlistPayload, S>

  type WatchlistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WatchlistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WatchlistCountAggregateInputType | true
    }

  export interface WatchlistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Watchlist'], meta: { name: 'Watchlist' } }
    /**
     * Find zero or one Watchlist that matches the filter.
     * @param {WatchlistFindUniqueArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WatchlistFindUniqueArgs>(args: SelectSubset<T, WatchlistFindUniqueArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Watchlist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WatchlistFindUniqueOrThrowArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WatchlistFindUniqueOrThrowArgs>(args: SelectSubset<T, WatchlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Watchlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindFirstArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WatchlistFindFirstArgs>(args?: SelectSubset<T, WatchlistFindFirstArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Watchlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindFirstOrThrowArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WatchlistFindFirstOrThrowArgs>(args?: SelectSubset<T, WatchlistFindFirstOrThrowArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Watchlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Watchlists
     * const watchlists = await prisma.watchlist.findMany()
     * 
     * // Get first 10 Watchlists
     * const watchlists = await prisma.watchlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchlistWithIdOnly = await prisma.watchlist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WatchlistFindManyArgs>(args?: SelectSubset<T, WatchlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Watchlist.
     * @param {WatchlistCreateArgs} args - Arguments to create a Watchlist.
     * @example
     * // Create one Watchlist
     * const Watchlist = await prisma.watchlist.create({
     *   data: {
     *     // ... data to create a Watchlist
     *   }
     * })
     * 
     */
    create<T extends WatchlistCreateArgs>(args: SelectSubset<T, WatchlistCreateArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Watchlists.
     * @param {WatchlistCreateManyArgs} args - Arguments to create many Watchlists.
     * @example
     * // Create many Watchlists
     * const watchlist = await prisma.watchlist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WatchlistCreateManyArgs>(args?: SelectSubset<T, WatchlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Watchlists and returns the data saved in the database.
     * @param {WatchlistCreateManyAndReturnArgs} args - Arguments to create many Watchlists.
     * @example
     * // Create many Watchlists
     * const watchlist = await prisma.watchlist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Watchlists and only return the `id`
     * const watchlistWithIdOnly = await prisma.watchlist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WatchlistCreateManyAndReturnArgs>(args?: SelectSubset<T, WatchlistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Watchlist.
     * @param {WatchlistDeleteArgs} args - Arguments to delete one Watchlist.
     * @example
     * // Delete one Watchlist
     * const Watchlist = await prisma.watchlist.delete({
     *   where: {
     *     // ... filter to delete one Watchlist
     *   }
     * })
     * 
     */
    delete<T extends WatchlistDeleteArgs>(args: SelectSubset<T, WatchlistDeleteArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Watchlist.
     * @param {WatchlistUpdateArgs} args - Arguments to update one Watchlist.
     * @example
     * // Update one Watchlist
     * const watchlist = await prisma.watchlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WatchlistUpdateArgs>(args: SelectSubset<T, WatchlistUpdateArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Watchlists.
     * @param {WatchlistDeleteManyArgs} args - Arguments to filter Watchlists to delete.
     * @example
     * // Delete a few Watchlists
     * const { count } = await prisma.watchlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WatchlistDeleteManyArgs>(args?: SelectSubset<T, WatchlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Watchlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Watchlists
     * const watchlist = await prisma.watchlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WatchlistUpdateManyArgs>(args: SelectSubset<T, WatchlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Watchlists and returns the data updated in the database.
     * @param {WatchlistUpdateManyAndReturnArgs} args - Arguments to update many Watchlists.
     * @example
     * // Update many Watchlists
     * const watchlist = await prisma.watchlist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Watchlists and only return the `id`
     * const watchlistWithIdOnly = await prisma.watchlist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WatchlistUpdateManyAndReturnArgs>(args: SelectSubset<T, WatchlistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Watchlist.
     * @param {WatchlistUpsertArgs} args - Arguments to update or create a Watchlist.
     * @example
     * // Update or create a Watchlist
     * const watchlist = await prisma.watchlist.upsert({
     *   create: {
     *     // ... data to create a Watchlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Watchlist we want to update
     *   }
     * })
     */
    upsert<T extends WatchlistUpsertArgs>(args: SelectSubset<T, WatchlistUpsertArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Watchlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistCountArgs} args - Arguments to filter Watchlists to count.
     * @example
     * // Count the number of Watchlists
     * const count = await prisma.watchlist.count({
     *   where: {
     *     // ... the filter for the Watchlists we want to count
     *   }
     * })
    **/
    count<T extends WatchlistCountArgs>(
      args?: Subset<T, WatchlistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Watchlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchlistAggregateArgs>(args: Subset<T, WatchlistAggregateArgs>): Prisma.PrismaPromise<GetWatchlistAggregateType<T>>

    /**
     * Group by Watchlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchlistGroupByArgs['orderBy'] }
        : { orderBy?: WatchlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Watchlist model
   */
  readonly fields: WatchlistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Watchlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchlistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Watchlist$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Watchlist$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Watchlist model
   */
  interface WatchlistFieldRefs {
    readonly id: FieldRef<"Watchlist", 'String'>
    readonly userId: FieldRef<"Watchlist", 'String'>
    readonly name: FieldRef<"Watchlist", 'String'>
    readonly isDefault: FieldRef<"Watchlist", 'Boolean'>
    readonly createdAt: FieldRef<"Watchlist", 'DateTime'>
    readonly updatedAt: FieldRef<"Watchlist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Watchlist findUnique
   */
  export type WatchlistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist findUniqueOrThrow
   */
  export type WatchlistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist findFirst
   */
  export type WatchlistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchlists.
     */
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist findFirstOrThrow
   */
  export type WatchlistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchlists.
     */
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist findMany
   */
  export type WatchlistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlists to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist create
   */
  export type WatchlistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * The data needed to create a Watchlist.
     */
    data: XOR<WatchlistCreateInput, WatchlistUncheckedCreateInput>
  }

  /**
   * Watchlist createMany
   */
  export type WatchlistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Watchlists.
     */
    data: WatchlistCreateManyInput | WatchlistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Watchlist createManyAndReturn
   */
  export type WatchlistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * The data used to create many Watchlists.
     */
    data: WatchlistCreateManyInput | WatchlistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Watchlist update
   */
  export type WatchlistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * The data needed to update a Watchlist.
     */
    data: XOR<WatchlistUpdateInput, WatchlistUncheckedUpdateInput>
    /**
     * Choose, which Watchlist to update.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist updateMany
   */
  export type WatchlistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Watchlists.
     */
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyInput>
    /**
     * Filter which Watchlists to update
     */
    where?: WatchlistWhereInput
    /**
     * Limit how many Watchlists to update.
     */
    limit?: number
  }

  /**
   * Watchlist updateManyAndReturn
   */
  export type WatchlistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * The data used to update Watchlists.
     */
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyInput>
    /**
     * Filter which Watchlists to update
     */
    where?: WatchlistWhereInput
    /**
     * Limit how many Watchlists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Watchlist upsert
   */
  export type WatchlistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * The filter to search for the Watchlist to update in case it exists.
     */
    where: WatchlistWhereUniqueInput
    /**
     * In case the Watchlist found by the `where` argument doesn't exist, create a new Watchlist with this data.
     */
    create: XOR<WatchlistCreateInput, WatchlistUncheckedCreateInput>
    /**
     * In case the Watchlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchlistUpdateInput, WatchlistUncheckedUpdateInput>
  }

  /**
   * Watchlist delete
   */
  export type WatchlistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter which Watchlist to delete.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist deleteMany
   */
  export type WatchlistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watchlists to delete
     */
    where?: WatchlistWhereInput
    /**
     * Limit how many Watchlists to delete.
     */
    limit?: number
  }

  /**
   * Watchlist.items
   */
  export type Watchlist$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    where?: WatchlistItemWhereInput
    orderBy?: WatchlistItemOrderByWithRelationInput | WatchlistItemOrderByWithRelationInput[]
    cursor?: WatchlistItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchlistItemScalarFieldEnum | WatchlistItemScalarFieldEnum[]
  }

  /**
   * Watchlist without action
   */
  export type WatchlistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
  }


  /**
   * Model WatchlistItem
   */

  export type AggregateWatchlistItem = {
    _count: WatchlistItemCountAggregateOutputType | null
    _avg: WatchlistItemAvgAggregateOutputType | null
    _sum: WatchlistItemSumAggregateOutputType | null
    _min: WatchlistItemMinAggregateOutputType | null
    _max: WatchlistItemMaxAggregateOutputType | null
  }

  export type WatchlistItemAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type WatchlistItemSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type WatchlistItemMinAggregateOutputType = {
    id: string | null
    watchlistId: string | null
    instrumentId: string | null
    sortOrder: number | null
    addedAt: Date | null
  }

  export type WatchlistItemMaxAggregateOutputType = {
    id: string | null
    watchlistId: string | null
    instrumentId: string | null
    sortOrder: number | null
    addedAt: Date | null
  }

  export type WatchlistItemCountAggregateOutputType = {
    id: number
    watchlistId: number
    instrumentId: number
    sortOrder: number
    addedAt: number
    _all: number
  }


  export type WatchlistItemAvgAggregateInputType = {
    sortOrder?: true
  }

  export type WatchlistItemSumAggregateInputType = {
    sortOrder?: true
  }

  export type WatchlistItemMinAggregateInputType = {
    id?: true
    watchlistId?: true
    instrumentId?: true
    sortOrder?: true
    addedAt?: true
  }

  export type WatchlistItemMaxAggregateInputType = {
    id?: true
    watchlistId?: true
    instrumentId?: true
    sortOrder?: true
    addedAt?: true
  }

  export type WatchlistItemCountAggregateInputType = {
    id?: true
    watchlistId?: true
    instrumentId?: true
    sortOrder?: true
    addedAt?: true
    _all?: true
  }

  export type WatchlistItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchlistItem to aggregate.
     */
    where?: WatchlistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchlistItems to fetch.
     */
    orderBy?: WatchlistItemOrderByWithRelationInput | WatchlistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchlistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchlistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchlistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WatchlistItems
    **/
    _count?: true | WatchlistItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WatchlistItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WatchlistItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchlistItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchlistItemMaxAggregateInputType
  }

  export type GetWatchlistItemAggregateType<T extends WatchlistItemAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchlistItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchlistItem[P]>
      : GetScalarType<T[P], AggregateWatchlistItem[P]>
  }




  export type WatchlistItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistItemWhereInput
    orderBy?: WatchlistItemOrderByWithAggregationInput | WatchlistItemOrderByWithAggregationInput[]
    by: WatchlistItemScalarFieldEnum[] | WatchlistItemScalarFieldEnum
    having?: WatchlistItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchlistItemCountAggregateInputType | true
    _avg?: WatchlistItemAvgAggregateInputType
    _sum?: WatchlistItemSumAggregateInputType
    _min?: WatchlistItemMinAggregateInputType
    _max?: WatchlistItemMaxAggregateInputType
  }

  export type WatchlistItemGroupByOutputType = {
    id: string
    watchlistId: string
    instrumentId: string
    sortOrder: number
    addedAt: Date
    _count: WatchlistItemCountAggregateOutputType | null
    _avg: WatchlistItemAvgAggregateOutputType | null
    _sum: WatchlistItemSumAggregateOutputType | null
    _min: WatchlistItemMinAggregateOutputType | null
    _max: WatchlistItemMaxAggregateOutputType | null
  }

  type GetWatchlistItemGroupByPayload<T extends WatchlistItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchlistItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchlistItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchlistItemGroupByOutputType[P]>
            : GetScalarType<T[P], WatchlistItemGroupByOutputType[P]>
        }
      >
    >


  export type WatchlistItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    watchlistId?: boolean
    instrumentId?: boolean
    sortOrder?: boolean
    addedAt?: boolean
    watchlist?: boolean | WatchlistDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlistItem"]>

  export type WatchlistItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    watchlistId?: boolean
    instrumentId?: boolean
    sortOrder?: boolean
    addedAt?: boolean
    watchlist?: boolean | WatchlistDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlistItem"]>

  export type WatchlistItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    watchlistId?: boolean
    instrumentId?: boolean
    sortOrder?: boolean
    addedAt?: boolean
    watchlist?: boolean | WatchlistDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlistItem"]>

  export type WatchlistItemSelectScalar = {
    id?: boolean
    watchlistId?: boolean
    instrumentId?: boolean
    sortOrder?: boolean
    addedAt?: boolean
  }

  export type WatchlistItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "watchlistId" | "instrumentId" | "sortOrder" | "addedAt", ExtArgs["result"]["watchlistItem"]>
  export type WatchlistItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    watchlist?: boolean | WatchlistDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type WatchlistItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    watchlist?: boolean | WatchlistDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }
  export type WatchlistItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    watchlist?: boolean | WatchlistDefaultArgs<ExtArgs>
    instrument?: boolean | InstrumentDefaultArgs<ExtArgs>
  }

  export type $WatchlistItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WatchlistItem"
    objects: {
      watchlist: Prisma.$WatchlistPayload<ExtArgs>
      instrument: Prisma.$InstrumentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      watchlistId: string
      instrumentId: string
      sortOrder: number
      addedAt: Date
    }, ExtArgs["result"]["watchlistItem"]>
    composites: {}
  }

  type WatchlistItemGetPayload<S extends boolean | null | undefined | WatchlistItemDefaultArgs> = $Result.GetResult<Prisma.$WatchlistItemPayload, S>

  type WatchlistItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WatchlistItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WatchlistItemCountAggregateInputType | true
    }

  export interface WatchlistItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WatchlistItem'], meta: { name: 'WatchlistItem' } }
    /**
     * Find zero or one WatchlistItem that matches the filter.
     * @param {WatchlistItemFindUniqueArgs} args - Arguments to find a WatchlistItem
     * @example
     * // Get one WatchlistItem
     * const watchlistItem = await prisma.watchlistItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WatchlistItemFindUniqueArgs>(args: SelectSubset<T, WatchlistItemFindUniqueArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WatchlistItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WatchlistItemFindUniqueOrThrowArgs} args - Arguments to find a WatchlistItem
     * @example
     * // Get one WatchlistItem
     * const watchlistItem = await prisma.watchlistItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WatchlistItemFindUniqueOrThrowArgs>(args: SelectSubset<T, WatchlistItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WatchlistItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistItemFindFirstArgs} args - Arguments to find a WatchlistItem
     * @example
     * // Get one WatchlistItem
     * const watchlistItem = await prisma.watchlistItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WatchlistItemFindFirstArgs>(args?: SelectSubset<T, WatchlistItemFindFirstArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WatchlistItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistItemFindFirstOrThrowArgs} args - Arguments to find a WatchlistItem
     * @example
     * // Get one WatchlistItem
     * const watchlistItem = await prisma.watchlistItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WatchlistItemFindFirstOrThrowArgs>(args?: SelectSubset<T, WatchlistItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WatchlistItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WatchlistItems
     * const watchlistItems = await prisma.watchlistItem.findMany()
     * 
     * // Get first 10 WatchlistItems
     * const watchlistItems = await prisma.watchlistItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchlistItemWithIdOnly = await prisma.watchlistItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WatchlistItemFindManyArgs>(args?: SelectSubset<T, WatchlistItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WatchlistItem.
     * @param {WatchlistItemCreateArgs} args - Arguments to create a WatchlistItem.
     * @example
     * // Create one WatchlistItem
     * const WatchlistItem = await prisma.watchlistItem.create({
     *   data: {
     *     // ... data to create a WatchlistItem
     *   }
     * })
     * 
     */
    create<T extends WatchlistItemCreateArgs>(args: SelectSubset<T, WatchlistItemCreateArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WatchlistItems.
     * @param {WatchlistItemCreateManyArgs} args - Arguments to create many WatchlistItems.
     * @example
     * // Create many WatchlistItems
     * const watchlistItem = await prisma.watchlistItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WatchlistItemCreateManyArgs>(args?: SelectSubset<T, WatchlistItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WatchlistItems and returns the data saved in the database.
     * @param {WatchlistItemCreateManyAndReturnArgs} args - Arguments to create many WatchlistItems.
     * @example
     * // Create many WatchlistItems
     * const watchlistItem = await prisma.watchlistItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WatchlistItems and only return the `id`
     * const watchlistItemWithIdOnly = await prisma.watchlistItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WatchlistItemCreateManyAndReturnArgs>(args?: SelectSubset<T, WatchlistItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WatchlistItem.
     * @param {WatchlistItemDeleteArgs} args - Arguments to delete one WatchlistItem.
     * @example
     * // Delete one WatchlistItem
     * const WatchlistItem = await prisma.watchlistItem.delete({
     *   where: {
     *     // ... filter to delete one WatchlistItem
     *   }
     * })
     * 
     */
    delete<T extends WatchlistItemDeleteArgs>(args: SelectSubset<T, WatchlistItemDeleteArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WatchlistItem.
     * @param {WatchlistItemUpdateArgs} args - Arguments to update one WatchlistItem.
     * @example
     * // Update one WatchlistItem
     * const watchlistItem = await prisma.watchlistItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WatchlistItemUpdateArgs>(args: SelectSubset<T, WatchlistItemUpdateArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WatchlistItems.
     * @param {WatchlistItemDeleteManyArgs} args - Arguments to filter WatchlistItems to delete.
     * @example
     * // Delete a few WatchlistItems
     * const { count } = await prisma.watchlistItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WatchlistItemDeleteManyArgs>(args?: SelectSubset<T, WatchlistItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WatchlistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WatchlistItems
     * const watchlistItem = await prisma.watchlistItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WatchlistItemUpdateManyArgs>(args: SelectSubset<T, WatchlistItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WatchlistItems and returns the data updated in the database.
     * @param {WatchlistItemUpdateManyAndReturnArgs} args - Arguments to update many WatchlistItems.
     * @example
     * // Update many WatchlistItems
     * const watchlistItem = await prisma.watchlistItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WatchlistItems and only return the `id`
     * const watchlistItemWithIdOnly = await prisma.watchlistItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WatchlistItemUpdateManyAndReturnArgs>(args: SelectSubset<T, WatchlistItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WatchlistItem.
     * @param {WatchlistItemUpsertArgs} args - Arguments to update or create a WatchlistItem.
     * @example
     * // Update or create a WatchlistItem
     * const watchlistItem = await prisma.watchlistItem.upsert({
     *   create: {
     *     // ... data to create a WatchlistItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WatchlistItem we want to update
     *   }
     * })
     */
    upsert<T extends WatchlistItemUpsertArgs>(args: SelectSubset<T, WatchlistItemUpsertArgs<ExtArgs>>): Prisma__WatchlistItemClient<$Result.GetResult<Prisma.$WatchlistItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WatchlistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistItemCountArgs} args - Arguments to filter WatchlistItems to count.
     * @example
     * // Count the number of WatchlistItems
     * const count = await prisma.watchlistItem.count({
     *   where: {
     *     // ... the filter for the WatchlistItems we want to count
     *   }
     * })
    **/
    count<T extends WatchlistItemCountArgs>(
      args?: Subset<T, WatchlistItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchlistItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WatchlistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchlistItemAggregateArgs>(args: Subset<T, WatchlistItemAggregateArgs>): Prisma.PrismaPromise<GetWatchlistItemAggregateType<T>>

    /**
     * Group by WatchlistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchlistItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchlistItemGroupByArgs['orderBy'] }
        : { orderBy?: WatchlistItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchlistItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchlistItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WatchlistItem model
   */
  readonly fields: WatchlistItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WatchlistItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchlistItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    watchlist<T extends WatchlistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WatchlistDefaultArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    instrument<T extends InstrumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstrumentDefaultArgs<ExtArgs>>): Prisma__InstrumentClient<$Result.GetResult<Prisma.$InstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WatchlistItem model
   */
  interface WatchlistItemFieldRefs {
    readonly id: FieldRef<"WatchlistItem", 'String'>
    readonly watchlistId: FieldRef<"WatchlistItem", 'String'>
    readonly instrumentId: FieldRef<"WatchlistItem", 'String'>
    readonly sortOrder: FieldRef<"WatchlistItem", 'Int'>
    readonly addedAt: FieldRef<"WatchlistItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WatchlistItem findUnique
   */
  export type WatchlistItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * Filter, which WatchlistItem to fetch.
     */
    where: WatchlistItemWhereUniqueInput
  }

  /**
   * WatchlistItem findUniqueOrThrow
   */
  export type WatchlistItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * Filter, which WatchlistItem to fetch.
     */
    where: WatchlistItemWhereUniqueInput
  }

  /**
   * WatchlistItem findFirst
   */
  export type WatchlistItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * Filter, which WatchlistItem to fetch.
     */
    where?: WatchlistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchlistItems to fetch.
     */
    orderBy?: WatchlistItemOrderByWithRelationInput | WatchlistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchlistItems.
     */
    cursor?: WatchlistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchlistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchlistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchlistItems.
     */
    distinct?: WatchlistItemScalarFieldEnum | WatchlistItemScalarFieldEnum[]
  }

  /**
   * WatchlistItem findFirstOrThrow
   */
  export type WatchlistItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * Filter, which WatchlistItem to fetch.
     */
    where?: WatchlistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchlistItems to fetch.
     */
    orderBy?: WatchlistItemOrderByWithRelationInput | WatchlistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchlistItems.
     */
    cursor?: WatchlistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchlistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchlistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchlistItems.
     */
    distinct?: WatchlistItemScalarFieldEnum | WatchlistItemScalarFieldEnum[]
  }

  /**
   * WatchlistItem findMany
   */
  export type WatchlistItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * Filter, which WatchlistItems to fetch.
     */
    where?: WatchlistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchlistItems to fetch.
     */
    orderBy?: WatchlistItemOrderByWithRelationInput | WatchlistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WatchlistItems.
     */
    cursor?: WatchlistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchlistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchlistItems.
     */
    skip?: number
    distinct?: WatchlistItemScalarFieldEnum | WatchlistItemScalarFieldEnum[]
  }

  /**
   * WatchlistItem create
   */
  export type WatchlistItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * The data needed to create a WatchlistItem.
     */
    data: XOR<WatchlistItemCreateInput, WatchlistItemUncheckedCreateInput>
  }

  /**
   * WatchlistItem createMany
   */
  export type WatchlistItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WatchlistItems.
     */
    data: WatchlistItemCreateManyInput | WatchlistItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WatchlistItem createManyAndReturn
   */
  export type WatchlistItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * The data used to create many WatchlistItems.
     */
    data: WatchlistItemCreateManyInput | WatchlistItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WatchlistItem update
   */
  export type WatchlistItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * The data needed to update a WatchlistItem.
     */
    data: XOR<WatchlistItemUpdateInput, WatchlistItemUncheckedUpdateInput>
    /**
     * Choose, which WatchlistItem to update.
     */
    where: WatchlistItemWhereUniqueInput
  }

  /**
   * WatchlistItem updateMany
   */
  export type WatchlistItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WatchlistItems.
     */
    data: XOR<WatchlistItemUpdateManyMutationInput, WatchlistItemUncheckedUpdateManyInput>
    /**
     * Filter which WatchlistItems to update
     */
    where?: WatchlistItemWhereInput
    /**
     * Limit how many WatchlistItems to update.
     */
    limit?: number
  }

  /**
   * WatchlistItem updateManyAndReturn
   */
  export type WatchlistItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * The data used to update WatchlistItems.
     */
    data: XOR<WatchlistItemUpdateManyMutationInput, WatchlistItemUncheckedUpdateManyInput>
    /**
     * Filter which WatchlistItems to update
     */
    where?: WatchlistItemWhereInput
    /**
     * Limit how many WatchlistItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WatchlistItem upsert
   */
  export type WatchlistItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * The filter to search for the WatchlistItem to update in case it exists.
     */
    where: WatchlistItemWhereUniqueInput
    /**
     * In case the WatchlistItem found by the `where` argument doesn't exist, create a new WatchlistItem with this data.
     */
    create: XOR<WatchlistItemCreateInput, WatchlistItemUncheckedCreateInput>
    /**
     * In case the WatchlistItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchlistItemUpdateInput, WatchlistItemUncheckedUpdateInput>
  }

  /**
   * WatchlistItem delete
   */
  export type WatchlistItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
    /**
     * Filter which WatchlistItem to delete.
     */
    where: WatchlistItemWhereUniqueInput
  }

  /**
   * WatchlistItem deleteMany
   */
  export type WatchlistItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchlistItems to delete
     */
    where?: WatchlistItemWhereInput
    /**
     * Limit how many WatchlistItems to delete.
     */
    limit?: number
  }

  /**
   * WatchlistItem without action
   */
  export type WatchlistItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistItem
     */
    select?: WatchlistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchlistItem
     */
    omit?: WatchlistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistItemInclude<ExtArgs> | null
  }


  /**
   * Model Alert
   */

  export type AggregateAlert = {
    _count: AlertCountAggregateOutputType | null
    _avg: AlertAvgAggregateOutputType | null
    _sum: AlertSumAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  export type AlertAvgAggregateOutputType = {
    triggerPrice: number | null
  }

  export type AlertSumAggregateOutputType = {
    triggerPrice: number | null
  }

  export type AlertMinAggregateOutputType = {
    id: string | null
    userId: string | null
    instrumentId: string | null
    alertType: $Enums.AlertType | null
    message: string | null
    triggerPrice: number | null
    condition: string | null
    isTriggered: boolean | null
    isRead: boolean | null
    triggeredAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type AlertMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    instrumentId: string | null
    alertType: $Enums.AlertType | null
    message: string | null
    triggerPrice: number | null
    condition: string | null
    isTriggered: boolean | null
    isRead: boolean | null
    triggeredAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type AlertCountAggregateOutputType = {
    id: number
    userId: number
    instrumentId: number
    alertType: number
    message: number
    triggerPrice: number
    condition: number
    isTriggered: number
    isRead: number
    triggeredAt: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type AlertAvgAggregateInputType = {
    triggerPrice?: true
  }

  export type AlertSumAggregateInputType = {
    triggerPrice?: true
  }

  export type AlertMinAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    alertType?: true
    message?: true
    triggerPrice?: true
    condition?: true
    isTriggered?: true
    isRead?: true
    triggeredAt?: true
    expiresAt?: true
    createdAt?: true
  }

  export type AlertMaxAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    alertType?: true
    message?: true
    triggerPrice?: true
    condition?: true
    isTriggered?: true
    isRead?: true
    triggeredAt?: true
    expiresAt?: true
    createdAt?: true
  }

  export type AlertCountAggregateInputType = {
    id?: true
    userId?: true
    instrumentId?: true
    alertType?: true
    message?: true
    triggerPrice?: true
    condition?: true
    isTriggered?: true
    isRead?: true
    triggeredAt?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type AlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alert to aggregate.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alerts
    **/
    _count?: true | AlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlertAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlertSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertMaxAggregateInputType
  }

  export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert[P]>
      : GetScalarType<T[P], AggregateAlert[P]>
  }




  export type AlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithAggregationInput | AlertOrderByWithAggregationInput[]
    by: AlertScalarFieldEnum[] | AlertScalarFieldEnum
    having?: AlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertCountAggregateInputType | true
    _avg?: AlertAvgAggregateInputType
    _sum?: AlertSumAggregateInputType
    _min?: AlertMinAggregateInputType
    _max?: AlertMaxAggregateInputType
  }

  export type AlertGroupByOutputType = {
    id: string
    userId: string
    instrumentId: string | null
    alertType: $Enums.AlertType
    message: string
    triggerPrice: number | null
    condition: string | null
    isTriggered: boolean
    isRead: boolean
    triggeredAt: Date | null
    expiresAt: Date | null
    createdAt: Date
    _count: AlertCountAggregateOutputType | null
    _avg: AlertAvgAggregateOutputType | null
    _sum: AlertSumAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  type GetAlertGroupByPayload<T extends AlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertGroupByOutputType[P]>
            : GetScalarType<T[P], AlertGroupByOutputType[P]>
        }
      >
    >


  export type AlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    alertType?: boolean
    message?: boolean
    triggerPrice?: boolean
    condition?: boolean
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    alertType?: boolean
    message?: boolean
    triggerPrice?: boolean
    condition?: boolean
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    alertType?: boolean
    message?: boolean
    triggerPrice?: boolean
    condition?: boolean
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectScalar = {
    id?: boolean
    userId?: boolean
    instrumentId?: boolean
    alertType?: boolean
    message?: boolean
    triggerPrice?: boolean
    condition?: boolean
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type AlertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "instrumentId" | "alertType" | "message" | "triggerPrice" | "condition" | "isTriggered" | "isRead" | "triggeredAt" | "expiresAt" | "createdAt", ExtArgs["result"]["alert"]>
  export type AlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AlertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AlertIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alert"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      instrumentId: string | null
      alertType: $Enums.AlertType
      message: string
      triggerPrice: number | null
      condition: string | null
      isTriggered: boolean
      isRead: boolean
      triggeredAt: Date | null
      expiresAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["alert"]>
    composites: {}
  }

  type AlertGetPayload<S extends boolean | null | undefined | AlertDefaultArgs> = $Result.GetResult<Prisma.$AlertPayload, S>

  type AlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlertCountAggregateInputType | true
    }

  export interface AlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alert'], meta: { name: 'Alert' } }
    /**
     * Find zero or one Alert that matches the filter.
     * @param {AlertFindUniqueArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertFindUniqueArgs>(args: SelectSubset<T, AlertFindUniqueArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlertFindUniqueOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertFindFirstArgs>(args?: SelectSubset<T, AlertFindFirstArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alerts
     * const alerts = await prisma.alert.findMany()
     * 
     * // Get first 10 Alerts
     * const alerts = await prisma.alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertFindManyArgs>(args?: SelectSubset<T, AlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alert.
     * @param {AlertCreateArgs} args - Arguments to create a Alert.
     * @example
     * // Create one Alert
     * const Alert = await prisma.alert.create({
     *   data: {
     *     // ... data to create a Alert
     *   }
     * })
     * 
     */
    create<T extends AlertCreateArgs>(args: SelectSubset<T, AlertCreateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alerts.
     * @param {AlertCreateManyArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertCreateManyArgs>(args?: SelectSubset<T, AlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alerts and returns the data saved in the database.
     * @param {AlertCreateManyAndReturnArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alerts and only return the `id`
     * const alertWithIdOnly = await prisma.alert.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Alert.
     * @param {AlertDeleteArgs} args - Arguments to delete one Alert.
     * @example
     * // Delete one Alert
     * const Alert = await prisma.alert.delete({
     *   where: {
     *     // ... filter to delete one Alert
     *   }
     * })
     * 
     */
    delete<T extends AlertDeleteArgs>(args: SelectSubset<T, AlertDeleteArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alert.
     * @param {AlertUpdateArgs} args - Arguments to update one Alert.
     * @example
     * // Update one Alert
     * const alert = await prisma.alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertUpdateArgs>(args: SelectSubset<T, AlertUpdateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alerts.
     * @param {AlertDeleteManyArgs} args - Arguments to filter Alerts to delete.
     * @example
     * // Delete a few Alerts
     * const { count } = await prisma.alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertDeleteManyArgs>(args?: SelectSubset<T, AlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertUpdateManyArgs>(args: SelectSubset<T, AlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts and returns the data updated in the database.
     * @param {AlertUpdateManyAndReturnArgs} args - Arguments to update many Alerts.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alerts and only return the `id`
     * const alertWithIdOnly = await prisma.alert.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlertUpdateManyAndReturnArgs>(args: SelectSubset<T, AlertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Alert.
     * @param {AlertUpsertArgs} args - Arguments to update or create a Alert.
     * @example
     * // Update or create a Alert
     * const alert = await prisma.alert.upsert({
     *   create: {
     *     // ... data to create a Alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert we want to update
     *   }
     * })
     */
    upsert<T extends AlertUpsertArgs>(args: SelectSubset<T, AlertUpsertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertCountArgs} args - Arguments to filter Alerts to count.
     * @example
     * // Count the number of Alerts
     * const count = await prisma.alert.count({
     *   where: {
     *     // ... the filter for the Alerts we want to count
     *   }
     * })
    **/
    count<T extends AlertCountArgs>(
      args?: Subset<T, AlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertAggregateArgs>(args: Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

    /**
     * Group by Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertGroupByArgs['orderBy'] }
        : { orderBy?: AlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alert model
   */
  readonly fields: AlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alert model
   */
  interface AlertFieldRefs {
    readonly id: FieldRef<"Alert", 'String'>
    readonly userId: FieldRef<"Alert", 'String'>
    readonly instrumentId: FieldRef<"Alert", 'String'>
    readonly alertType: FieldRef<"Alert", 'AlertType'>
    readonly message: FieldRef<"Alert", 'String'>
    readonly triggerPrice: FieldRef<"Alert", 'Float'>
    readonly condition: FieldRef<"Alert", 'String'>
    readonly isTriggered: FieldRef<"Alert", 'Boolean'>
    readonly isRead: FieldRef<"Alert", 'Boolean'>
    readonly triggeredAt: FieldRef<"Alert", 'DateTime'>
    readonly expiresAt: FieldRef<"Alert", 'DateTime'>
    readonly createdAt: FieldRef<"Alert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alert findUnique
   */
  export type AlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findUniqueOrThrow
   */
  export type AlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findFirst
   */
  export type AlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findFirstOrThrow
   */
  export type AlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findMany
   */
  export type AlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alerts to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert create
   */
  export type AlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to create a Alert.
     */
    data: XOR<AlertCreateInput, AlertUncheckedCreateInput>
  }

  /**
   * Alert createMany
   */
  export type AlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alert createManyAndReturn
   */
  export type AlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alert update
   */
  export type AlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to update a Alert.
     */
    data: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
    /**
     * Choose, which Alert to update.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert updateMany
   */
  export type AlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to update.
     */
    limit?: number
  }

  /**
   * Alert updateManyAndReturn
   */
  export type AlertUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alert upsert
   */
  export type AlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The filter to search for the Alert to update in case it exists.
     */
    where: AlertWhereUniqueInput
    /**
     * In case the Alert found by the `where` argument doesn't exist, create a new Alert with this data.
     */
    create: XOR<AlertCreateInput, AlertUncheckedCreateInput>
    /**
     * In case the Alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
  }

  /**
   * Alert delete
   */
  export type AlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter which Alert to delete.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert deleteMany
   */
  export type AlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerts to delete
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to delete.
     */
    limit?: number
  }

  /**
   * Alert without action
   */
  export type AlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationType: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    priority: $Enums.Priority | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    notificationType: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    priority: $Enums.Priority | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    notificationType: number
    title: number
    message: number
    isRead: number
    priority: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    notificationType?: true
    title?: true
    message?: true
    isRead?: true
    priority?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    notificationType?: true
    title?: true
    message?: true
    isRead?: true
    priority?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    notificationType?: true
    title?: true
    message?: true
    isRead?: true
    priority?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead: boolean
    priority: $Enums.Priority
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    priority?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    priority?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    priority?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    notificationType?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    priority?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "notificationType" | "title" | "message" | "isRead" | "priority" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      notificationType: $Enums.NotificationType
      title: string
      message: string
      isRead: boolean
      priority: $Enums.Priority
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly notificationType: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly priority: FieldRef<"Notification", 'Priority'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Basket
   */

  export type AggregateBasket = {
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  export type BasketAvgAggregateOutputType = {
    totalValue: number | null
  }

  export type BasketSumAggregateOutputType = {
    totalValue: number | null
  }

  export type BasketMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    totalValue: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BasketMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    description: string | null
    totalValue: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BasketCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    description: number
    totalValue: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BasketAvgAggregateInputType = {
    totalValue?: true
  }

  export type BasketSumAggregateInputType = {
    totalValue?: true
  }

  export type BasketMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    totalValue?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BasketMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    totalValue?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BasketCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    description?: true
    totalValue?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BasketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Basket to aggregate.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baskets
    **/
    _count?: true | BasketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BasketAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BasketSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BasketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BasketMaxAggregateInputType
  }

  export type GetBasketAggregateType<T extends BasketAggregateArgs> = {
        [P in keyof T & keyof AggregateBasket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBasket[P]>
      : GetScalarType<T[P], AggregateBasket[P]>
  }




  export type BasketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketWhereInput
    orderBy?: BasketOrderByWithAggregationInput | BasketOrderByWithAggregationInput[]
    by: BasketScalarFieldEnum[] | BasketScalarFieldEnum
    having?: BasketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BasketCountAggregateInputType | true
    _avg?: BasketAvgAggregateInputType
    _sum?: BasketSumAggregateInputType
    _min?: BasketMinAggregateInputType
    _max?: BasketMaxAggregateInputType
  }

  export type BasketGroupByOutputType = {
    id: string
    userId: string
    name: string
    description: string | null
    totalValue: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: BasketCountAggregateOutputType | null
    _avg: BasketAvgAggregateOutputType | null
    _sum: BasketSumAggregateOutputType | null
    _min: BasketMinAggregateOutputType | null
    _max: BasketMaxAggregateOutputType | null
  }

  type GetBasketGroupByPayload<T extends BasketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BasketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BasketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BasketGroupByOutputType[P]>
            : GetScalarType<T[P], BasketGroupByOutputType[P]>
        }
      >
    >


  export type BasketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalValue?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Basket$itemsArgs<ExtArgs>
    _count?: boolean | BasketCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalValue?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalValue?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basket"]>

  export type BasketSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    description?: boolean
    totalValue?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BasketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "description" | "totalValue" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["basket"]>
  export type BasketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Basket$itemsArgs<ExtArgs>
    _count?: boolean | BasketCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BasketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BasketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BasketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Basket"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$BasketItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      description: string | null
      totalValue: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["basket"]>
    composites: {}
  }

  type BasketGetPayload<S extends boolean | null | undefined | BasketDefaultArgs> = $Result.GetResult<Prisma.$BasketPayload, S>

  type BasketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BasketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BasketCountAggregateInputType | true
    }

  export interface BasketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Basket'], meta: { name: 'Basket' } }
    /**
     * Find zero or one Basket that matches the filter.
     * @param {BasketFindUniqueArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BasketFindUniqueArgs>(args: SelectSubset<T, BasketFindUniqueArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Basket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BasketFindUniqueOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BasketFindUniqueOrThrowArgs>(args: SelectSubset<T, BasketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BasketFindFirstArgs>(args?: SelectSubset<T, BasketFindFirstArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Basket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindFirstOrThrowArgs} args - Arguments to find a Basket
     * @example
     * // Get one Basket
     * const basket = await prisma.basket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BasketFindFirstOrThrowArgs>(args?: SelectSubset<T, BasketFindFirstOrThrowArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Baskets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baskets
     * const baskets = await prisma.basket.findMany()
     * 
     * // Get first 10 Baskets
     * const baskets = await prisma.basket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const basketWithIdOnly = await prisma.basket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BasketFindManyArgs>(args?: SelectSubset<T, BasketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Basket.
     * @param {BasketCreateArgs} args - Arguments to create a Basket.
     * @example
     * // Create one Basket
     * const Basket = await prisma.basket.create({
     *   data: {
     *     // ... data to create a Basket
     *   }
     * })
     * 
     */
    create<T extends BasketCreateArgs>(args: SelectSubset<T, BasketCreateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Baskets.
     * @param {BasketCreateManyArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BasketCreateManyArgs>(args?: SelectSubset<T, BasketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Baskets and returns the data saved in the database.
     * @param {BasketCreateManyAndReturnArgs} args - Arguments to create many Baskets.
     * @example
     * // Create many Baskets
     * const basket = await prisma.basket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BasketCreateManyAndReturnArgs>(args?: SelectSubset<T, BasketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Basket.
     * @param {BasketDeleteArgs} args - Arguments to delete one Basket.
     * @example
     * // Delete one Basket
     * const Basket = await prisma.basket.delete({
     *   where: {
     *     // ... filter to delete one Basket
     *   }
     * })
     * 
     */
    delete<T extends BasketDeleteArgs>(args: SelectSubset<T, BasketDeleteArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Basket.
     * @param {BasketUpdateArgs} args - Arguments to update one Basket.
     * @example
     * // Update one Basket
     * const basket = await prisma.basket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BasketUpdateArgs>(args: SelectSubset<T, BasketUpdateArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Baskets.
     * @param {BasketDeleteManyArgs} args - Arguments to filter Baskets to delete.
     * @example
     * // Delete a few Baskets
     * const { count } = await prisma.basket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BasketDeleteManyArgs>(args?: SelectSubset<T, BasketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BasketUpdateManyArgs>(args: SelectSubset<T, BasketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baskets and returns the data updated in the database.
     * @param {BasketUpdateManyAndReturnArgs} args - Arguments to update many Baskets.
     * @example
     * // Update many Baskets
     * const basket = await prisma.basket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Baskets and only return the `id`
     * const basketWithIdOnly = await prisma.basket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BasketUpdateManyAndReturnArgs>(args: SelectSubset<T, BasketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Basket.
     * @param {BasketUpsertArgs} args - Arguments to update or create a Basket.
     * @example
     * // Update or create a Basket
     * const basket = await prisma.basket.upsert({
     *   create: {
     *     // ... data to create a Basket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Basket we want to update
     *   }
     * })
     */
    upsert<T extends BasketUpsertArgs>(args: SelectSubset<T, BasketUpsertArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Baskets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketCountArgs} args - Arguments to filter Baskets to count.
     * @example
     * // Count the number of Baskets
     * const count = await prisma.basket.count({
     *   where: {
     *     // ... the filter for the Baskets we want to count
     *   }
     * })
    **/
    count<T extends BasketCountArgs>(
      args?: Subset<T, BasketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BasketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BasketAggregateArgs>(args: Subset<T, BasketAggregateArgs>): Prisma.PrismaPromise<GetBasketAggregateType<T>>

    /**
     * Group by Basket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BasketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BasketGroupByArgs['orderBy'] }
        : { orderBy?: BasketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BasketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Basket model
   */
  readonly fields: BasketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Basket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BasketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    items<T extends Basket$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Basket$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Basket model
   */
  interface BasketFieldRefs {
    readonly id: FieldRef<"Basket", 'String'>
    readonly userId: FieldRef<"Basket", 'String'>
    readonly name: FieldRef<"Basket", 'String'>
    readonly description: FieldRef<"Basket", 'String'>
    readonly totalValue: FieldRef<"Basket", 'Float'>
    readonly isActive: FieldRef<"Basket", 'Boolean'>
    readonly createdAt: FieldRef<"Basket", 'DateTime'>
    readonly updatedAt: FieldRef<"Basket", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Basket findUnique
   */
  export type BasketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findUniqueOrThrow
   */
  export type BasketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket findFirst
   */
  export type BasketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findFirstOrThrow
   */
  export type BasketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Basket to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baskets.
     */
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket findMany
   */
  export type BasketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter, which Baskets to fetch.
     */
    where?: BasketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baskets to fetch.
     */
    orderBy?: BasketOrderByWithRelationInput | BasketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baskets.
     */
    cursor?: BasketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baskets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baskets.
     */
    skip?: number
    distinct?: BasketScalarFieldEnum | BasketScalarFieldEnum[]
  }

  /**
   * Basket create
   */
  export type BasketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to create a Basket.
     */
    data: XOR<BasketCreateInput, BasketUncheckedCreateInput>
  }

  /**
   * Basket createMany
   */
  export type BasketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Basket createManyAndReturn
   */
  export type BasketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to create many Baskets.
     */
    data: BasketCreateManyInput | BasketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket update
   */
  export type BasketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The data needed to update a Basket.
     */
    data: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
    /**
     * Choose, which Basket to update.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket updateMany
   */
  export type BasketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
  }

  /**
   * Basket updateManyAndReturn
   */
  export type BasketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * The data used to update Baskets.
     */
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyInput>
    /**
     * Filter which Baskets to update
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Basket upsert
   */
  export type BasketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * The filter to search for the Basket to update in case it exists.
     */
    where: BasketWhereUniqueInput
    /**
     * In case the Basket found by the `where` argument doesn't exist, create a new Basket with this data.
     */
    create: XOR<BasketCreateInput, BasketUncheckedCreateInput>
    /**
     * In case the Basket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BasketUpdateInput, BasketUncheckedUpdateInput>
  }

  /**
   * Basket delete
   */
  export type BasketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
    /**
     * Filter which Basket to delete.
     */
    where: BasketWhereUniqueInput
  }

  /**
   * Basket deleteMany
   */
  export type BasketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baskets to delete
     */
    where?: BasketWhereInput
    /**
     * Limit how many Baskets to delete.
     */
    limit?: number
  }

  /**
   * Basket.items
   */
  export type Basket$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    where?: BasketItemWhereInput
    orderBy?: BasketItemOrderByWithRelationInput | BasketItemOrderByWithRelationInput[]
    cursor?: BasketItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BasketItemScalarFieldEnum | BasketItemScalarFieldEnum[]
  }

  /**
   * Basket without action
   */
  export type BasketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Basket
     */
    select?: BasketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Basket
     */
    omit?: BasketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketInclude<ExtArgs> | null
  }


  /**
   * Model BasketItem
   */

  export type AggregateBasketItem = {
    _count: BasketItemCountAggregateOutputType | null
    _avg: BasketItemAvgAggregateOutputType | null
    _sum: BasketItemSumAggregateOutputType | null
    _min: BasketItemMinAggregateOutputType | null
    _max: BasketItemMaxAggregateOutputType | null
  }

  export type BasketItemAvgAggregateOutputType = {
    quantity: number | null
    price: number | null
    triggerPrice: number | null
    sortOrder: number | null
  }

  export type BasketItemSumAggregateOutputType = {
    quantity: number | null
    price: number | null
    triggerPrice: number | null
    sortOrder: number | null
  }

  export type BasketItemMinAggregateOutputType = {
    id: string | null
    basketId: string | null
    instrumentId: string | null
    tradingSymbol: string | null
    exchange: $Enums.Exchange | null
    transactionType: $Enums.TransactionType | null
    quantity: number | null
    orderType: $Enums.OrderType | null
    price: number | null
    triggerPrice: number | null
    product: $Enums.ProductType | null
    sortOrder: number | null
  }

  export type BasketItemMaxAggregateOutputType = {
    id: string | null
    basketId: string | null
    instrumentId: string | null
    tradingSymbol: string | null
    exchange: $Enums.Exchange | null
    transactionType: $Enums.TransactionType | null
    quantity: number | null
    orderType: $Enums.OrderType | null
    price: number | null
    triggerPrice: number | null
    product: $Enums.ProductType | null
    sortOrder: number | null
  }

  export type BasketItemCountAggregateOutputType = {
    id: number
    basketId: number
    instrumentId: number
    tradingSymbol: number
    exchange: number
    transactionType: number
    quantity: number
    orderType: number
    price: number
    triggerPrice: number
    product: number
    sortOrder: number
    _all: number
  }


  export type BasketItemAvgAggregateInputType = {
    quantity?: true
    price?: true
    triggerPrice?: true
    sortOrder?: true
  }

  export type BasketItemSumAggregateInputType = {
    quantity?: true
    price?: true
    triggerPrice?: true
    sortOrder?: true
  }

  export type BasketItemMinAggregateInputType = {
    id?: true
    basketId?: true
    instrumentId?: true
    tradingSymbol?: true
    exchange?: true
    transactionType?: true
    quantity?: true
    orderType?: true
    price?: true
    triggerPrice?: true
    product?: true
    sortOrder?: true
  }

  export type BasketItemMaxAggregateInputType = {
    id?: true
    basketId?: true
    instrumentId?: true
    tradingSymbol?: true
    exchange?: true
    transactionType?: true
    quantity?: true
    orderType?: true
    price?: true
    triggerPrice?: true
    product?: true
    sortOrder?: true
  }

  export type BasketItemCountAggregateInputType = {
    id?: true
    basketId?: true
    instrumentId?: true
    tradingSymbol?: true
    exchange?: true
    transactionType?: true
    quantity?: true
    orderType?: true
    price?: true
    triggerPrice?: true
    product?: true
    sortOrder?: true
    _all?: true
  }

  export type BasketItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BasketItem to aggregate.
     */
    where?: BasketItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketItems to fetch.
     */
    orderBy?: BasketItemOrderByWithRelationInput | BasketItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BasketItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BasketItems
    **/
    _count?: true | BasketItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BasketItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BasketItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BasketItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BasketItemMaxAggregateInputType
  }

  export type GetBasketItemAggregateType<T extends BasketItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBasketItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBasketItem[P]>
      : GetScalarType<T[P], AggregateBasketItem[P]>
  }




  export type BasketItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BasketItemWhereInput
    orderBy?: BasketItemOrderByWithAggregationInput | BasketItemOrderByWithAggregationInput[]
    by: BasketItemScalarFieldEnum[] | BasketItemScalarFieldEnum
    having?: BasketItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BasketItemCountAggregateInputType | true
    _avg?: BasketItemAvgAggregateInputType
    _sum?: BasketItemSumAggregateInputType
    _min?: BasketItemMinAggregateInputType
    _max?: BasketItemMaxAggregateInputType
  }

  export type BasketItemGroupByOutputType = {
    id: string
    basketId: string
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    transactionType: $Enums.TransactionType
    quantity: number
    orderType: $Enums.OrderType
    price: number | null
    triggerPrice: number | null
    product: $Enums.ProductType
    sortOrder: number
    _count: BasketItemCountAggregateOutputType | null
    _avg: BasketItemAvgAggregateOutputType | null
    _sum: BasketItemSumAggregateOutputType | null
    _min: BasketItemMinAggregateOutputType | null
    _max: BasketItemMaxAggregateOutputType | null
  }

  type GetBasketItemGroupByPayload<T extends BasketItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BasketItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BasketItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BasketItemGroupByOutputType[P]>
            : GetScalarType<T[P], BasketItemGroupByOutputType[P]>
        }
      >
    >


  export type BasketItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    basketId?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    transactionType?: boolean
    quantity?: boolean
    orderType?: boolean
    price?: boolean
    triggerPrice?: boolean
    product?: boolean
    sortOrder?: boolean
    basket?: boolean | BasketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basketItem"]>

  export type BasketItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    basketId?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    transactionType?: boolean
    quantity?: boolean
    orderType?: boolean
    price?: boolean
    triggerPrice?: boolean
    product?: boolean
    sortOrder?: boolean
    basket?: boolean | BasketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basketItem"]>

  export type BasketItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    basketId?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    transactionType?: boolean
    quantity?: boolean
    orderType?: boolean
    price?: boolean
    triggerPrice?: boolean
    product?: boolean
    sortOrder?: boolean
    basket?: boolean | BasketDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["basketItem"]>

  export type BasketItemSelectScalar = {
    id?: boolean
    basketId?: boolean
    instrumentId?: boolean
    tradingSymbol?: boolean
    exchange?: boolean
    transactionType?: boolean
    quantity?: boolean
    orderType?: boolean
    price?: boolean
    triggerPrice?: boolean
    product?: boolean
    sortOrder?: boolean
  }

  export type BasketItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "basketId" | "instrumentId" | "tradingSymbol" | "exchange" | "transactionType" | "quantity" | "orderType" | "price" | "triggerPrice" | "product" | "sortOrder", ExtArgs["result"]["basketItem"]>
  export type BasketItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    basket?: boolean | BasketDefaultArgs<ExtArgs>
  }
  export type BasketItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    basket?: boolean | BasketDefaultArgs<ExtArgs>
  }
  export type BasketItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    basket?: boolean | BasketDefaultArgs<ExtArgs>
  }

  export type $BasketItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BasketItem"
    objects: {
      basket: Prisma.$BasketPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      basketId: string
      instrumentId: string
      tradingSymbol: string
      exchange: $Enums.Exchange
      transactionType: $Enums.TransactionType
      quantity: number
      orderType: $Enums.OrderType
      price: number | null
      triggerPrice: number | null
      product: $Enums.ProductType
      sortOrder: number
    }, ExtArgs["result"]["basketItem"]>
    composites: {}
  }

  type BasketItemGetPayload<S extends boolean | null | undefined | BasketItemDefaultArgs> = $Result.GetResult<Prisma.$BasketItemPayload, S>

  type BasketItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BasketItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BasketItemCountAggregateInputType | true
    }

  export interface BasketItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BasketItem'], meta: { name: 'BasketItem' } }
    /**
     * Find zero or one BasketItem that matches the filter.
     * @param {BasketItemFindUniqueArgs} args - Arguments to find a BasketItem
     * @example
     * // Get one BasketItem
     * const basketItem = await prisma.basketItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BasketItemFindUniqueArgs>(args: SelectSubset<T, BasketItemFindUniqueArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BasketItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BasketItemFindUniqueOrThrowArgs} args - Arguments to find a BasketItem
     * @example
     * // Get one BasketItem
     * const basketItem = await prisma.basketItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BasketItemFindUniqueOrThrowArgs>(args: SelectSubset<T, BasketItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BasketItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketItemFindFirstArgs} args - Arguments to find a BasketItem
     * @example
     * // Get one BasketItem
     * const basketItem = await prisma.basketItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BasketItemFindFirstArgs>(args?: SelectSubset<T, BasketItemFindFirstArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BasketItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketItemFindFirstOrThrowArgs} args - Arguments to find a BasketItem
     * @example
     * // Get one BasketItem
     * const basketItem = await prisma.basketItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BasketItemFindFirstOrThrowArgs>(args?: SelectSubset<T, BasketItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BasketItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BasketItems
     * const basketItems = await prisma.basketItem.findMany()
     * 
     * // Get first 10 BasketItems
     * const basketItems = await prisma.basketItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const basketItemWithIdOnly = await prisma.basketItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BasketItemFindManyArgs>(args?: SelectSubset<T, BasketItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BasketItem.
     * @param {BasketItemCreateArgs} args - Arguments to create a BasketItem.
     * @example
     * // Create one BasketItem
     * const BasketItem = await prisma.basketItem.create({
     *   data: {
     *     // ... data to create a BasketItem
     *   }
     * })
     * 
     */
    create<T extends BasketItemCreateArgs>(args: SelectSubset<T, BasketItemCreateArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BasketItems.
     * @param {BasketItemCreateManyArgs} args - Arguments to create many BasketItems.
     * @example
     * // Create many BasketItems
     * const basketItem = await prisma.basketItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BasketItemCreateManyArgs>(args?: SelectSubset<T, BasketItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BasketItems and returns the data saved in the database.
     * @param {BasketItemCreateManyAndReturnArgs} args - Arguments to create many BasketItems.
     * @example
     * // Create many BasketItems
     * const basketItem = await prisma.basketItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BasketItems and only return the `id`
     * const basketItemWithIdOnly = await prisma.basketItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BasketItemCreateManyAndReturnArgs>(args?: SelectSubset<T, BasketItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BasketItem.
     * @param {BasketItemDeleteArgs} args - Arguments to delete one BasketItem.
     * @example
     * // Delete one BasketItem
     * const BasketItem = await prisma.basketItem.delete({
     *   where: {
     *     // ... filter to delete one BasketItem
     *   }
     * })
     * 
     */
    delete<T extends BasketItemDeleteArgs>(args: SelectSubset<T, BasketItemDeleteArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BasketItem.
     * @param {BasketItemUpdateArgs} args - Arguments to update one BasketItem.
     * @example
     * // Update one BasketItem
     * const basketItem = await prisma.basketItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BasketItemUpdateArgs>(args: SelectSubset<T, BasketItemUpdateArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BasketItems.
     * @param {BasketItemDeleteManyArgs} args - Arguments to filter BasketItems to delete.
     * @example
     * // Delete a few BasketItems
     * const { count } = await prisma.basketItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BasketItemDeleteManyArgs>(args?: SelectSubset<T, BasketItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BasketItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BasketItems
     * const basketItem = await prisma.basketItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BasketItemUpdateManyArgs>(args: SelectSubset<T, BasketItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BasketItems and returns the data updated in the database.
     * @param {BasketItemUpdateManyAndReturnArgs} args - Arguments to update many BasketItems.
     * @example
     * // Update many BasketItems
     * const basketItem = await prisma.basketItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BasketItems and only return the `id`
     * const basketItemWithIdOnly = await prisma.basketItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BasketItemUpdateManyAndReturnArgs>(args: SelectSubset<T, BasketItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BasketItem.
     * @param {BasketItemUpsertArgs} args - Arguments to update or create a BasketItem.
     * @example
     * // Update or create a BasketItem
     * const basketItem = await prisma.basketItem.upsert({
     *   create: {
     *     // ... data to create a BasketItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BasketItem we want to update
     *   }
     * })
     */
    upsert<T extends BasketItemUpsertArgs>(args: SelectSubset<T, BasketItemUpsertArgs<ExtArgs>>): Prisma__BasketItemClient<$Result.GetResult<Prisma.$BasketItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BasketItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketItemCountArgs} args - Arguments to filter BasketItems to count.
     * @example
     * // Count the number of BasketItems
     * const count = await prisma.basketItem.count({
     *   where: {
     *     // ... the filter for the BasketItems we want to count
     *   }
     * })
    **/
    count<T extends BasketItemCountArgs>(
      args?: Subset<T, BasketItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BasketItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BasketItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BasketItemAggregateArgs>(args: Subset<T, BasketItemAggregateArgs>): Prisma.PrismaPromise<GetBasketItemAggregateType<T>>

    /**
     * Group by BasketItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BasketItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BasketItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BasketItemGroupByArgs['orderBy'] }
        : { orderBy?: BasketItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BasketItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBasketItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BasketItem model
   */
  readonly fields: BasketItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BasketItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BasketItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    basket<T extends BasketDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BasketDefaultArgs<ExtArgs>>): Prisma__BasketClient<$Result.GetResult<Prisma.$BasketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BasketItem model
   */
  interface BasketItemFieldRefs {
    readonly id: FieldRef<"BasketItem", 'String'>
    readonly basketId: FieldRef<"BasketItem", 'String'>
    readonly instrumentId: FieldRef<"BasketItem", 'String'>
    readonly tradingSymbol: FieldRef<"BasketItem", 'String'>
    readonly exchange: FieldRef<"BasketItem", 'Exchange'>
    readonly transactionType: FieldRef<"BasketItem", 'TransactionType'>
    readonly quantity: FieldRef<"BasketItem", 'Int'>
    readonly orderType: FieldRef<"BasketItem", 'OrderType'>
    readonly price: FieldRef<"BasketItem", 'Float'>
    readonly triggerPrice: FieldRef<"BasketItem", 'Float'>
    readonly product: FieldRef<"BasketItem", 'ProductType'>
    readonly sortOrder: FieldRef<"BasketItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BasketItem findUnique
   */
  export type BasketItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * Filter, which BasketItem to fetch.
     */
    where: BasketItemWhereUniqueInput
  }

  /**
   * BasketItem findUniqueOrThrow
   */
  export type BasketItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * Filter, which BasketItem to fetch.
     */
    where: BasketItemWhereUniqueInput
  }

  /**
   * BasketItem findFirst
   */
  export type BasketItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * Filter, which BasketItem to fetch.
     */
    where?: BasketItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketItems to fetch.
     */
    orderBy?: BasketItemOrderByWithRelationInput | BasketItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BasketItems.
     */
    cursor?: BasketItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BasketItems.
     */
    distinct?: BasketItemScalarFieldEnum | BasketItemScalarFieldEnum[]
  }

  /**
   * BasketItem findFirstOrThrow
   */
  export type BasketItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * Filter, which BasketItem to fetch.
     */
    where?: BasketItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketItems to fetch.
     */
    orderBy?: BasketItemOrderByWithRelationInput | BasketItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BasketItems.
     */
    cursor?: BasketItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BasketItems.
     */
    distinct?: BasketItemScalarFieldEnum | BasketItemScalarFieldEnum[]
  }

  /**
   * BasketItem findMany
   */
  export type BasketItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * Filter, which BasketItems to fetch.
     */
    where?: BasketItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BasketItems to fetch.
     */
    orderBy?: BasketItemOrderByWithRelationInput | BasketItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BasketItems.
     */
    cursor?: BasketItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BasketItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BasketItems.
     */
    skip?: number
    distinct?: BasketItemScalarFieldEnum | BasketItemScalarFieldEnum[]
  }

  /**
   * BasketItem create
   */
  export type BasketItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * The data needed to create a BasketItem.
     */
    data: XOR<BasketItemCreateInput, BasketItemUncheckedCreateInput>
  }

  /**
   * BasketItem createMany
   */
  export type BasketItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BasketItems.
     */
    data: BasketItemCreateManyInput | BasketItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BasketItem createManyAndReturn
   */
  export type BasketItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * The data used to create many BasketItems.
     */
    data: BasketItemCreateManyInput | BasketItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BasketItem update
   */
  export type BasketItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * The data needed to update a BasketItem.
     */
    data: XOR<BasketItemUpdateInput, BasketItemUncheckedUpdateInput>
    /**
     * Choose, which BasketItem to update.
     */
    where: BasketItemWhereUniqueInput
  }

  /**
   * BasketItem updateMany
   */
  export type BasketItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BasketItems.
     */
    data: XOR<BasketItemUpdateManyMutationInput, BasketItemUncheckedUpdateManyInput>
    /**
     * Filter which BasketItems to update
     */
    where?: BasketItemWhereInput
    /**
     * Limit how many BasketItems to update.
     */
    limit?: number
  }

  /**
   * BasketItem updateManyAndReturn
   */
  export type BasketItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * The data used to update BasketItems.
     */
    data: XOR<BasketItemUpdateManyMutationInput, BasketItemUncheckedUpdateManyInput>
    /**
     * Filter which BasketItems to update
     */
    where?: BasketItemWhereInput
    /**
     * Limit how many BasketItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BasketItem upsert
   */
  export type BasketItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * The filter to search for the BasketItem to update in case it exists.
     */
    where: BasketItemWhereUniqueInput
    /**
     * In case the BasketItem found by the `where` argument doesn't exist, create a new BasketItem with this data.
     */
    create: XOR<BasketItemCreateInput, BasketItemUncheckedCreateInput>
    /**
     * In case the BasketItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BasketItemUpdateInput, BasketItemUncheckedUpdateInput>
  }

  /**
   * BasketItem delete
   */
  export type BasketItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
    /**
     * Filter which BasketItem to delete.
     */
    where: BasketItemWhereUniqueInput
  }

  /**
   * BasketItem deleteMany
   */
  export type BasketItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BasketItems to delete
     */
    where?: BasketItemWhereInput
    /**
     * Limit how many BasketItems to delete.
     */
    limit?: number
  }

  /**
   * BasketItem without action
   */
  export type BasketItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BasketItem
     */
    select?: BasketItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BasketItem
     */
    omit?: BasketItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BasketItemInclude<ExtArgs> | null
  }


  /**
   * Model CorporateAction
   */

  export type AggregateCorporateAction = {
    _count: CorporateActionCountAggregateOutputType | null
    _avg: CorporateActionAvgAggregateOutputType | null
    _sum: CorporateActionSumAggregateOutputType | null
    _min: CorporateActionMinAggregateOutputType | null
    _max: CorporateActionMaxAggregateOutputType | null
  }

  export type CorporateActionAvgAggregateOutputType = {
    dividendAmount: number | null
  }

  export type CorporateActionSumAggregateOutputType = {
    dividendAmount: number | null
  }

  export type CorporateActionMinAggregateOutputType = {
    id: string | null
    instrumentId: string | null
    actionType: $Enums.CorporateActionType | null
    exDate: Date | null
    recordDate: Date | null
    announcementDate: Date | null
    description: string | null
    oldSymbol: string | null
    newSymbol: string | null
    ratio: string | null
    dividendAmount: number | null
    isProcessed: boolean | null
    processedAt: Date | null
    createdAt: Date | null
  }

  export type CorporateActionMaxAggregateOutputType = {
    id: string | null
    instrumentId: string | null
    actionType: $Enums.CorporateActionType | null
    exDate: Date | null
    recordDate: Date | null
    announcementDate: Date | null
    description: string | null
    oldSymbol: string | null
    newSymbol: string | null
    ratio: string | null
    dividendAmount: number | null
    isProcessed: boolean | null
    processedAt: Date | null
    createdAt: Date | null
  }

  export type CorporateActionCountAggregateOutputType = {
    id: number
    instrumentId: number
    actionType: number
    exDate: number
    recordDate: number
    announcementDate: number
    description: number
    oldSymbol: number
    newSymbol: number
    ratio: number
    dividendAmount: number
    isProcessed: number
    processedAt: number
    createdAt: number
    _all: number
  }


  export type CorporateActionAvgAggregateInputType = {
    dividendAmount?: true
  }

  export type CorporateActionSumAggregateInputType = {
    dividendAmount?: true
  }

  export type CorporateActionMinAggregateInputType = {
    id?: true
    instrumentId?: true
    actionType?: true
    exDate?: true
    recordDate?: true
    announcementDate?: true
    description?: true
    oldSymbol?: true
    newSymbol?: true
    ratio?: true
    dividendAmount?: true
    isProcessed?: true
    processedAt?: true
    createdAt?: true
  }

  export type CorporateActionMaxAggregateInputType = {
    id?: true
    instrumentId?: true
    actionType?: true
    exDate?: true
    recordDate?: true
    announcementDate?: true
    description?: true
    oldSymbol?: true
    newSymbol?: true
    ratio?: true
    dividendAmount?: true
    isProcessed?: true
    processedAt?: true
    createdAt?: true
  }

  export type CorporateActionCountAggregateInputType = {
    id?: true
    instrumentId?: true
    actionType?: true
    exDate?: true
    recordDate?: true
    announcementDate?: true
    description?: true
    oldSymbol?: true
    newSymbol?: true
    ratio?: true
    dividendAmount?: true
    isProcessed?: true
    processedAt?: true
    createdAt?: true
    _all?: true
  }

  export type CorporateActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateAction to aggregate.
     */
    where?: CorporateActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActions to fetch.
     */
    orderBy?: CorporateActionOrderByWithRelationInput | CorporateActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorporateActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CorporateActions
    **/
    _count?: true | CorporateActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorporateActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorporateActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorporateActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorporateActionMaxAggregateInputType
  }

  export type GetCorporateActionAggregateType<T extends CorporateActionAggregateArgs> = {
        [P in keyof T & keyof AggregateCorporateAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorporateAction[P]>
      : GetScalarType<T[P], AggregateCorporateAction[P]>
  }




  export type CorporateActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorporateActionWhereInput
    orderBy?: CorporateActionOrderByWithAggregationInput | CorporateActionOrderByWithAggregationInput[]
    by: CorporateActionScalarFieldEnum[] | CorporateActionScalarFieldEnum
    having?: CorporateActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorporateActionCountAggregateInputType | true
    _avg?: CorporateActionAvgAggregateInputType
    _sum?: CorporateActionSumAggregateInputType
    _min?: CorporateActionMinAggregateInputType
    _max?: CorporateActionMaxAggregateInputType
  }

  export type CorporateActionGroupByOutputType = {
    id: string
    instrumentId: string
    actionType: $Enums.CorporateActionType
    exDate: Date
    recordDate: Date | null
    announcementDate: Date
    description: string
    oldSymbol: string | null
    newSymbol: string | null
    ratio: string | null
    dividendAmount: number | null
    isProcessed: boolean
    processedAt: Date | null
    createdAt: Date
    _count: CorporateActionCountAggregateOutputType | null
    _avg: CorporateActionAvgAggregateOutputType | null
    _sum: CorporateActionSumAggregateOutputType | null
    _min: CorporateActionMinAggregateOutputType | null
    _max: CorporateActionMaxAggregateOutputType | null
  }

  type GetCorporateActionGroupByPayload<T extends CorporateActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorporateActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorporateActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorporateActionGroupByOutputType[P]>
            : GetScalarType<T[P], CorporateActionGroupByOutputType[P]>
        }
      >
    >


  export type CorporateActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    actionType?: boolean
    exDate?: boolean
    recordDate?: boolean
    announcementDate?: boolean
    description?: boolean
    oldSymbol?: boolean
    newSymbol?: boolean
    ratio?: boolean
    dividendAmount?: boolean
    isProcessed?: boolean
    processedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["corporateAction"]>

  export type CorporateActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    actionType?: boolean
    exDate?: boolean
    recordDate?: boolean
    announcementDate?: boolean
    description?: boolean
    oldSymbol?: boolean
    newSymbol?: boolean
    ratio?: boolean
    dividendAmount?: boolean
    isProcessed?: boolean
    processedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["corporateAction"]>

  export type CorporateActionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instrumentId?: boolean
    actionType?: boolean
    exDate?: boolean
    recordDate?: boolean
    announcementDate?: boolean
    description?: boolean
    oldSymbol?: boolean
    newSymbol?: boolean
    ratio?: boolean
    dividendAmount?: boolean
    isProcessed?: boolean
    processedAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["corporateAction"]>

  export type CorporateActionSelectScalar = {
    id?: boolean
    instrumentId?: boolean
    actionType?: boolean
    exDate?: boolean
    recordDate?: boolean
    announcementDate?: boolean
    description?: boolean
    oldSymbol?: boolean
    newSymbol?: boolean
    ratio?: boolean
    dividendAmount?: boolean
    isProcessed?: boolean
    processedAt?: boolean
    createdAt?: boolean
  }

  export type CorporateActionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "instrumentId" | "actionType" | "exDate" | "recordDate" | "announcementDate" | "description" | "oldSymbol" | "newSymbol" | "ratio" | "dividendAmount" | "isProcessed" | "processedAt" | "createdAt", ExtArgs["result"]["corporateAction"]>

  export type $CorporateActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CorporateAction"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      instrumentId: string
      actionType: $Enums.CorporateActionType
      exDate: Date
      recordDate: Date | null
      announcementDate: Date
      description: string
      oldSymbol: string | null
      newSymbol: string | null
      ratio: string | null
      dividendAmount: number | null
      isProcessed: boolean
      processedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["corporateAction"]>
    composites: {}
  }

  type CorporateActionGetPayload<S extends boolean | null | undefined | CorporateActionDefaultArgs> = $Result.GetResult<Prisma.$CorporateActionPayload, S>

  type CorporateActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CorporateActionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CorporateActionCountAggregateInputType | true
    }

  export interface CorporateActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CorporateAction'], meta: { name: 'CorporateAction' } }
    /**
     * Find zero or one CorporateAction that matches the filter.
     * @param {CorporateActionFindUniqueArgs} args - Arguments to find a CorporateAction
     * @example
     * // Get one CorporateAction
     * const corporateAction = await prisma.corporateAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorporateActionFindUniqueArgs>(args: SelectSubset<T, CorporateActionFindUniqueArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CorporateAction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CorporateActionFindUniqueOrThrowArgs} args - Arguments to find a CorporateAction
     * @example
     * // Get one CorporateAction
     * const corporateAction = await prisma.corporateAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorporateActionFindUniqueOrThrowArgs>(args: SelectSubset<T, CorporateActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CorporateAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActionFindFirstArgs} args - Arguments to find a CorporateAction
     * @example
     * // Get one CorporateAction
     * const corporateAction = await prisma.corporateAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorporateActionFindFirstArgs>(args?: SelectSubset<T, CorporateActionFindFirstArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CorporateAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActionFindFirstOrThrowArgs} args - Arguments to find a CorporateAction
     * @example
     * // Get one CorporateAction
     * const corporateAction = await prisma.corporateAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorporateActionFindFirstOrThrowArgs>(args?: SelectSubset<T, CorporateActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CorporateActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CorporateActions
     * const corporateActions = await prisma.corporateAction.findMany()
     * 
     * // Get first 10 CorporateActions
     * const corporateActions = await prisma.corporateAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corporateActionWithIdOnly = await prisma.corporateAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorporateActionFindManyArgs>(args?: SelectSubset<T, CorporateActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CorporateAction.
     * @param {CorporateActionCreateArgs} args - Arguments to create a CorporateAction.
     * @example
     * // Create one CorporateAction
     * const CorporateAction = await prisma.corporateAction.create({
     *   data: {
     *     // ... data to create a CorporateAction
     *   }
     * })
     * 
     */
    create<T extends CorporateActionCreateArgs>(args: SelectSubset<T, CorporateActionCreateArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CorporateActions.
     * @param {CorporateActionCreateManyArgs} args - Arguments to create many CorporateActions.
     * @example
     * // Create many CorporateActions
     * const corporateAction = await prisma.corporateAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorporateActionCreateManyArgs>(args?: SelectSubset<T, CorporateActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CorporateActions and returns the data saved in the database.
     * @param {CorporateActionCreateManyAndReturnArgs} args - Arguments to create many CorporateActions.
     * @example
     * // Create many CorporateActions
     * const corporateAction = await prisma.corporateAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CorporateActions and only return the `id`
     * const corporateActionWithIdOnly = await prisma.corporateAction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorporateActionCreateManyAndReturnArgs>(args?: SelectSubset<T, CorporateActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CorporateAction.
     * @param {CorporateActionDeleteArgs} args - Arguments to delete one CorporateAction.
     * @example
     * // Delete one CorporateAction
     * const CorporateAction = await prisma.corporateAction.delete({
     *   where: {
     *     // ... filter to delete one CorporateAction
     *   }
     * })
     * 
     */
    delete<T extends CorporateActionDeleteArgs>(args: SelectSubset<T, CorporateActionDeleteArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CorporateAction.
     * @param {CorporateActionUpdateArgs} args - Arguments to update one CorporateAction.
     * @example
     * // Update one CorporateAction
     * const corporateAction = await prisma.corporateAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorporateActionUpdateArgs>(args: SelectSubset<T, CorporateActionUpdateArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CorporateActions.
     * @param {CorporateActionDeleteManyArgs} args - Arguments to filter CorporateActions to delete.
     * @example
     * // Delete a few CorporateActions
     * const { count } = await prisma.corporateAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorporateActionDeleteManyArgs>(args?: SelectSubset<T, CorporateActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CorporateActions
     * const corporateAction = await prisma.corporateAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorporateActionUpdateManyArgs>(args: SelectSubset<T, CorporateActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CorporateActions and returns the data updated in the database.
     * @param {CorporateActionUpdateManyAndReturnArgs} args - Arguments to update many CorporateActions.
     * @example
     * // Update many CorporateActions
     * const corporateAction = await prisma.corporateAction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CorporateActions and only return the `id`
     * const corporateActionWithIdOnly = await prisma.corporateAction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CorporateActionUpdateManyAndReturnArgs>(args: SelectSubset<T, CorporateActionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CorporateAction.
     * @param {CorporateActionUpsertArgs} args - Arguments to update or create a CorporateAction.
     * @example
     * // Update or create a CorporateAction
     * const corporateAction = await prisma.corporateAction.upsert({
     *   create: {
     *     // ... data to create a CorporateAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CorporateAction we want to update
     *   }
     * })
     */
    upsert<T extends CorporateActionUpsertArgs>(args: SelectSubset<T, CorporateActionUpsertArgs<ExtArgs>>): Prisma__CorporateActionClient<$Result.GetResult<Prisma.$CorporateActionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CorporateActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActionCountArgs} args - Arguments to filter CorporateActions to count.
     * @example
     * // Count the number of CorporateActions
     * const count = await prisma.corporateAction.count({
     *   where: {
     *     // ... the filter for the CorporateActions we want to count
     *   }
     * })
    **/
    count<T extends CorporateActionCountArgs>(
      args?: Subset<T, CorporateActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorporateActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CorporateAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorporateActionAggregateArgs>(args: Subset<T, CorporateActionAggregateArgs>): Prisma.PrismaPromise<GetCorporateActionAggregateType<T>>

    /**
     * Group by CorporateAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorporateActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorporateActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorporateActionGroupByArgs['orderBy'] }
        : { orderBy?: CorporateActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorporateActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorporateActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CorporateAction model
   */
  readonly fields: CorporateActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CorporateAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorporateActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CorporateAction model
   */
  interface CorporateActionFieldRefs {
    readonly id: FieldRef<"CorporateAction", 'String'>
    readonly instrumentId: FieldRef<"CorporateAction", 'String'>
    readonly actionType: FieldRef<"CorporateAction", 'CorporateActionType'>
    readonly exDate: FieldRef<"CorporateAction", 'DateTime'>
    readonly recordDate: FieldRef<"CorporateAction", 'DateTime'>
    readonly announcementDate: FieldRef<"CorporateAction", 'DateTime'>
    readonly description: FieldRef<"CorporateAction", 'String'>
    readonly oldSymbol: FieldRef<"CorporateAction", 'String'>
    readonly newSymbol: FieldRef<"CorporateAction", 'String'>
    readonly ratio: FieldRef<"CorporateAction", 'String'>
    readonly dividendAmount: FieldRef<"CorporateAction", 'Float'>
    readonly isProcessed: FieldRef<"CorporateAction", 'Boolean'>
    readonly processedAt: FieldRef<"CorporateAction", 'DateTime'>
    readonly createdAt: FieldRef<"CorporateAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CorporateAction findUnique
   */
  export type CorporateActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * Filter, which CorporateAction to fetch.
     */
    where: CorporateActionWhereUniqueInput
  }

  /**
   * CorporateAction findUniqueOrThrow
   */
  export type CorporateActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * Filter, which CorporateAction to fetch.
     */
    where: CorporateActionWhereUniqueInput
  }

  /**
   * CorporateAction findFirst
   */
  export type CorporateActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * Filter, which CorporateAction to fetch.
     */
    where?: CorporateActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActions to fetch.
     */
    orderBy?: CorporateActionOrderByWithRelationInput | CorporateActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateActions.
     */
    cursor?: CorporateActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateActions.
     */
    distinct?: CorporateActionScalarFieldEnum | CorporateActionScalarFieldEnum[]
  }

  /**
   * CorporateAction findFirstOrThrow
   */
  export type CorporateActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * Filter, which CorporateAction to fetch.
     */
    where?: CorporateActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActions to fetch.
     */
    orderBy?: CorporateActionOrderByWithRelationInput | CorporateActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CorporateActions.
     */
    cursor?: CorporateActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CorporateActions.
     */
    distinct?: CorporateActionScalarFieldEnum | CorporateActionScalarFieldEnum[]
  }

  /**
   * CorporateAction findMany
   */
  export type CorporateActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * Filter, which CorporateActions to fetch.
     */
    where?: CorporateActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CorporateActions to fetch.
     */
    orderBy?: CorporateActionOrderByWithRelationInput | CorporateActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CorporateActions.
     */
    cursor?: CorporateActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CorporateActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CorporateActions.
     */
    skip?: number
    distinct?: CorporateActionScalarFieldEnum | CorporateActionScalarFieldEnum[]
  }

  /**
   * CorporateAction create
   */
  export type CorporateActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * The data needed to create a CorporateAction.
     */
    data: XOR<CorporateActionCreateInput, CorporateActionUncheckedCreateInput>
  }

  /**
   * CorporateAction createMany
   */
  export type CorporateActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CorporateActions.
     */
    data: CorporateActionCreateManyInput | CorporateActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CorporateAction createManyAndReturn
   */
  export type CorporateActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * The data used to create many CorporateActions.
     */
    data: CorporateActionCreateManyInput | CorporateActionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CorporateAction update
   */
  export type CorporateActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * The data needed to update a CorporateAction.
     */
    data: XOR<CorporateActionUpdateInput, CorporateActionUncheckedUpdateInput>
    /**
     * Choose, which CorporateAction to update.
     */
    where: CorporateActionWhereUniqueInput
  }

  /**
   * CorporateAction updateMany
   */
  export type CorporateActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CorporateActions.
     */
    data: XOR<CorporateActionUpdateManyMutationInput, CorporateActionUncheckedUpdateManyInput>
    /**
     * Filter which CorporateActions to update
     */
    where?: CorporateActionWhereInput
    /**
     * Limit how many CorporateActions to update.
     */
    limit?: number
  }

  /**
   * CorporateAction updateManyAndReturn
   */
  export type CorporateActionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * The data used to update CorporateActions.
     */
    data: XOR<CorporateActionUpdateManyMutationInput, CorporateActionUncheckedUpdateManyInput>
    /**
     * Filter which CorporateActions to update
     */
    where?: CorporateActionWhereInput
    /**
     * Limit how many CorporateActions to update.
     */
    limit?: number
  }

  /**
   * CorporateAction upsert
   */
  export type CorporateActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * The filter to search for the CorporateAction to update in case it exists.
     */
    where: CorporateActionWhereUniqueInput
    /**
     * In case the CorporateAction found by the `where` argument doesn't exist, create a new CorporateAction with this data.
     */
    create: XOR<CorporateActionCreateInput, CorporateActionUncheckedCreateInput>
    /**
     * In case the CorporateAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorporateActionUpdateInput, CorporateActionUncheckedUpdateInput>
  }

  /**
   * CorporateAction delete
   */
  export type CorporateActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
    /**
     * Filter which CorporateAction to delete.
     */
    where: CorporateActionWhereUniqueInput
  }

  /**
   * CorporateAction deleteMany
   */
  export type CorporateActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CorporateActions to delete
     */
    where?: CorporateActionWhereInput
    /**
     * Limit how many CorporateActions to delete.
     */
    limit?: number
  }

  /**
   * CorporateAction without action
   */
  export type CorporateActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorporateAction
     */
    select?: CorporateActionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CorporateAction
     */
    omit?: CorporateActionOmit<ExtArgs> | null
  }


  /**
   * Model TradeJournal
   */

  export type AggregateTradeJournal = {
    _count: TradeJournalCountAggregateOutputType | null
    _min: TradeJournalMinAggregateOutputType | null
    _max: TradeJournalMaxAggregateOutputType | null
  }

  export type TradeJournalMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tradeId: string | null
    orderId: string | null
    date: Date | null
    notes: string | null
    strategy: string | null
    emotionalState: string | null
    learnings: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradeJournalMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tradeId: string | null
    orderId: string | null
    date: Date | null
    notes: string | null
    strategy: string | null
    emotionalState: string | null
    learnings: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradeJournalCountAggregateOutputType = {
    id: number
    userId: number
    tradeId: number
    orderId: number
    date: number
    notes: number
    tags: number
    strategy: number
    emotionalState: number
    learnings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TradeJournalMinAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
    orderId?: true
    date?: true
    notes?: true
    strategy?: true
    emotionalState?: true
    learnings?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradeJournalMaxAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
    orderId?: true
    date?: true
    notes?: true
    strategy?: true
    emotionalState?: true
    learnings?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradeJournalCountAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
    orderId?: true
    date?: true
    notes?: true
    tags?: true
    strategy?: true
    emotionalState?: true
    learnings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TradeJournalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradeJournal to aggregate.
     */
    where?: TradeJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeJournals to fetch.
     */
    orderBy?: TradeJournalOrderByWithRelationInput | TradeJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TradeJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TradeJournals
    **/
    _count?: true | TradeJournalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradeJournalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradeJournalMaxAggregateInputType
  }

  export type GetTradeJournalAggregateType<T extends TradeJournalAggregateArgs> = {
        [P in keyof T & keyof AggregateTradeJournal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTradeJournal[P]>
      : GetScalarType<T[P], AggregateTradeJournal[P]>
  }




  export type TradeJournalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeJournalWhereInput
    orderBy?: TradeJournalOrderByWithAggregationInput | TradeJournalOrderByWithAggregationInput[]
    by: TradeJournalScalarFieldEnum[] | TradeJournalScalarFieldEnum
    having?: TradeJournalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradeJournalCountAggregateInputType | true
    _min?: TradeJournalMinAggregateInputType
    _max?: TradeJournalMaxAggregateInputType
  }

  export type TradeJournalGroupByOutputType = {
    id: string
    userId: string
    tradeId: string | null
    orderId: string | null
    date: Date
    notes: string
    tags: string[]
    strategy: string | null
    emotionalState: string | null
    learnings: string | null
    createdAt: Date
    updatedAt: Date
    _count: TradeJournalCountAggregateOutputType | null
    _min: TradeJournalMinAggregateOutputType | null
    _max: TradeJournalMaxAggregateOutputType | null
  }

  type GetTradeJournalGroupByPayload<T extends TradeJournalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TradeJournalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradeJournalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradeJournalGroupByOutputType[P]>
            : GetScalarType<T[P], TradeJournalGroupByOutputType[P]>
        }
      >
    >


  export type TradeJournalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tradeId?: boolean
    orderId?: boolean
    date?: boolean
    notes?: boolean
    tags?: boolean
    strategy?: boolean
    emotionalState?: boolean
    learnings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tradeJournal"]>

  export type TradeJournalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tradeId?: boolean
    orderId?: boolean
    date?: boolean
    notes?: boolean
    tags?: boolean
    strategy?: boolean
    emotionalState?: boolean
    learnings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tradeJournal"]>

  export type TradeJournalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tradeId?: boolean
    orderId?: boolean
    date?: boolean
    notes?: boolean
    tags?: boolean
    strategy?: boolean
    emotionalState?: boolean
    learnings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tradeJournal"]>

  export type TradeJournalSelectScalar = {
    id?: boolean
    userId?: boolean
    tradeId?: boolean
    orderId?: boolean
    date?: boolean
    notes?: boolean
    tags?: boolean
    strategy?: boolean
    emotionalState?: boolean
    learnings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TradeJournalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tradeId" | "orderId" | "date" | "notes" | "tags" | "strategy" | "emotionalState" | "learnings" | "createdAt" | "updatedAt", ExtArgs["result"]["tradeJournal"]>

  export type $TradeJournalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TradeJournal"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tradeId: string | null
      orderId: string | null
      date: Date
      notes: string
      tags: string[]
      strategy: string | null
      emotionalState: string | null
      learnings: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tradeJournal"]>
    composites: {}
  }

  type TradeJournalGetPayload<S extends boolean | null | undefined | TradeJournalDefaultArgs> = $Result.GetResult<Prisma.$TradeJournalPayload, S>

  type TradeJournalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TradeJournalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TradeJournalCountAggregateInputType | true
    }

  export interface TradeJournalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TradeJournal'], meta: { name: 'TradeJournal' } }
    /**
     * Find zero or one TradeJournal that matches the filter.
     * @param {TradeJournalFindUniqueArgs} args - Arguments to find a TradeJournal
     * @example
     * // Get one TradeJournal
     * const tradeJournal = await prisma.tradeJournal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TradeJournalFindUniqueArgs>(args: SelectSubset<T, TradeJournalFindUniqueArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TradeJournal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TradeJournalFindUniqueOrThrowArgs} args - Arguments to find a TradeJournal
     * @example
     * // Get one TradeJournal
     * const tradeJournal = await prisma.tradeJournal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TradeJournalFindUniqueOrThrowArgs>(args: SelectSubset<T, TradeJournalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TradeJournal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeJournalFindFirstArgs} args - Arguments to find a TradeJournal
     * @example
     * // Get one TradeJournal
     * const tradeJournal = await prisma.tradeJournal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TradeJournalFindFirstArgs>(args?: SelectSubset<T, TradeJournalFindFirstArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TradeJournal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeJournalFindFirstOrThrowArgs} args - Arguments to find a TradeJournal
     * @example
     * // Get one TradeJournal
     * const tradeJournal = await prisma.tradeJournal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TradeJournalFindFirstOrThrowArgs>(args?: SelectSubset<T, TradeJournalFindFirstOrThrowArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TradeJournals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeJournalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TradeJournals
     * const tradeJournals = await prisma.tradeJournal.findMany()
     * 
     * // Get first 10 TradeJournals
     * const tradeJournals = await prisma.tradeJournal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradeJournalWithIdOnly = await prisma.tradeJournal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TradeJournalFindManyArgs>(args?: SelectSubset<T, TradeJournalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TradeJournal.
     * @param {TradeJournalCreateArgs} args - Arguments to create a TradeJournal.
     * @example
     * // Create one TradeJournal
     * const TradeJournal = await prisma.tradeJournal.create({
     *   data: {
     *     // ... data to create a TradeJournal
     *   }
     * })
     * 
     */
    create<T extends TradeJournalCreateArgs>(args: SelectSubset<T, TradeJournalCreateArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TradeJournals.
     * @param {TradeJournalCreateManyArgs} args - Arguments to create many TradeJournals.
     * @example
     * // Create many TradeJournals
     * const tradeJournal = await prisma.tradeJournal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TradeJournalCreateManyArgs>(args?: SelectSubset<T, TradeJournalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TradeJournals and returns the data saved in the database.
     * @param {TradeJournalCreateManyAndReturnArgs} args - Arguments to create many TradeJournals.
     * @example
     * // Create many TradeJournals
     * const tradeJournal = await prisma.tradeJournal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TradeJournals and only return the `id`
     * const tradeJournalWithIdOnly = await prisma.tradeJournal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TradeJournalCreateManyAndReturnArgs>(args?: SelectSubset<T, TradeJournalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TradeJournal.
     * @param {TradeJournalDeleteArgs} args - Arguments to delete one TradeJournal.
     * @example
     * // Delete one TradeJournal
     * const TradeJournal = await prisma.tradeJournal.delete({
     *   where: {
     *     // ... filter to delete one TradeJournal
     *   }
     * })
     * 
     */
    delete<T extends TradeJournalDeleteArgs>(args: SelectSubset<T, TradeJournalDeleteArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TradeJournal.
     * @param {TradeJournalUpdateArgs} args - Arguments to update one TradeJournal.
     * @example
     * // Update one TradeJournal
     * const tradeJournal = await prisma.tradeJournal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TradeJournalUpdateArgs>(args: SelectSubset<T, TradeJournalUpdateArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TradeJournals.
     * @param {TradeJournalDeleteManyArgs} args - Arguments to filter TradeJournals to delete.
     * @example
     * // Delete a few TradeJournals
     * const { count } = await prisma.tradeJournal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TradeJournalDeleteManyArgs>(args?: SelectSubset<T, TradeJournalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradeJournals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeJournalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TradeJournals
     * const tradeJournal = await prisma.tradeJournal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TradeJournalUpdateManyArgs>(args: SelectSubset<T, TradeJournalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradeJournals and returns the data updated in the database.
     * @param {TradeJournalUpdateManyAndReturnArgs} args - Arguments to update many TradeJournals.
     * @example
     * // Update many TradeJournals
     * const tradeJournal = await prisma.tradeJournal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TradeJournals and only return the `id`
     * const tradeJournalWithIdOnly = await prisma.tradeJournal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TradeJournalUpdateManyAndReturnArgs>(args: SelectSubset<T, TradeJournalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TradeJournal.
     * @param {TradeJournalUpsertArgs} args - Arguments to update or create a TradeJournal.
     * @example
     * // Update or create a TradeJournal
     * const tradeJournal = await prisma.tradeJournal.upsert({
     *   create: {
     *     // ... data to create a TradeJournal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TradeJournal we want to update
     *   }
     * })
     */
    upsert<T extends TradeJournalUpsertArgs>(args: SelectSubset<T, TradeJournalUpsertArgs<ExtArgs>>): Prisma__TradeJournalClient<$Result.GetResult<Prisma.$TradeJournalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TradeJournals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeJournalCountArgs} args - Arguments to filter TradeJournals to count.
     * @example
     * // Count the number of TradeJournals
     * const count = await prisma.tradeJournal.count({
     *   where: {
     *     // ... the filter for the TradeJournals we want to count
     *   }
     * })
    **/
    count<T extends TradeJournalCountArgs>(
      args?: Subset<T, TradeJournalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradeJournalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TradeJournal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeJournalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradeJournalAggregateArgs>(args: Subset<T, TradeJournalAggregateArgs>): Prisma.PrismaPromise<GetTradeJournalAggregateType<T>>

    /**
     * Group by TradeJournal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeJournalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradeJournalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradeJournalGroupByArgs['orderBy'] }
        : { orderBy?: TradeJournalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradeJournalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradeJournalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TradeJournal model
   */
  readonly fields: TradeJournalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TradeJournal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TradeJournalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TradeJournal model
   */
  interface TradeJournalFieldRefs {
    readonly id: FieldRef<"TradeJournal", 'String'>
    readonly userId: FieldRef<"TradeJournal", 'String'>
    readonly tradeId: FieldRef<"TradeJournal", 'String'>
    readonly orderId: FieldRef<"TradeJournal", 'String'>
    readonly date: FieldRef<"TradeJournal", 'DateTime'>
    readonly notes: FieldRef<"TradeJournal", 'String'>
    readonly tags: FieldRef<"TradeJournal", 'String[]'>
    readonly strategy: FieldRef<"TradeJournal", 'String'>
    readonly emotionalState: FieldRef<"TradeJournal", 'String'>
    readonly learnings: FieldRef<"TradeJournal", 'String'>
    readonly createdAt: FieldRef<"TradeJournal", 'DateTime'>
    readonly updatedAt: FieldRef<"TradeJournal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TradeJournal findUnique
   */
  export type TradeJournalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * Filter, which TradeJournal to fetch.
     */
    where: TradeJournalWhereUniqueInput
  }

  /**
   * TradeJournal findUniqueOrThrow
   */
  export type TradeJournalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * Filter, which TradeJournal to fetch.
     */
    where: TradeJournalWhereUniqueInput
  }

  /**
   * TradeJournal findFirst
   */
  export type TradeJournalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * Filter, which TradeJournal to fetch.
     */
    where?: TradeJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeJournals to fetch.
     */
    orderBy?: TradeJournalOrderByWithRelationInput | TradeJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradeJournals.
     */
    cursor?: TradeJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradeJournals.
     */
    distinct?: TradeJournalScalarFieldEnum | TradeJournalScalarFieldEnum[]
  }

  /**
   * TradeJournal findFirstOrThrow
   */
  export type TradeJournalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * Filter, which TradeJournal to fetch.
     */
    where?: TradeJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeJournals to fetch.
     */
    orderBy?: TradeJournalOrderByWithRelationInput | TradeJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradeJournals.
     */
    cursor?: TradeJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeJournals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradeJournals.
     */
    distinct?: TradeJournalScalarFieldEnum | TradeJournalScalarFieldEnum[]
  }

  /**
   * TradeJournal findMany
   */
  export type TradeJournalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * Filter, which TradeJournals to fetch.
     */
    where?: TradeJournalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeJournals to fetch.
     */
    orderBy?: TradeJournalOrderByWithRelationInput | TradeJournalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TradeJournals.
     */
    cursor?: TradeJournalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeJournals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeJournals.
     */
    skip?: number
    distinct?: TradeJournalScalarFieldEnum | TradeJournalScalarFieldEnum[]
  }

  /**
   * TradeJournal create
   */
  export type TradeJournalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * The data needed to create a TradeJournal.
     */
    data: XOR<TradeJournalCreateInput, TradeJournalUncheckedCreateInput>
  }

  /**
   * TradeJournal createMany
   */
  export type TradeJournalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TradeJournals.
     */
    data: TradeJournalCreateManyInput | TradeJournalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TradeJournal createManyAndReturn
   */
  export type TradeJournalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * The data used to create many TradeJournals.
     */
    data: TradeJournalCreateManyInput | TradeJournalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TradeJournal update
   */
  export type TradeJournalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * The data needed to update a TradeJournal.
     */
    data: XOR<TradeJournalUpdateInput, TradeJournalUncheckedUpdateInput>
    /**
     * Choose, which TradeJournal to update.
     */
    where: TradeJournalWhereUniqueInput
  }

  /**
   * TradeJournal updateMany
   */
  export type TradeJournalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TradeJournals.
     */
    data: XOR<TradeJournalUpdateManyMutationInput, TradeJournalUncheckedUpdateManyInput>
    /**
     * Filter which TradeJournals to update
     */
    where?: TradeJournalWhereInput
    /**
     * Limit how many TradeJournals to update.
     */
    limit?: number
  }

  /**
   * TradeJournal updateManyAndReturn
   */
  export type TradeJournalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * The data used to update TradeJournals.
     */
    data: XOR<TradeJournalUpdateManyMutationInput, TradeJournalUncheckedUpdateManyInput>
    /**
     * Filter which TradeJournals to update
     */
    where?: TradeJournalWhereInput
    /**
     * Limit how many TradeJournals to update.
     */
    limit?: number
  }

  /**
   * TradeJournal upsert
   */
  export type TradeJournalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * The filter to search for the TradeJournal to update in case it exists.
     */
    where: TradeJournalWhereUniqueInput
    /**
     * In case the TradeJournal found by the `where` argument doesn't exist, create a new TradeJournal with this data.
     */
    create: XOR<TradeJournalCreateInput, TradeJournalUncheckedCreateInput>
    /**
     * In case the TradeJournal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TradeJournalUpdateInput, TradeJournalUncheckedUpdateInput>
  }

  /**
   * TradeJournal delete
   */
  export type TradeJournalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
    /**
     * Filter which TradeJournal to delete.
     */
    where: TradeJournalWhereUniqueInput
  }

  /**
   * TradeJournal deleteMany
   */
  export type TradeJournalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradeJournals to delete
     */
    where?: TradeJournalWhereInput
    /**
     * Limit how many TradeJournals to delete.
     */
    limit?: number
  }

  /**
   * TradeJournal without action
   */
  export type TradeJournalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeJournal
     */
    select?: TradeJournalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeJournal
     */
    omit?: TradeJournalOmit<ExtArgs> | null
  }


  /**
   * Model DailyPnL
   */

  export type AggregateDailyPnL = {
    _count: DailyPnLCountAggregateOutputType | null
    _avg: DailyPnLAvgAggregateOutputType | null
    _sum: DailyPnLSumAggregateOutputType | null
    _min: DailyPnLMinAggregateOutputType | null
    _max: DailyPnLMaxAggregateOutputType | null
  }

  export type DailyPnLAvgAggregateOutputType = {
    realizedPnl: number | null
    unrealizedPnl: number | null
    totalPnl: number | null
    equityPnl: number | null
    foPnl: number | null
    commodityPnl: number | null
    charges: number | null
  }

  export type DailyPnLSumAggregateOutputType = {
    realizedPnl: number | null
    unrealizedPnl: number | null
    totalPnl: number | null
    equityPnl: number | null
    foPnl: number | null
    commodityPnl: number | null
    charges: number | null
  }

  export type DailyPnLMinAggregateOutputType = {
    id: string | null
    userId: string | null
    date: Date | null
    realizedPnl: number | null
    unrealizedPnl: number | null
    totalPnl: number | null
    equityPnl: number | null
    foPnl: number | null
    commodityPnl: number | null
    charges: number | null
    createdAt: Date | null
  }

  export type DailyPnLMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    date: Date | null
    realizedPnl: number | null
    unrealizedPnl: number | null
    totalPnl: number | null
    equityPnl: number | null
    foPnl: number | null
    commodityPnl: number | null
    charges: number | null
    createdAt: Date | null
  }

  export type DailyPnLCountAggregateOutputType = {
    id: number
    userId: number
    date: number
    realizedPnl: number
    unrealizedPnl: number
    totalPnl: number
    equityPnl: number
    foPnl: number
    commodityPnl: number
    charges: number
    createdAt: number
    _all: number
  }


  export type DailyPnLAvgAggregateInputType = {
    realizedPnl?: true
    unrealizedPnl?: true
    totalPnl?: true
    equityPnl?: true
    foPnl?: true
    commodityPnl?: true
    charges?: true
  }

  export type DailyPnLSumAggregateInputType = {
    realizedPnl?: true
    unrealizedPnl?: true
    totalPnl?: true
    equityPnl?: true
    foPnl?: true
    commodityPnl?: true
    charges?: true
  }

  export type DailyPnLMinAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    realizedPnl?: true
    unrealizedPnl?: true
    totalPnl?: true
    equityPnl?: true
    foPnl?: true
    commodityPnl?: true
    charges?: true
    createdAt?: true
  }

  export type DailyPnLMaxAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    realizedPnl?: true
    unrealizedPnl?: true
    totalPnl?: true
    equityPnl?: true
    foPnl?: true
    commodityPnl?: true
    charges?: true
    createdAt?: true
  }

  export type DailyPnLCountAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    realizedPnl?: true
    unrealizedPnl?: true
    totalPnl?: true
    equityPnl?: true
    foPnl?: true
    commodityPnl?: true
    charges?: true
    createdAt?: true
    _all?: true
  }

  export type DailyPnLAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyPnL to aggregate.
     */
    where?: DailyPnLWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPnLS to fetch.
     */
    orderBy?: DailyPnLOrderByWithRelationInput | DailyPnLOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyPnLWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPnLS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPnLS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyPnLS
    **/
    _count?: true | DailyPnLCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyPnLAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyPnLSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyPnLMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyPnLMaxAggregateInputType
  }

  export type GetDailyPnLAggregateType<T extends DailyPnLAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyPnL]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyPnL[P]>
      : GetScalarType<T[P], AggregateDailyPnL[P]>
  }




  export type DailyPnLGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyPnLWhereInput
    orderBy?: DailyPnLOrderByWithAggregationInput | DailyPnLOrderByWithAggregationInput[]
    by: DailyPnLScalarFieldEnum[] | DailyPnLScalarFieldEnum
    having?: DailyPnLScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyPnLCountAggregateInputType | true
    _avg?: DailyPnLAvgAggregateInputType
    _sum?: DailyPnLSumAggregateInputType
    _min?: DailyPnLMinAggregateInputType
    _max?: DailyPnLMaxAggregateInputType
  }

  export type DailyPnLGroupByOutputType = {
    id: string
    userId: string
    date: Date
    realizedPnl: number
    unrealizedPnl: number
    totalPnl: number
    equityPnl: number
    foPnl: number
    commodityPnl: number
    charges: number
    createdAt: Date
    _count: DailyPnLCountAggregateOutputType | null
    _avg: DailyPnLAvgAggregateOutputType | null
    _sum: DailyPnLSumAggregateOutputType | null
    _min: DailyPnLMinAggregateOutputType | null
    _max: DailyPnLMaxAggregateOutputType | null
  }

  type GetDailyPnLGroupByPayload<T extends DailyPnLGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyPnLGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyPnLGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyPnLGroupByOutputType[P]>
            : GetScalarType<T[P], DailyPnLGroupByOutputType[P]>
        }
      >
    >


  export type DailyPnLSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    realizedPnl?: boolean
    unrealizedPnl?: boolean
    totalPnl?: boolean
    equityPnl?: boolean
    foPnl?: boolean
    commodityPnl?: boolean
    charges?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyPnL"]>

  export type DailyPnLSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    realizedPnl?: boolean
    unrealizedPnl?: boolean
    totalPnl?: boolean
    equityPnl?: boolean
    foPnl?: boolean
    commodityPnl?: boolean
    charges?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyPnL"]>

  export type DailyPnLSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    realizedPnl?: boolean
    unrealizedPnl?: boolean
    totalPnl?: boolean
    equityPnl?: boolean
    foPnl?: boolean
    commodityPnl?: boolean
    charges?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["dailyPnL"]>

  export type DailyPnLSelectScalar = {
    id?: boolean
    userId?: boolean
    date?: boolean
    realizedPnl?: boolean
    unrealizedPnl?: boolean
    totalPnl?: boolean
    equityPnl?: boolean
    foPnl?: boolean
    commodityPnl?: boolean
    charges?: boolean
    createdAt?: boolean
  }

  export type DailyPnLOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "date" | "realizedPnl" | "unrealizedPnl" | "totalPnl" | "equityPnl" | "foPnl" | "commodityPnl" | "charges" | "createdAt", ExtArgs["result"]["dailyPnL"]>

  export type $DailyPnLPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyPnL"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      date: Date
      realizedPnl: number
      unrealizedPnl: number
      totalPnl: number
      equityPnl: number
      foPnl: number
      commodityPnl: number
      charges: number
      createdAt: Date
    }, ExtArgs["result"]["dailyPnL"]>
    composites: {}
  }

  type DailyPnLGetPayload<S extends boolean | null | undefined | DailyPnLDefaultArgs> = $Result.GetResult<Prisma.$DailyPnLPayload, S>

  type DailyPnLCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DailyPnLFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DailyPnLCountAggregateInputType | true
    }

  export interface DailyPnLDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyPnL'], meta: { name: 'DailyPnL' } }
    /**
     * Find zero or one DailyPnL that matches the filter.
     * @param {DailyPnLFindUniqueArgs} args - Arguments to find a DailyPnL
     * @example
     * // Get one DailyPnL
     * const dailyPnL = await prisma.dailyPnL.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyPnLFindUniqueArgs>(args: SelectSubset<T, DailyPnLFindUniqueArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DailyPnL that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DailyPnLFindUniqueOrThrowArgs} args - Arguments to find a DailyPnL
     * @example
     * // Get one DailyPnL
     * const dailyPnL = await prisma.dailyPnL.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyPnLFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyPnLFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyPnL that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPnLFindFirstArgs} args - Arguments to find a DailyPnL
     * @example
     * // Get one DailyPnL
     * const dailyPnL = await prisma.dailyPnL.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyPnLFindFirstArgs>(args?: SelectSubset<T, DailyPnLFindFirstArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DailyPnL that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPnLFindFirstOrThrowArgs} args - Arguments to find a DailyPnL
     * @example
     * // Get one DailyPnL
     * const dailyPnL = await prisma.dailyPnL.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyPnLFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyPnLFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DailyPnLS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPnLFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyPnLS
     * const dailyPnLS = await prisma.dailyPnL.findMany()
     * 
     * // Get first 10 DailyPnLS
     * const dailyPnLS = await prisma.dailyPnL.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyPnLWithIdOnly = await prisma.dailyPnL.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyPnLFindManyArgs>(args?: SelectSubset<T, DailyPnLFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DailyPnL.
     * @param {DailyPnLCreateArgs} args - Arguments to create a DailyPnL.
     * @example
     * // Create one DailyPnL
     * const DailyPnL = await prisma.dailyPnL.create({
     *   data: {
     *     // ... data to create a DailyPnL
     *   }
     * })
     * 
     */
    create<T extends DailyPnLCreateArgs>(args: SelectSubset<T, DailyPnLCreateArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DailyPnLS.
     * @param {DailyPnLCreateManyArgs} args - Arguments to create many DailyPnLS.
     * @example
     * // Create many DailyPnLS
     * const dailyPnL = await prisma.dailyPnL.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyPnLCreateManyArgs>(args?: SelectSubset<T, DailyPnLCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DailyPnLS and returns the data saved in the database.
     * @param {DailyPnLCreateManyAndReturnArgs} args - Arguments to create many DailyPnLS.
     * @example
     * // Create many DailyPnLS
     * const dailyPnL = await prisma.dailyPnL.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DailyPnLS and only return the `id`
     * const dailyPnLWithIdOnly = await prisma.dailyPnL.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DailyPnLCreateManyAndReturnArgs>(args?: SelectSubset<T, DailyPnLCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DailyPnL.
     * @param {DailyPnLDeleteArgs} args - Arguments to delete one DailyPnL.
     * @example
     * // Delete one DailyPnL
     * const DailyPnL = await prisma.dailyPnL.delete({
     *   where: {
     *     // ... filter to delete one DailyPnL
     *   }
     * })
     * 
     */
    delete<T extends DailyPnLDeleteArgs>(args: SelectSubset<T, DailyPnLDeleteArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DailyPnL.
     * @param {DailyPnLUpdateArgs} args - Arguments to update one DailyPnL.
     * @example
     * // Update one DailyPnL
     * const dailyPnL = await prisma.dailyPnL.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyPnLUpdateArgs>(args: SelectSubset<T, DailyPnLUpdateArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DailyPnLS.
     * @param {DailyPnLDeleteManyArgs} args - Arguments to filter DailyPnLS to delete.
     * @example
     * // Delete a few DailyPnLS
     * const { count } = await prisma.dailyPnL.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyPnLDeleteManyArgs>(args?: SelectSubset<T, DailyPnLDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyPnLS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPnLUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyPnLS
     * const dailyPnL = await prisma.dailyPnL.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyPnLUpdateManyArgs>(args: SelectSubset<T, DailyPnLUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyPnLS and returns the data updated in the database.
     * @param {DailyPnLUpdateManyAndReturnArgs} args - Arguments to update many DailyPnLS.
     * @example
     * // Update many DailyPnLS
     * const dailyPnL = await prisma.dailyPnL.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DailyPnLS and only return the `id`
     * const dailyPnLWithIdOnly = await prisma.dailyPnL.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DailyPnLUpdateManyAndReturnArgs>(args: SelectSubset<T, DailyPnLUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DailyPnL.
     * @param {DailyPnLUpsertArgs} args - Arguments to update or create a DailyPnL.
     * @example
     * // Update or create a DailyPnL
     * const dailyPnL = await prisma.dailyPnL.upsert({
     *   create: {
     *     // ... data to create a DailyPnL
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyPnL we want to update
     *   }
     * })
     */
    upsert<T extends DailyPnLUpsertArgs>(args: SelectSubset<T, DailyPnLUpsertArgs<ExtArgs>>): Prisma__DailyPnLClient<$Result.GetResult<Prisma.$DailyPnLPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DailyPnLS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPnLCountArgs} args - Arguments to filter DailyPnLS to count.
     * @example
     * // Count the number of DailyPnLS
     * const count = await prisma.dailyPnL.count({
     *   where: {
     *     // ... the filter for the DailyPnLS we want to count
     *   }
     * })
    **/
    count<T extends DailyPnLCountArgs>(
      args?: Subset<T, DailyPnLCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyPnLCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyPnL.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPnLAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyPnLAggregateArgs>(args: Subset<T, DailyPnLAggregateArgs>): Prisma.PrismaPromise<GetDailyPnLAggregateType<T>>

    /**
     * Group by DailyPnL.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyPnLGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyPnLGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyPnLGroupByArgs['orderBy'] }
        : { orderBy?: DailyPnLGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyPnLGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyPnLGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyPnL model
   */
  readonly fields: DailyPnLFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyPnL.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyPnLClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyPnL model
   */
  interface DailyPnLFieldRefs {
    readonly id: FieldRef<"DailyPnL", 'String'>
    readonly userId: FieldRef<"DailyPnL", 'String'>
    readonly date: FieldRef<"DailyPnL", 'DateTime'>
    readonly realizedPnl: FieldRef<"DailyPnL", 'Float'>
    readonly unrealizedPnl: FieldRef<"DailyPnL", 'Float'>
    readonly totalPnl: FieldRef<"DailyPnL", 'Float'>
    readonly equityPnl: FieldRef<"DailyPnL", 'Float'>
    readonly foPnl: FieldRef<"DailyPnL", 'Float'>
    readonly commodityPnl: FieldRef<"DailyPnL", 'Float'>
    readonly charges: FieldRef<"DailyPnL", 'Float'>
    readonly createdAt: FieldRef<"DailyPnL", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DailyPnL findUnique
   */
  export type DailyPnLFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * Filter, which DailyPnL to fetch.
     */
    where: DailyPnLWhereUniqueInput
  }

  /**
   * DailyPnL findUniqueOrThrow
   */
  export type DailyPnLFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * Filter, which DailyPnL to fetch.
     */
    where: DailyPnLWhereUniqueInput
  }

  /**
   * DailyPnL findFirst
   */
  export type DailyPnLFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * Filter, which DailyPnL to fetch.
     */
    where?: DailyPnLWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPnLS to fetch.
     */
    orderBy?: DailyPnLOrderByWithRelationInput | DailyPnLOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyPnLS.
     */
    cursor?: DailyPnLWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPnLS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPnLS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyPnLS.
     */
    distinct?: DailyPnLScalarFieldEnum | DailyPnLScalarFieldEnum[]
  }

  /**
   * DailyPnL findFirstOrThrow
   */
  export type DailyPnLFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * Filter, which DailyPnL to fetch.
     */
    where?: DailyPnLWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPnLS to fetch.
     */
    orderBy?: DailyPnLOrderByWithRelationInput | DailyPnLOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyPnLS.
     */
    cursor?: DailyPnLWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPnLS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPnLS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyPnLS.
     */
    distinct?: DailyPnLScalarFieldEnum | DailyPnLScalarFieldEnum[]
  }

  /**
   * DailyPnL findMany
   */
  export type DailyPnLFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * Filter, which DailyPnLS to fetch.
     */
    where?: DailyPnLWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyPnLS to fetch.
     */
    orderBy?: DailyPnLOrderByWithRelationInput | DailyPnLOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyPnLS.
     */
    cursor?: DailyPnLWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyPnLS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyPnLS.
     */
    skip?: number
    distinct?: DailyPnLScalarFieldEnum | DailyPnLScalarFieldEnum[]
  }

  /**
   * DailyPnL create
   */
  export type DailyPnLCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * The data needed to create a DailyPnL.
     */
    data: XOR<DailyPnLCreateInput, DailyPnLUncheckedCreateInput>
  }

  /**
   * DailyPnL createMany
   */
  export type DailyPnLCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyPnLS.
     */
    data: DailyPnLCreateManyInput | DailyPnLCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyPnL createManyAndReturn
   */
  export type DailyPnLCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * The data used to create many DailyPnLS.
     */
    data: DailyPnLCreateManyInput | DailyPnLCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyPnL update
   */
  export type DailyPnLUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * The data needed to update a DailyPnL.
     */
    data: XOR<DailyPnLUpdateInput, DailyPnLUncheckedUpdateInput>
    /**
     * Choose, which DailyPnL to update.
     */
    where: DailyPnLWhereUniqueInput
  }

  /**
   * DailyPnL updateMany
   */
  export type DailyPnLUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyPnLS.
     */
    data: XOR<DailyPnLUpdateManyMutationInput, DailyPnLUncheckedUpdateManyInput>
    /**
     * Filter which DailyPnLS to update
     */
    where?: DailyPnLWhereInput
    /**
     * Limit how many DailyPnLS to update.
     */
    limit?: number
  }

  /**
   * DailyPnL updateManyAndReturn
   */
  export type DailyPnLUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * The data used to update DailyPnLS.
     */
    data: XOR<DailyPnLUpdateManyMutationInput, DailyPnLUncheckedUpdateManyInput>
    /**
     * Filter which DailyPnLS to update
     */
    where?: DailyPnLWhereInput
    /**
     * Limit how many DailyPnLS to update.
     */
    limit?: number
  }

  /**
   * DailyPnL upsert
   */
  export type DailyPnLUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * The filter to search for the DailyPnL to update in case it exists.
     */
    where: DailyPnLWhereUniqueInput
    /**
     * In case the DailyPnL found by the `where` argument doesn't exist, create a new DailyPnL with this data.
     */
    create: XOR<DailyPnLCreateInput, DailyPnLUncheckedCreateInput>
    /**
     * In case the DailyPnL was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyPnLUpdateInput, DailyPnLUncheckedUpdateInput>
  }

  /**
   * DailyPnL delete
   */
  export type DailyPnLDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
    /**
     * Filter which DailyPnL to delete.
     */
    where: DailyPnLWhereUniqueInput
  }

  /**
   * DailyPnL deleteMany
   */
  export type DailyPnLDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyPnLS to delete
     */
    where?: DailyPnLWhereInput
    /**
     * Limit how many DailyPnLS to delete.
     */
    limit?: number
  }

  /**
   * DailyPnL without action
   */
  export type DailyPnLDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyPnL
     */
    select?: DailyPnLSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DailyPnL
     */
    omit?: DailyPnLOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    panNumber: 'panNumber',
    aadhaarNumber: 'aadhaarNumber',
    dateOfBirth: 'dateOfBirth',
    kycStatus: 'kycStatus',
    accountType: 'accountType',
    role: 'role',
    isActive: 'isActive',
    twoFactorEnabled: 'twoFactorEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    state: 'state',
    pincode: 'pincode',
    fatherName: 'fatherName',
    motherName: 'motherName',
    maritalStatus: 'maritalStatus',
    country: 'country',
    occupation: 'occupation',
    annualIncome: 'annualIncome',
    tradingExperience: 'tradingExperience',
    riskProfile: 'riskProfile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const BankAccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    accountNumber: 'accountNumber',
    ifscCode: 'ifscCode',
    bankName: 'bankName',
    branchName: 'branchName',
    accountHolderName: 'accountHolderName',
    accountType: 'accountType',
    isPrimary: 'isPrimary',
    isVerified: 'isVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BankAccountScalarFieldEnum = (typeof BankAccountScalarFieldEnum)[keyof typeof BankAccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    deviceType: 'deviceType',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const FundTransactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    transactionType: 'transactionType',
    amount: 'amount',
    status: 'status',
    paymentMode: 'paymentMode',
    utrNumber: 'utrNumber',
    bankAccountId: 'bankAccountId',
    remarks: 'remarks',
    processedAt: 'processedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FundTransactionScalarFieldEnum = (typeof FundTransactionScalarFieldEnum)[keyof typeof FundTransactionScalarFieldEnum]


  export const MarginScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    availableCash: 'availableCash',
    usedMargin: 'usedMargin',
    availableMargin: 'availableMargin',
    collateralValue: 'collateralValue',
    openingBalance: 'openingBalance',
    payin: 'payin',
    payout: 'payout',
    spanMargin: 'spanMargin',
    exposureMargin: 'exposureMargin',
    optionPremium: 'optionPremium',
    updatedAt: 'updatedAt'
  };

  export type MarginScalarFieldEnum = (typeof MarginScalarFieldEnum)[keyof typeof MarginScalarFieldEnum]


  export const InstrumentScalarFieldEnum: {
    id: 'id',
    instrumentToken: 'instrumentToken',
    exchangeToken: 'exchangeToken',
    tradingSymbol: 'tradingSymbol',
    name: 'name',
    exchange: 'exchange',
    segment: 'segment',
    instrumentType: 'instrumentType',
    tickSize: 'tickSize',
    lotSize: 'lotSize',
    expiry: 'expiry',
    strike: 'strike',
    isin: 'isin',
    isActive: 'isActive',
    lastPrice: 'lastPrice',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InstrumentScalarFieldEnum = (typeof InstrumentScalarFieldEnum)[keyof typeof InstrumentScalarFieldEnum]


  export const MarketDepthScalarFieldEnum: {
    id: 'id',
    instrumentId: 'instrumentId',
    side: 'side',
    price: 'price',
    quantity: 'quantity',
    orders: 'orders',
    timestamp: 'timestamp'
  };

  export type MarketDepthScalarFieldEnum = (typeof MarketDepthScalarFieldEnum)[keyof typeof MarketDepthScalarFieldEnum]


  export const PriceHistoryScalarFieldEnum: {
    id: 'id',
    instrumentId: 'instrumentId',
    open: 'open',
    high: 'high',
    low: 'low',
    close: 'close',
    volume: 'volume',
    ohlcDate: 'ohlcDate',
    interval: 'interval'
  };

  export type PriceHistoryScalarFieldEnum = (typeof PriceHistoryScalarFieldEnum)[keyof typeof PriceHistoryScalarFieldEnum]


  export const PortfolioScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    totalValue: 'totalValue',
    investedValue: 'investedValue',
    currentValue: 'currentValue',
    dayChange: 'dayChange',
    dayChangePercent: 'dayChangePercent',
    totalPnl: 'totalPnl',
    totalPnlPercent: 'totalPnlPercent',
    xirr: 'xirr',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type PortfolioScalarFieldEnum = (typeof PortfolioScalarFieldEnum)[keyof typeof PortfolioScalarFieldEnum]


  export const HoldingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    instrumentId: 'instrumentId',
    quantity: 'quantity',
    averagePrice: 'averagePrice',
    lastPrice: 'lastPrice',
    pnl: 'pnl',
    dayChange: 'dayChange',
    dayChangePercent: 'dayChangePercent',
    collateralQuantity: 'collateralQuantity',
    collateralType: 'collateralType',
    product: 'product',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HoldingScalarFieldEnum = (typeof HoldingScalarFieldEnum)[keyof typeof HoldingScalarFieldEnum]


  export const PositionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    instrumentId: 'instrumentId',
    product: 'product',
    quantity: 'quantity',
    overnightQuantity: 'overnightQuantity',
    averagePrice: 'averagePrice',
    lastPrice: 'lastPrice',
    value: 'value',
    pnl: 'pnl',
    m2m: 'm2m',
    unrealised: 'unrealised',
    realised: 'realised',
    buyQuantity: 'buyQuantity',
    buyValue: 'buyValue',
    buyPrice: 'buyPrice',
    sellQuantity: 'sellQuantity',
    sellValue: 'sellValue',
    sellPrice: 'sellPrice',
    multiplier: 'multiplier',
    tradingSymbol: 'tradingSymbol',
    exchange: 'exchange',
    positionType: 'positionType',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    userId: 'userId',
    instrumentId: 'instrumentId',
    parentOrderId: 'parentOrderId',
    exchangeOrderId: 'exchangeOrderId',
    exchangeTimestamp: 'exchangeTimestamp',
    placedBy: 'placedBy',
    variety: 'variety',
    orderType: 'orderType',
    transactionType: 'transactionType',
    validity: 'validity',
    product: 'product',
    exchange: 'exchange',
    tradingSymbol: 'tradingSymbol',
    quantity: 'quantity',
    disclosedQuantity: 'disclosedQuantity',
    price: 'price',
    triggerPrice: 'triggerPrice',
    averagePrice: 'averagePrice',
    filledQuantity: 'filledQuantity',
    pendingQuantity: 'pendingQuantity',
    cancelledQuantity: 'cancelledQuantity',
    status: 'status',
    statusMessage: 'statusMessage',
    tag: 'tag',
    clientOrderId: 'clientOrderId',
    orderTimestamp: 'orderTimestamp',
    exchangeUpdateTime: 'exchangeUpdateTime',
    rejectedBy: 'rejectedBy',
    cancelledBy: 'cancelledBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const TradeScalarFieldEnum: {
    id: 'id',
    tradeId: 'tradeId',
    orderId: 'orderId',
    userId: 'userId',
    instrumentId: 'instrumentId',
    exchange: 'exchange',
    tradingSymbol: 'tradingSymbol',
    transactionType: 'transactionType',
    product: 'product',
    quantity: 'quantity',
    price: 'price',
    value: 'value',
    exchangeTimestamp: 'exchangeTimestamp',
    createdAt: 'createdAt'
  };

  export type TradeScalarFieldEnum = (typeof TradeScalarFieldEnum)[keyof typeof TradeScalarFieldEnum]


  export const TradeChargesScalarFieldEnum: {
    id: 'id',
    tradeId: 'tradeId',
    brokerage: 'brokerage',
    stt: 'stt',
    exchangeTxnCharge: 'exchangeTxnCharge',
    gst: 'gst',
    sebiTurnover: 'sebiTurnover',
    stampDuty: 'stampDuty',
    totalCharges: 'totalCharges',
    netAmount: 'netAmount'
  };

  export type TradeChargesScalarFieldEnum = (typeof TradeChargesScalarFieldEnum)[keyof typeof TradeChargesScalarFieldEnum]


  export const GTTOrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    gttType: 'gttType',
    instrumentId: 'instrumentId',
    tradingSymbol: 'tradingSymbol',
    exchange: 'exchange',
    triggerType: 'triggerType',
    triggerPrice: 'triggerPrice',
    lastPrice: 'lastPrice',
    limitPrice: 'limitPrice',
    stopLossPrice: 'stopLossPrice',
    quantity: 'quantity',
    product: 'product',
    orderType: 'orderType',
    status: 'status',
    expiresAt: 'expiresAt',
    triggeredAt: 'triggeredAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GTTOrderScalarFieldEnum = (typeof GTTOrderScalarFieldEnum)[keyof typeof GTTOrderScalarFieldEnum]


  export const WatchlistScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WatchlistScalarFieldEnum = (typeof WatchlistScalarFieldEnum)[keyof typeof WatchlistScalarFieldEnum]


  export const WatchlistItemScalarFieldEnum: {
    id: 'id',
    watchlistId: 'watchlistId',
    instrumentId: 'instrumentId',
    sortOrder: 'sortOrder',
    addedAt: 'addedAt'
  };

  export type WatchlistItemScalarFieldEnum = (typeof WatchlistItemScalarFieldEnum)[keyof typeof WatchlistItemScalarFieldEnum]


  export const AlertScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    instrumentId: 'instrumentId',
    alertType: 'alertType',
    message: 'message',
    triggerPrice: 'triggerPrice',
    condition: 'condition',
    isTriggered: 'isTriggered',
    isRead: 'isRead',
    triggeredAt: 'triggeredAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type AlertScalarFieldEnum = (typeof AlertScalarFieldEnum)[keyof typeof AlertScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    notificationType: 'notificationType',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    priority: 'priority',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const BasketScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description',
    totalValue: 'totalValue',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BasketScalarFieldEnum = (typeof BasketScalarFieldEnum)[keyof typeof BasketScalarFieldEnum]


  export const BasketItemScalarFieldEnum: {
    id: 'id',
    basketId: 'basketId',
    instrumentId: 'instrumentId',
    tradingSymbol: 'tradingSymbol',
    exchange: 'exchange',
    transactionType: 'transactionType',
    quantity: 'quantity',
    orderType: 'orderType',
    price: 'price',
    triggerPrice: 'triggerPrice',
    product: 'product',
    sortOrder: 'sortOrder'
  };

  export type BasketItemScalarFieldEnum = (typeof BasketItemScalarFieldEnum)[keyof typeof BasketItemScalarFieldEnum]


  export const CorporateActionScalarFieldEnum: {
    id: 'id',
    instrumentId: 'instrumentId',
    actionType: 'actionType',
    exDate: 'exDate',
    recordDate: 'recordDate',
    announcementDate: 'announcementDate',
    description: 'description',
    oldSymbol: 'oldSymbol',
    newSymbol: 'newSymbol',
    ratio: 'ratio',
    dividendAmount: 'dividendAmount',
    isProcessed: 'isProcessed',
    processedAt: 'processedAt',
    createdAt: 'createdAt'
  };

  export type CorporateActionScalarFieldEnum = (typeof CorporateActionScalarFieldEnum)[keyof typeof CorporateActionScalarFieldEnum]


  export const TradeJournalScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tradeId: 'tradeId',
    orderId: 'orderId',
    date: 'date',
    notes: 'notes',
    tags: 'tags',
    strategy: 'strategy',
    emotionalState: 'emotionalState',
    learnings: 'learnings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TradeJournalScalarFieldEnum = (typeof TradeJournalScalarFieldEnum)[keyof typeof TradeJournalScalarFieldEnum]


  export const DailyPnLScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    date: 'date',
    realizedPnl: 'realizedPnl',
    unrealizedPnl: 'unrealizedPnl',
    totalPnl: 'totalPnl',
    equityPnl: 'equityPnl',
    foPnl: 'foPnl',
    commodityPnl: 'commodityPnl',
    charges: 'charges',
    createdAt: 'createdAt'
  };

  export type DailyPnLScalarFieldEnum = (typeof DailyPnLScalarFieldEnum)[keyof typeof DailyPnLScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    panNumber: 'panNumber',
    aadhaarNumber: 'aadhaarNumber'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const UserProfileOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    state: 'state',
    pincode: 'pincode',
    fatherName: 'fatherName',
    motherName: 'motherName',
    maritalStatus: 'maritalStatus',
    country: 'country',
    occupation: 'occupation',
    annualIncome: 'annualIncome',
    tradingExperience: 'tradingExperience'
  };

  export type UserProfileOrderByRelevanceFieldEnum = (typeof UserProfileOrderByRelevanceFieldEnum)[keyof typeof UserProfileOrderByRelevanceFieldEnum]


  export const BankAccountOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    accountNumber: 'accountNumber',
    ifscCode: 'ifscCode',
    bankName: 'bankName',
    branchName: 'branchName',
    accountHolderName: 'accountHolderName'
  };

  export type BankAccountOrderByRelevanceFieldEnum = (typeof BankAccountOrderByRelevanceFieldEnum)[keyof typeof BankAccountOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    deviceType: 'deviceType'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const FundTransactionOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    utrNumber: 'utrNumber',
    bankAccountId: 'bankAccountId',
    remarks: 'remarks'
  };

  export type FundTransactionOrderByRelevanceFieldEnum = (typeof FundTransactionOrderByRelevanceFieldEnum)[keyof typeof FundTransactionOrderByRelevanceFieldEnum]


  export const MarginOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type MarginOrderByRelevanceFieldEnum = (typeof MarginOrderByRelevanceFieldEnum)[keyof typeof MarginOrderByRelevanceFieldEnum]


  export const InstrumentOrderByRelevanceFieldEnum: {
    id: 'id',
    instrumentToken: 'instrumentToken',
    exchangeToken: 'exchangeToken',
    tradingSymbol: 'tradingSymbol',
    name: 'name',
    isin: 'isin'
  };

  export type InstrumentOrderByRelevanceFieldEnum = (typeof InstrumentOrderByRelevanceFieldEnum)[keyof typeof InstrumentOrderByRelevanceFieldEnum]


  export const MarketDepthOrderByRelevanceFieldEnum: {
    id: 'id',
    instrumentId: 'instrumentId'
  };

  export type MarketDepthOrderByRelevanceFieldEnum = (typeof MarketDepthOrderByRelevanceFieldEnum)[keyof typeof MarketDepthOrderByRelevanceFieldEnum]


  export const PriceHistoryOrderByRelevanceFieldEnum: {
    id: 'id',
    instrumentId: 'instrumentId',
    interval: 'interval'
  };

  export type PriceHistoryOrderByRelevanceFieldEnum = (typeof PriceHistoryOrderByRelevanceFieldEnum)[keyof typeof PriceHistoryOrderByRelevanceFieldEnum]


  export const PortfolioOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type PortfolioOrderByRelevanceFieldEnum = (typeof PortfolioOrderByRelevanceFieldEnum)[keyof typeof PortfolioOrderByRelevanceFieldEnum]


  export const HoldingOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    instrumentId: 'instrumentId',
    collateralType: 'collateralType'
  };

  export type HoldingOrderByRelevanceFieldEnum = (typeof HoldingOrderByRelevanceFieldEnum)[keyof typeof HoldingOrderByRelevanceFieldEnum]


  export const PositionOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    instrumentId: 'instrumentId',
    tradingSymbol: 'tradingSymbol'
  };

  export type PositionOrderByRelevanceFieldEnum = (typeof PositionOrderByRelevanceFieldEnum)[keyof typeof PositionOrderByRelevanceFieldEnum]


  export const OrderOrderByRelevanceFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    userId: 'userId',
    instrumentId: 'instrumentId',
    parentOrderId: 'parentOrderId',
    exchangeOrderId: 'exchangeOrderId',
    placedBy: 'placedBy',
    tradingSymbol: 'tradingSymbol',
    statusMessage: 'statusMessage',
    tag: 'tag',
    clientOrderId: 'clientOrderId',
    rejectedBy: 'rejectedBy',
    cancelledBy: 'cancelledBy'
  };

  export type OrderOrderByRelevanceFieldEnum = (typeof OrderOrderByRelevanceFieldEnum)[keyof typeof OrderOrderByRelevanceFieldEnum]


  export const TradeOrderByRelevanceFieldEnum: {
    id: 'id',
    tradeId: 'tradeId',
    orderId: 'orderId',
    userId: 'userId',
    instrumentId: 'instrumentId',
    tradingSymbol: 'tradingSymbol'
  };

  export type TradeOrderByRelevanceFieldEnum = (typeof TradeOrderByRelevanceFieldEnum)[keyof typeof TradeOrderByRelevanceFieldEnum]


  export const TradeChargesOrderByRelevanceFieldEnum: {
    id: 'id',
    tradeId: 'tradeId'
  };

  export type TradeChargesOrderByRelevanceFieldEnum = (typeof TradeChargesOrderByRelevanceFieldEnum)[keyof typeof TradeChargesOrderByRelevanceFieldEnum]


  export const GTTOrderOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    instrumentId: 'instrumentId',
    tradingSymbol: 'tradingSymbol'
  };

  export type GTTOrderOrderByRelevanceFieldEnum = (typeof GTTOrderOrderByRelevanceFieldEnum)[keyof typeof GTTOrderOrderByRelevanceFieldEnum]


  export const WatchlistOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name'
  };

  export type WatchlistOrderByRelevanceFieldEnum = (typeof WatchlistOrderByRelevanceFieldEnum)[keyof typeof WatchlistOrderByRelevanceFieldEnum]


  export const WatchlistItemOrderByRelevanceFieldEnum: {
    id: 'id',
    watchlistId: 'watchlistId',
    instrumentId: 'instrumentId'
  };

  export type WatchlistItemOrderByRelevanceFieldEnum = (typeof WatchlistItemOrderByRelevanceFieldEnum)[keyof typeof WatchlistItemOrderByRelevanceFieldEnum]


  export const AlertOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    instrumentId: 'instrumentId',
    message: 'message',
    condition: 'condition'
  };

  export type AlertOrderByRelevanceFieldEnum = (typeof AlertOrderByRelevanceFieldEnum)[keyof typeof AlertOrderByRelevanceFieldEnum]


  export const NotificationOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message'
  };

  export type NotificationOrderByRelevanceFieldEnum = (typeof NotificationOrderByRelevanceFieldEnum)[keyof typeof NotificationOrderByRelevanceFieldEnum]


  export const BasketOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    description: 'description'
  };

  export type BasketOrderByRelevanceFieldEnum = (typeof BasketOrderByRelevanceFieldEnum)[keyof typeof BasketOrderByRelevanceFieldEnum]


  export const BasketItemOrderByRelevanceFieldEnum: {
    id: 'id',
    basketId: 'basketId',
    instrumentId: 'instrumentId',
    tradingSymbol: 'tradingSymbol'
  };

  export type BasketItemOrderByRelevanceFieldEnum = (typeof BasketItemOrderByRelevanceFieldEnum)[keyof typeof BasketItemOrderByRelevanceFieldEnum]


  export const CorporateActionOrderByRelevanceFieldEnum: {
    id: 'id',
    instrumentId: 'instrumentId',
    description: 'description',
    oldSymbol: 'oldSymbol',
    newSymbol: 'newSymbol',
    ratio: 'ratio'
  };

  export type CorporateActionOrderByRelevanceFieldEnum = (typeof CorporateActionOrderByRelevanceFieldEnum)[keyof typeof CorporateActionOrderByRelevanceFieldEnum]


  export const TradeJournalOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    tradeId: 'tradeId',
    orderId: 'orderId',
    notes: 'notes',
    tags: 'tags',
    strategy: 'strategy',
    emotionalState: 'emotionalState',
    learnings: 'learnings'
  };

  export type TradeJournalOrderByRelevanceFieldEnum = (typeof TradeJournalOrderByRelevanceFieldEnum)[keyof typeof TradeJournalOrderByRelevanceFieldEnum]


  export const DailyPnLOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type DailyPnLOrderByRelevanceFieldEnum = (typeof DailyPnLOrderByRelevanceFieldEnum)[keyof typeof DailyPnLOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'KYCStatus'
   */
  export type EnumKYCStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KYCStatus'>
    


  /**
   * Reference to a field of type 'KYCStatus[]'
   */
  export type ListEnumKYCStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KYCStatus[]'>
    


  /**
   * Reference to a field of type 'AccountType'
   */
  export type EnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType'>
    


  /**
   * Reference to a field of type 'AccountType[]'
   */
  export type ListEnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'RiskProfile'
   */
  export type EnumRiskProfileFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskProfile'>
    


  /**
   * Reference to a field of type 'RiskProfile[]'
   */
  export type ListEnumRiskProfileFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskProfile[]'>
    


  /**
   * Reference to a field of type 'BankAccountType'
   */
  export type EnumBankAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BankAccountType'>
    


  /**
   * Reference to a field of type 'BankAccountType[]'
   */
  export type ListEnumBankAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BankAccountType[]'>
    


  /**
   * Reference to a field of type 'FundTransactionType'
   */
  export type EnumFundTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FundTransactionType'>
    


  /**
   * Reference to a field of type 'FundTransactionType[]'
   */
  export type ListEnumFundTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FundTransactionType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'TransactionStatus'
   */
  export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus'>
    


  /**
   * Reference to a field of type 'TransactionStatus[]'
   */
  export type ListEnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMode'
   */
  export type EnumPaymentModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMode'>
    


  /**
   * Reference to a field of type 'PaymentMode[]'
   */
  export type ListEnumPaymentModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMode[]'>
    


  /**
   * Reference to a field of type 'Exchange'
   */
  export type EnumExchangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Exchange'>
    


  /**
   * Reference to a field of type 'Exchange[]'
   */
  export type ListEnumExchangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Exchange[]'>
    


  /**
   * Reference to a field of type 'Segment'
   */
  export type EnumSegmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Segment'>
    


  /**
   * Reference to a field of type 'Segment[]'
   */
  export type ListEnumSegmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Segment[]'>
    


  /**
   * Reference to a field of type 'InstrumentType'
   */
  export type EnumInstrumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InstrumentType'>
    


  /**
   * Reference to a field of type 'InstrumentType[]'
   */
  export type ListEnumInstrumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InstrumentType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'OrderSide'
   */
  export type EnumOrderSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderSide'>
    


  /**
   * Reference to a field of type 'OrderSide[]'
   */
  export type ListEnumOrderSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderSide[]'>
    


  /**
   * Reference to a field of type 'ProductType'
   */
  export type EnumProductTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductType'>
    


  /**
   * Reference to a field of type 'ProductType[]'
   */
  export type ListEnumProductTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductType[]'>
    


  /**
   * Reference to a field of type 'PositionType'
   */
  export type EnumPositionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PositionType'>
    


  /**
   * Reference to a field of type 'PositionType[]'
   */
  export type ListEnumPositionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PositionType[]'>
    


  /**
   * Reference to a field of type 'OrderVariety'
   */
  export type EnumOrderVarietyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderVariety'>
    


  /**
   * Reference to a field of type 'OrderVariety[]'
   */
  export type ListEnumOrderVarietyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderVariety[]'>
    


  /**
   * Reference to a field of type 'OrderType'
   */
  export type EnumOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderType'>
    


  /**
   * Reference to a field of type 'OrderType[]'
   */
  export type ListEnumOrderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderType[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'OrderValidity'
   */
  export type EnumOrderValidityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderValidity'>
    


  /**
   * Reference to a field of type 'OrderValidity[]'
   */
  export type ListEnumOrderValidityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderValidity[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'GTTType'
   */
  export type EnumGTTTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GTTType'>
    


  /**
   * Reference to a field of type 'GTTType[]'
   */
  export type ListEnumGTTTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GTTType[]'>
    


  /**
   * Reference to a field of type 'TriggerType'
   */
  export type EnumTriggerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TriggerType'>
    


  /**
   * Reference to a field of type 'TriggerType[]'
   */
  export type ListEnumTriggerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TriggerType[]'>
    


  /**
   * Reference to a field of type 'GTTStatus'
   */
  export type EnumGTTStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GTTStatus'>
    


  /**
   * Reference to a field of type 'GTTStatus[]'
   */
  export type ListEnumGTTStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GTTStatus[]'>
    


  /**
   * Reference to a field of type 'AlertType'
   */
  export type EnumAlertTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertType'>
    


  /**
   * Reference to a field of type 'AlertType[]'
   */
  export type ListEnumAlertTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertType[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'CorporateActionType'
   */
  export type EnumCorporateActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CorporateActionType'>
    


  /**
   * Reference to a field of type 'CorporateActionType[]'
   */
  export type ListEnumCorporateActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CorporateActionType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    phone?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    panNumber?: StringNullableFilter<"User"> | string | null
    aadhaarNumber?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    kycStatus?: EnumKYCStatusNullableFilter<"User"> | $Enums.KYCStatus | null
    accountType?: EnumAccountTypeNullableFilter<"User"> | $Enums.AccountType | null
    role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    isActive?: BoolNullableFilter<"User"> | boolean | null
    twoFactorEnabled?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    bankAccounts?: BankAccountListRelationFilter
    funds?: FundTransactionListRelationFilter
    holdings?: HoldingListRelationFilter
    positions?: PositionListRelationFilter
    orders?: OrderListRelationFilter
    trades?: TradeListRelationFilter
    watchlists?: WatchlistListRelationFilter
    portfolios?: PortfolioListRelationFilter
    gttOrders?: GTTOrderListRelationFilter
    baskets?: BasketListRelationFilter
    alerts?: AlertListRelationFilter
    notifications?: NotificationListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    password?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    panNumber?: SortOrderInput | SortOrder
    aadhaarNumber?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    kycStatus?: SortOrderInput | SortOrder
    accountType?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    profile?: UserProfileOrderByWithRelationInput
    bankAccounts?: BankAccountOrderByRelationAggregateInput
    funds?: FundTransactionOrderByRelationAggregateInput
    holdings?: HoldingOrderByRelationAggregateInput
    positions?: PositionOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    trades?: TradeOrderByRelationAggregateInput
    watchlists?: WatchlistOrderByRelationAggregateInput
    portfolios?: PortfolioOrderByRelationAggregateInput
    gttOrders?: GTTOrderOrderByRelationAggregateInput
    baskets?: BasketOrderByRelationAggregateInput
    alerts?: AlertOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    panNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    aadhaarNumber?: StringNullableFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    kycStatus?: EnumKYCStatusNullableFilter<"User"> | $Enums.KYCStatus | null
    accountType?: EnumAccountTypeNullableFilter<"User"> | $Enums.AccountType | null
    role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    isActive?: BoolNullableFilter<"User"> | boolean | null
    twoFactorEnabled?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    bankAccounts?: BankAccountListRelationFilter
    funds?: FundTransactionListRelationFilter
    holdings?: HoldingListRelationFilter
    positions?: PositionListRelationFilter
    orders?: OrderListRelationFilter
    trades?: TradeListRelationFilter
    watchlists?: WatchlistListRelationFilter
    portfolios?: PortfolioListRelationFilter
    gttOrders?: GTTOrderListRelationFilter
    baskets?: BasketListRelationFilter
    alerts?: AlertListRelationFilter
    notifications?: NotificationListRelationFilter
    sessions?: SessionListRelationFilter
  }, "id" | "email" | "phone" | "panNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    password?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    panNumber?: SortOrderInput | SortOrder
    aadhaarNumber?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    kycStatus?: SortOrderInput | SortOrder
    accountType?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    twoFactorEnabled?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    panNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    aadhaarNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    kycStatus?: EnumKYCStatusNullableWithAggregatesFilter<"User"> | $Enums.KYCStatus | null
    accountType?: EnumAccountTypeNullableWithAggregatesFilter<"User"> | $Enums.AccountType | null
    role?: EnumUserRoleNullableWithAggregatesFilter<"User"> | $Enums.UserRole | null
    isActive?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    twoFactorEnabled?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    userId?: StringFilter<"UserProfile"> | string
    addressLine1?: StringFilter<"UserProfile"> | string
    addressLine2?: StringNullableFilter<"UserProfile"> | string | null
    city?: StringFilter<"UserProfile"> | string
    state?: StringFilter<"UserProfile"> | string
    pincode?: StringFilter<"UserProfile"> | string
    fatherName?: StringNullableFilter<"UserProfile"> | string | null
    motherName?: StringNullableFilter<"UserProfile"> | string | null
    maritalStatus?: StringNullableFilter<"UserProfile"> | string | null
    country?: StringFilter<"UserProfile"> | string
    occupation?: StringNullableFilter<"UserProfile"> | string | null
    annualIncome?: StringNullableFilter<"UserProfile"> | string | null
    tradingExperience?: StringNullableFilter<"UserProfile"> | string | null
    riskProfile?: EnumRiskProfileFilter<"UserProfile"> | $Enums.RiskProfile
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    fatherName?: SortOrderInput | SortOrder
    motherName?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    country?: SortOrder
    occupation?: SortOrderInput | SortOrder
    annualIncome?: SortOrderInput | SortOrder
    tradingExperience?: SortOrderInput | SortOrder
    riskProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserProfileOrderByRelevanceInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    addressLine1?: StringFilter<"UserProfile"> | string
    addressLine2?: StringNullableFilter<"UserProfile"> | string | null
    city?: StringFilter<"UserProfile"> | string
    state?: StringFilter<"UserProfile"> | string
    pincode?: StringFilter<"UserProfile"> | string
    fatherName?: StringNullableFilter<"UserProfile"> | string | null
    motherName?: StringNullableFilter<"UserProfile"> | string | null
    maritalStatus?: StringNullableFilter<"UserProfile"> | string | null
    country?: StringFilter<"UserProfile"> | string
    occupation?: StringNullableFilter<"UserProfile"> | string | null
    annualIncome?: StringNullableFilter<"UserProfile"> | string | null
    tradingExperience?: StringNullableFilter<"UserProfile"> | string | null
    riskProfile?: EnumRiskProfileFilter<"UserProfile"> | $Enums.RiskProfile
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrderInput | SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    fatherName?: SortOrderInput | SortOrder
    motherName?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    country?: SortOrder
    occupation?: SortOrderInput | SortOrder
    annualIncome?: SortOrderInput | SortOrder
    tradingExperience?: SortOrderInput | SortOrder
    riskProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfile"> | string
    userId?: StringWithAggregatesFilter<"UserProfile"> | string
    addressLine1?: StringWithAggregatesFilter<"UserProfile"> | string
    addressLine2?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    city?: StringWithAggregatesFilter<"UserProfile"> | string
    state?: StringWithAggregatesFilter<"UserProfile"> | string
    pincode?: StringWithAggregatesFilter<"UserProfile"> | string
    fatherName?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    motherName?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    maritalStatus?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    country?: StringWithAggregatesFilter<"UserProfile"> | string
    occupation?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    annualIncome?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    tradingExperience?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    riskProfile?: EnumRiskProfileWithAggregatesFilter<"UserProfile"> | $Enums.RiskProfile
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type BankAccountWhereInput = {
    AND?: BankAccountWhereInput | BankAccountWhereInput[]
    OR?: BankAccountWhereInput[]
    NOT?: BankAccountWhereInput | BankAccountWhereInput[]
    id?: StringFilter<"BankAccount"> | string
    userId?: StringFilter<"BankAccount"> | string
    accountNumber?: StringFilter<"BankAccount"> | string
    ifscCode?: StringFilter<"BankAccount"> | string
    bankName?: StringFilter<"BankAccount"> | string
    branchName?: StringFilter<"BankAccount"> | string
    accountHolderName?: StringFilter<"BankAccount"> | string
    accountType?: EnumBankAccountTypeFilter<"BankAccount"> | $Enums.BankAccountType
    isPrimary?: BoolFilter<"BankAccount"> | boolean
    isVerified?: BoolFilter<"BankAccount"> | boolean
    createdAt?: DateTimeFilter<"BankAccount"> | Date | string
    updatedAt?: DateTimeFilter<"BankAccount"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BankAccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankName?: SortOrder
    branchName?: SortOrder
    accountHolderName?: SortOrder
    accountType?: SortOrder
    isPrimary?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: BankAccountOrderByRelevanceInput
  }

  export type BankAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BankAccountWhereInput | BankAccountWhereInput[]
    OR?: BankAccountWhereInput[]
    NOT?: BankAccountWhereInput | BankAccountWhereInput[]
    userId?: StringFilter<"BankAccount"> | string
    accountNumber?: StringFilter<"BankAccount"> | string
    ifscCode?: StringFilter<"BankAccount"> | string
    bankName?: StringFilter<"BankAccount"> | string
    branchName?: StringFilter<"BankAccount"> | string
    accountHolderName?: StringFilter<"BankAccount"> | string
    accountType?: EnumBankAccountTypeFilter<"BankAccount"> | $Enums.BankAccountType
    isPrimary?: BoolFilter<"BankAccount"> | boolean
    isVerified?: BoolFilter<"BankAccount"> | boolean
    createdAt?: DateTimeFilter<"BankAccount"> | Date | string
    updatedAt?: DateTimeFilter<"BankAccount"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type BankAccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankName?: SortOrder
    branchName?: SortOrder
    accountHolderName?: SortOrder
    accountType?: SortOrder
    isPrimary?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BankAccountCountOrderByAggregateInput
    _max?: BankAccountMaxOrderByAggregateInput
    _min?: BankAccountMinOrderByAggregateInput
  }

  export type BankAccountScalarWhereWithAggregatesInput = {
    AND?: BankAccountScalarWhereWithAggregatesInput | BankAccountScalarWhereWithAggregatesInput[]
    OR?: BankAccountScalarWhereWithAggregatesInput[]
    NOT?: BankAccountScalarWhereWithAggregatesInput | BankAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BankAccount"> | string
    userId?: StringWithAggregatesFilter<"BankAccount"> | string
    accountNumber?: StringWithAggregatesFilter<"BankAccount"> | string
    ifscCode?: StringWithAggregatesFilter<"BankAccount"> | string
    bankName?: StringWithAggregatesFilter<"BankAccount"> | string
    branchName?: StringWithAggregatesFilter<"BankAccount"> | string
    accountHolderName?: StringWithAggregatesFilter<"BankAccount"> | string
    accountType?: EnumBankAccountTypeWithAggregatesFilter<"BankAccount"> | $Enums.BankAccountType
    isPrimary?: BoolWithAggregatesFilter<"BankAccount"> | boolean
    isVerified?: BoolWithAggregatesFilter<"BankAccount"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BankAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BankAccount"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    deviceType?: StringNullableFilter<"Session"> | string | null
    isActive?: BoolFilter<"Session"> | boolean
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    deviceType?: StringNullableFilter<"Session"> | string | null
    isActive?: BoolFilter<"Session"> | boolean
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    deviceType?: StringNullableWithAggregatesFilter<"Session"> | string | null
    isActive?: BoolWithAggregatesFilter<"Session"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type FundTransactionWhereInput = {
    AND?: FundTransactionWhereInput | FundTransactionWhereInput[]
    OR?: FundTransactionWhereInput[]
    NOT?: FundTransactionWhereInput | FundTransactionWhereInput[]
    id?: StringFilter<"FundTransaction"> | string
    userId?: StringFilter<"FundTransaction"> | string
    transactionType?: EnumFundTransactionTypeFilter<"FundTransaction"> | $Enums.FundTransactionType
    amount?: FloatFilter<"FundTransaction"> | number
    status?: EnumTransactionStatusFilter<"FundTransaction"> | $Enums.TransactionStatus
    paymentMode?: EnumPaymentModeNullableFilter<"FundTransaction"> | $Enums.PaymentMode | null
    utrNumber?: StringNullableFilter<"FundTransaction"> | string | null
    bankAccountId?: StringNullableFilter<"FundTransaction"> | string | null
    remarks?: StringNullableFilter<"FundTransaction"> | string | null
    processedAt?: DateTimeNullableFilter<"FundTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"FundTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FundTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FundTransactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMode?: SortOrderInput | SortOrder
    utrNumber?: SortOrderInput | SortOrder
    bankAccountId?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: FundTransactionOrderByRelevanceInput
  }

  export type FundTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    utrNumber?: string
    AND?: FundTransactionWhereInput | FundTransactionWhereInput[]
    OR?: FundTransactionWhereInput[]
    NOT?: FundTransactionWhereInput | FundTransactionWhereInput[]
    userId?: StringFilter<"FundTransaction"> | string
    transactionType?: EnumFundTransactionTypeFilter<"FundTransaction"> | $Enums.FundTransactionType
    amount?: FloatFilter<"FundTransaction"> | number
    status?: EnumTransactionStatusFilter<"FundTransaction"> | $Enums.TransactionStatus
    paymentMode?: EnumPaymentModeNullableFilter<"FundTransaction"> | $Enums.PaymentMode | null
    bankAccountId?: StringNullableFilter<"FundTransaction"> | string | null
    remarks?: StringNullableFilter<"FundTransaction"> | string | null
    processedAt?: DateTimeNullableFilter<"FundTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"FundTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FundTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "utrNumber">

  export type FundTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMode?: SortOrderInput | SortOrder
    utrNumber?: SortOrderInput | SortOrder
    bankAccountId?: SortOrderInput | SortOrder
    remarks?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FundTransactionCountOrderByAggregateInput
    _avg?: FundTransactionAvgOrderByAggregateInput
    _max?: FundTransactionMaxOrderByAggregateInput
    _min?: FundTransactionMinOrderByAggregateInput
    _sum?: FundTransactionSumOrderByAggregateInput
  }

  export type FundTransactionScalarWhereWithAggregatesInput = {
    AND?: FundTransactionScalarWhereWithAggregatesInput | FundTransactionScalarWhereWithAggregatesInput[]
    OR?: FundTransactionScalarWhereWithAggregatesInput[]
    NOT?: FundTransactionScalarWhereWithAggregatesInput | FundTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FundTransaction"> | string
    userId?: StringWithAggregatesFilter<"FundTransaction"> | string
    transactionType?: EnumFundTransactionTypeWithAggregatesFilter<"FundTransaction"> | $Enums.FundTransactionType
    amount?: FloatWithAggregatesFilter<"FundTransaction"> | number
    status?: EnumTransactionStatusWithAggregatesFilter<"FundTransaction"> | $Enums.TransactionStatus
    paymentMode?: EnumPaymentModeNullableWithAggregatesFilter<"FundTransaction"> | $Enums.PaymentMode | null
    utrNumber?: StringNullableWithAggregatesFilter<"FundTransaction"> | string | null
    bankAccountId?: StringNullableWithAggregatesFilter<"FundTransaction"> | string | null
    remarks?: StringNullableWithAggregatesFilter<"FundTransaction"> | string | null
    processedAt?: DateTimeNullableWithAggregatesFilter<"FundTransaction"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FundTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FundTransaction"> | Date | string
  }

  export type MarginWhereInput = {
    AND?: MarginWhereInput | MarginWhereInput[]
    OR?: MarginWhereInput[]
    NOT?: MarginWhereInput | MarginWhereInput[]
    id?: StringFilter<"Margin"> | string
    userId?: StringFilter<"Margin"> | string
    availableCash?: FloatFilter<"Margin"> | number
    usedMargin?: FloatFilter<"Margin"> | number
    availableMargin?: FloatFilter<"Margin"> | number
    collateralValue?: FloatFilter<"Margin"> | number
    openingBalance?: FloatFilter<"Margin"> | number
    payin?: FloatFilter<"Margin"> | number
    payout?: FloatFilter<"Margin"> | number
    spanMargin?: FloatFilter<"Margin"> | number
    exposureMargin?: FloatFilter<"Margin"> | number
    optionPremium?: FloatFilter<"Margin"> | number
    updatedAt?: DateTimeFilter<"Margin"> | Date | string
  }

  export type MarginOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    availableCash?: SortOrder
    usedMargin?: SortOrder
    availableMargin?: SortOrder
    collateralValue?: SortOrder
    openingBalance?: SortOrder
    payin?: SortOrder
    payout?: SortOrder
    spanMargin?: SortOrder
    exposureMargin?: SortOrder
    optionPremium?: SortOrder
    updatedAt?: SortOrder
    _relevance?: MarginOrderByRelevanceInput
  }

  export type MarginWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: MarginWhereInput | MarginWhereInput[]
    OR?: MarginWhereInput[]
    NOT?: MarginWhereInput | MarginWhereInput[]
    availableCash?: FloatFilter<"Margin"> | number
    usedMargin?: FloatFilter<"Margin"> | number
    availableMargin?: FloatFilter<"Margin"> | number
    collateralValue?: FloatFilter<"Margin"> | number
    openingBalance?: FloatFilter<"Margin"> | number
    payin?: FloatFilter<"Margin"> | number
    payout?: FloatFilter<"Margin"> | number
    spanMargin?: FloatFilter<"Margin"> | number
    exposureMargin?: FloatFilter<"Margin"> | number
    optionPremium?: FloatFilter<"Margin"> | number
    updatedAt?: DateTimeFilter<"Margin"> | Date | string
  }, "id" | "userId">

  export type MarginOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    availableCash?: SortOrder
    usedMargin?: SortOrder
    availableMargin?: SortOrder
    collateralValue?: SortOrder
    openingBalance?: SortOrder
    payin?: SortOrder
    payout?: SortOrder
    spanMargin?: SortOrder
    exposureMargin?: SortOrder
    optionPremium?: SortOrder
    updatedAt?: SortOrder
    _count?: MarginCountOrderByAggregateInput
    _avg?: MarginAvgOrderByAggregateInput
    _max?: MarginMaxOrderByAggregateInput
    _min?: MarginMinOrderByAggregateInput
    _sum?: MarginSumOrderByAggregateInput
  }

  export type MarginScalarWhereWithAggregatesInput = {
    AND?: MarginScalarWhereWithAggregatesInput | MarginScalarWhereWithAggregatesInput[]
    OR?: MarginScalarWhereWithAggregatesInput[]
    NOT?: MarginScalarWhereWithAggregatesInput | MarginScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Margin"> | string
    userId?: StringWithAggregatesFilter<"Margin"> | string
    availableCash?: FloatWithAggregatesFilter<"Margin"> | number
    usedMargin?: FloatWithAggregatesFilter<"Margin"> | number
    availableMargin?: FloatWithAggregatesFilter<"Margin"> | number
    collateralValue?: FloatWithAggregatesFilter<"Margin"> | number
    openingBalance?: FloatWithAggregatesFilter<"Margin"> | number
    payin?: FloatWithAggregatesFilter<"Margin"> | number
    payout?: FloatWithAggregatesFilter<"Margin"> | number
    spanMargin?: FloatWithAggregatesFilter<"Margin"> | number
    exposureMargin?: FloatWithAggregatesFilter<"Margin"> | number
    optionPremium?: FloatWithAggregatesFilter<"Margin"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"Margin"> | Date | string
  }

  export type InstrumentWhereInput = {
    AND?: InstrumentWhereInput | InstrumentWhereInput[]
    OR?: InstrumentWhereInput[]
    NOT?: InstrumentWhereInput | InstrumentWhereInput[]
    id?: StringFilter<"Instrument"> | string
    instrumentToken?: StringFilter<"Instrument"> | string
    exchangeToken?: StringFilter<"Instrument"> | string
    tradingSymbol?: StringFilter<"Instrument"> | string
    name?: StringFilter<"Instrument"> | string
    exchange?: EnumExchangeFilter<"Instrument"> | $Enums.Exchange
    segment?: EnumSegmentFilter<"Instrument"> | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFilter<"Instrument"> | $Enums.InstrumentType
    tickSize?: FloatFilter<"Instrument"> | number
    lotSize?: IntFilter<"Instrument"> | number
    expiry?: DateTimeNullableFilter<"Instrument"> | Date | string | null
    strike?: FloatNullableFilter<"Instrument"> | number | null
    isin?: StringNullableFilter<"Instrument"> | string | null
    isActive?: BoolFilter<"Instrument"> | boolean
    lastPrice?: FloatFilter<"Instrument"> | number
    lastUpdated?: DateTimeFilter<"Instrument"> | Date | string
    createdAt?: DateTimeFilter<"Instrument"> | Date | string
    updatedAt?: DateTimeFilter<"Instrument"> | Date | string
    holdings?: HoldingListRelationFilter
    positions?: PositionListRelationFilter
    orders?: OrderListRelationFilter
    trades?: TradeListRelationFilter
    marketDepth?: MarketDepthListRelationFilter
    priceHistory?: PriceHistoryListRelationFilter
    watchlistItems?: WatchlistItemListRelationFilter
  }

  export type InstrumentOrderByWithRelationInput = {
    id?: SortOrder
    instrumentToken?: SortOrder
    exchangeToken?: SortOrder
    tradingSymbol?: SortOrder
    name?: SortOrder
    exchange?: SortOrder
    segment?: SortOrder
    instrumentType?: SortOrder
    tickSize?: SortOrder
    lotSize?: SortOrder
    expiry?: SortOrderInput | SortOrder
    strike?: SortOrderInput | SortOrder
    isin?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastPrice?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    holdings?: HoldingOrderByRelationAggregateInput
    positions?: PositionOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    trades?: TradeOrderByRelationAggregateInput
    marketDepth?: MarketDepthOrderByRelationAggregateInput
    priceHistory?: PriceHistoryOrderByRelationAggregateInput
    watchlistItems?: WatchlistItemOrderByRelationAggregateInput
    _relevance?: InstrumentOrderByRelevanceInput
  }

  export type InstrumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    instrumentToken?: string
    AND?: InstrumentWhereInput | InstrumentWhereInput[]
    OR?: InstrumentWhereInput[]
    NOT?: InstrumentWhereInput | InstrumentWhereInput[]
    exchangeToken?: StringFilter<"Instrument"> | string
    tradingSymbol?: StringFilter<"Instrument"> | string
    name?: StringFilter<"Instrument"> | string
    exchange?: EnumExchangeFilter<"Instrument"> | $Enums.Exchange
    segment?: EnumSegmentFilter<"Instrument"> | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFilter<"Instrument"> | $Enums.InstrumentType
    tickSize?: FloatFilter<"Instrument"> | number
    lotSize?: IntFilter<"Instrument"> | number
    expiry?: DateTimeNullableFilter<"Instrument"> | Date | string | null
    strike?: FloatNullableFilter<"Instrument"> | number | null
    isin?: StringNullableFilter<"Instrument"> | string | null
    isActive?: BoolFilter<"Instrument"> | boolean
    lastPrice?: FloatFilter<"Instrument"> | number
    lastUpdated?: DateTimeFilter<"Instrument"> | Date | string
    createdAt?: DateTimeFilter<"Instrument"> | Date | string
    updatedAt?: DateTimeFilter<"Instrument"> | Date | string
    holdings?: HoldingListRelationFilter
    positions?: PositionListRelationFilter
    orders?: OrderListRelationFilter
    trades?: TradeListRelationFilter
    marketDepth?: MarketDepthListRelationFilter
    priceHistory?: PriceHistoryListRelationFilter
    watchlistItems?: WatchlistItemListRelationFilter
  }, "id" | "instrumentToken">

  export type InstrumentOrderByWithAggregationInput = {
    id?: SortOrder
    instrumentToken?: SortOrder
    exchangeToken?: SortOrder
    tradingSymbol?: SortOrder
    name?: SortOrder
    exchange?: SortOrder
    segment?: SortOrder
    instrumentType?: SortOrder
    tickSize?: SortOrder
    lotSize?: SortOrder
    expiry?: SortOrderInput | SortOrder
    strike?: SortOrderInput | SortOrder
    isin?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastPrice?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InstrumentCountOrderByAggregateInput
    _avg?: InstrumentAvgOrderByAggregateInput
    _max?: InstrumentMaxOrderByAggregateInput
    _min?: InstrumentMinOrderByAggregateInput
    _sum?: InstrumentSumOrderByAggregateInput
  }

  export type InstrumentScalarWhereWithAggregatesInput = {
    AND?: InstrumentScalarWhereWithAggregatesInput | InstrumentScalarWhereWithAggregatesInput[]
    OR?: InstrumentScalarWhereWithAggregatesInput[]
    NOT?: InstrumentScalarWhereWithAggregatesInput | InstrumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Instrument"> | string
    instrumentToken?: StringWithAggregatesFilter<"Instrument"> | string
    exchangeToken?: StringWithAggregatesFilter<"Instrument"> | string
    tradingSymbol?: StringWithAggregatesFilter<"Instrument"> | string
    name?: StringWithAggregatesFilter<"Instrument"> | string
    exchange?: EnumExchangeWithAggregatesFilter<"Instrument"> | $Enums.Exchange
    segment?: EnumSegmentWithAggregatesFilter<"Instrument"> | $Enums.Segment
    instrumentType?: EnumInstrumentTypeWithAggregatesFilter<"Instrument"> | $Enums.InstrumentType
    tickSize?: FloatWithAggregatesFilter<"Instrument"> | number
    lotSize?: IntWithAggregatesFilter<"Instrument"> | number
    expiry?: DateTimeNullableWithAggregatesFilter<"Instrument"> | Date | string | null
    strike?: FloatNullableWithAggregatesFilter<"Instrument"> | number | null
    isin?: StringNullableWithAggregatesFilter<"Instrument"> | string | null
    isActive?: BoolWithAggregatesFilter<"Instrument"> | boolean
    lastPrice?: FloatWithAggregatesFilter<"Instrument"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"Instrument"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Instrument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Instrument"> | Date | string
  }

  export type MarketDepthWhereInput = {
    AND?: MarketDepthWhereInput | MarketDepthWhereInput[]
    OR?: MarketDepthWhereInput[]
    NOT?: MarketDepthWhereInput | MarketDepthWhereInput[]
    id?: StringFilter<"MarketDepth"> | string
    instrumentId?: StringFilter<"MarketDepth"> | string
    side?: EnumOrderSideFilter<"MarketDepth"> | $Enums.OrderSide
    price?: FloatFilter<"MarketDepth"> | number
    quantity?: IntFilter<"MarketDepth"> | number
    orders?: IntFilter<"MarketDepth"> | number
    timestamp?: DateTimeFilter<"MarketDepth"> | Date | string
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }

  export type MarketDepthOrderByWithRelationInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    side?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orders?: SortOrder
    timestamp?: SortOrder
    instrument?: InstrumentOrderByWithRelationInput
    _relevance?: MarketDepthOrderByRelevanceInput
  }

  export type MarketDepthWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarketDepthWhereInput | MarketDepthWhereInput[]
    OR?: MarketDepthWhereInput[]
    NOT?: MarketDepthWhereInput | MarketDepthWhereInput[]
    instrumentId?: StringFilter<"MarketDepth"> | string
    side?: EnumOrderSideFilter<"MarketDepth"> | $Enums.OrderSide
    price?: FloatFilter<"MarketDepth"> | number
    quantity?: IntFilter<"MarketDepth"> | number
    orders?: IntFilter<"MarketDepth"> | number
    timestamp?: DateTimeFilter<"MarketDepth"> | Date | string
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }, "id">

  export type MarketDepthOrderByWithAggregationInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    side?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orders?: SortOrder
    timestamp?: SortOrder
    _count?: MarketDepthCountOrderByAggregateInput
    _avg?: MarketDepthAvgOrderByAggregateInput
    _max?: MarketDepthMaxOrderByAggregateInput
    _min?: MarketDepthMinOrderByAggregateInput
    _sum?: MarketDepthSumOrderByAggregateInput
  }

  export type MarketDepthScalarWhereWithAggregatesInput = {
    AND?: MarketDepthScalarWhereWithAggregatesInput | MarketDepthScalarWhereWithAggregatesInput[]
    OR?: MarketDepthScalarWhereWithAggregatesInput[]
    NOT?: MarketDepthScalarWhereWithAggregatesInput | MarketDepthScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketDepth"> | string
    instrumentId?: StringWithAggregatesFilter<"MarketDepth"> | string
    side?: EnumOrderSideWithAggregatesFilter<"MarketDepth"> | $Enums.OrderSide
    price?: FloatWithAggregatesFilter<"MarketDepth"> | number
    quantity?: IntWithAggregatesFilter<"MarketDepth"> | number
    orders?: IntWithAggregatesFilter<"MarketDepth"> | number
    timestamp?: DateTimeWithAggregatesFilter<"MarketDepth"> | Date | string
  }

  export type PriceHistoryWhereInput = {
    AND?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    OR?: PriceHistoryWhereInput[]
    NOT?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    id?: StringFilter<"PriceHistory"> | string
    instrumentId?: StringFilter<"PriceHistory"> | string
    open?: FloatFilter<"PriceHistory"> | number
    high?: FloatFilter<"PriceHistory"> | number
    low?: FloatFilter<"PriceHistory"> | number
    close?: FloatFilter<"PriceHistory"> | number
    volume?: IntFilter<"PriceHistory"> | number
    ohlcDate?: DateTimeFilter<"PriceHistory"> | Date | string
    interval?: StringFilter<"PriceHistory"> | string
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }

  export type PriceHistoryOrderByWithRelationInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    ohlcDate?: SortOrder
    interval?: SortOrder
    instrument?: InstrumentOrderByWithRelationInput
    _relevance?: PriceHistoryOrderByRelevanceInput
  }

  export type PriceHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    instrumentId_ohlcDate_interval?: PriceHistoryInstrumentIdOhlcDateIntervalCompoundUniqueInput
    AND?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    OR?: PriceHistoryWhereInput[]
    NOT?: PriceHistoryWhereInput | PriceHistoryWhereInput[]
    instrumentId?: StringFilter<"PriceHistory"> | string
    open?: FloatFilter<"PriceHistory"> | number
    high?: FloatFilter<"PriceHistory"> | number
    low?: FloatFilter<"PriceHistory"> | number
    close?: FloatFilter<"PriceHistory"> | number
    volume?: IntFilter<"PriceHistory"> | number
    ohlcDate?: DateTimeFilter<"PriceHistory"> | Date | string
    interval?: StringFilter<"PriceHistory"> | string
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }, "id" | "instrumentId_ohlcDate_interval">

  export type PriceHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    ohlcDate?: SortOrder
    interval?: SortOrder
    _count?: PriceHistoryCountOrderByAggregateInput
    _avg?: PriceHistoryAvgOrderByAggregateInput
    _max?: PriceHistoryMaxOrderByAggregateInput
    _min?: PriceHistoryMinOrderByAggregateInput
    _sum?: PriceHistorySumOrderByAggregateInput
  }

  export type PriceHistoryScalarWhereWithAggregatesInput = {
    AND?: PriceHistoryScalarWhereWithAggregatesInput | PriceHistoryScalarWhereWithAggregatesInput[]
    OR?: PriceHistoryScalarWhereWithAggregatesInput[]
    NOT?: PriceHistoryScalarWhereWithAggregatesInput | PriceHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PriceHistory"> | string
    instrumentId?: StringWithAggregatesFilter<"PriceHistory"> | string
    open?: FloatWithAggregatesFilter<"PriceHistory"> | number
    high?: FloatWithAggregatesFilter<"PriceHistory"> | number
    low?: FloatWithAggregatesFilter<"PriceHistory"> | number
    close?: FloatWithAggregatesFilter<"PriceHistory"> | number
    volume?: IntWithAggregatesFilter<"PriceHistory"> | number
    ohlcDate?: DateTimeWithAggregatesFilter<"PriceHistory"> | Date | string
    interval?: StringWithAggregatesFilter<"PriceHistory"> | string
  }

  export type PortfolioWhereInput = {
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    id?: StringFilter<"Portfolio"> | string
    userId?: StringFilter<"Portfolio"> | string
    totalValue?: FloatFilter<"Portfolio"> | number
    investedValue?: FloatFilter<"Portfolio"> | number
    currentValue?: FloatFilter<"Portfolio"> | number
    dayChange?: FloatFilter<"Portfolio"> | number
    dayChangePercent?: FloatFilter<"Portfolio"> | number
    totalPnl?: FloatFilter<"Portfolio"> | number
    totalPnlPercent?: FloatFilter<"Portfolio"> | number
    xirr?: FloatNullableFilter<"Portfolio"> | number | null
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PortfolioOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalValue?: SortOrder
    investedValue?: SortOrder
    currentValue?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    totalPnl?: SortOrder
    totalPnlPercent?: SortOrder
    xirr?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: PortfolioOrderByRelevanceInput
  }

  export type PortfolioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    userId?: StringFilter<"Portfolio"> | string
    totalValue?: FloatFilter<"Portfolio"> | number
    investedValue?: FloatFilter<"Portfolio"> | number
    currentValue?: FloatFilter<"Portfolio"> | number
    dayChange?: FloatFilter<"Portfolio"> | number
    dayChangePercent?: FloatFilter<"Portfolio"> | number
    totalPnl?: FloatFilter<"Portfolio"> | number
    totalPnlPercent?: FloatFilter<"Portfolio"> | number
    xirr?: FloatNullableFilter<"Portfolio"> | number | null
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PortfolioOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalValue?: SortOrder
    investedValue?: SortOrder
    currentValue?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    totalPnl?: SortOrder
    totalPnlPercent?: SortOrder
    xirr?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: PortfolioCountOrderByAggregateInput
    _avg?: PortfolioAvgOrderByAggregateInput
    _max?: PortfolioMaxOrderByAggregateInput
    _min?: PortfolioMinOrderByAggregateInput
    _sum?: PortfolioSumOrderByAggregateInput
  }

  export type PortfolioScalarWhereWithAggregatesInput = {
    AND?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    OR?: PortfolioScalarWhereWithAggregatesInput[]
    NOT?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Portfolio"> | string
    userId?: StringWithAggregatesFilter<"Portfolio"> | string
    totalValue?: FloatWithAggregatesFilter<"Portfolio"> | number
    investedValue?: FloatWithAggregatesFilter<"Portfolio"> | number
    currentValue?: FloatWithAggregatesFilter<"Portfolio"> | number
    dayChange?: FloatWithAggregatesFilter<"Portfolio"> | number
    dayChangePercent?: FloatWithAggregatesFilter<"Portfolio"> | number
    totalPnl?: FloatWithAggregatesFilter<"Portfolio"> | number
    totalPnlPercent?: FloatWithAggregatesFilter<"Portfolio"> | number
    xirr?: FloatNullableWithAggregatesFilter<"Portfolio"> | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
  }

  export type HoldingWhereInput = {
    AND?: HoldingWhereInput | HoldingWhereInput[]
    OR?: HoldingWhereInput[]
    NOT?: HoldingWhereInput | HoldingWhereInput[]
    id?: StringFilter<"Holding"> | string
    userId?: StringFilter<"Holding"> | string
    instrumentId?: StringFilter<"Holding"> | string
    quantity?: IntFilter<"Holding"> | number
    averagePrice?: FloatFilter<"Holding"> | number
    lastPrice?: FloatFilter<"Holding"> | number
    pnl?: FloatFilter<"Holding"> | number
    dayChange?: FloatFilter<"Holding"> | number
    dayChangePercent?: FloatFilter<"Holding"> | number
    collateralQuantity?: IntFilter<"Holding"> | number
    collateralType?: StringNullableFilter<"Holding"> | string | null
    product?: EnumProductTypeFilter<"Holding"> | $Enums.ProductType
    createdAt?: DateTimeFilter<"Holding"> | Date | string
    updatedAt?: DateTimeFilter<"Holding"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }

  export type HoldingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    quantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    pnl?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    collateralQuantity?: SortOrder
    collateralType?: SortOrderInput | SortOrder
    product?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    instrument?: InstrumentOrderByWithRelationInput
    _relevance?: HoldingOrderByRelevanceInput
  }

  export type HoldingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_instrumentId_product?: HoldingUserIdInstrumentIdProductCompoundUniqueInput
    AND?: HoldingWhereInput | HoldingWhereInput[]
    OR?: HoldingWhereInput[]
    NOT?: HoldingWhereInput | HoldingWhereInput[]
    userId?: StringFilter<"Holding"> | string
    instrumentId?: StringFilter<"Holding"> | string
    quantity?: IntFilter<"Holding"> | number
    averagePrice?: FloatFilter<"Holding"> | number
    lastPrice?: FloatFilter<"Holding"> | number
    pnl?: FloatFilter<"Holding"> | number
    dayChange?: FloatFilter<"Holding"> | number
    dayChangePercent?: FloatFilter<"Holding"> | number
    collateralQuantity?: IntFilter<"Holding"> | number
    collateralType?: StringNullableFilter<"Holding"> | string | null
    product?: EnumProductTypeFilter<"Holding"> | $Enums.ProductType
    createdAt?: DateTimeFilter<"Holding"> | Date | string
    updatedAt?: DateTimeFilter<"Holding"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }, "id" | "userId_instrumentId_product">

  export type HoldingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    quantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    pnl?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    collateralQuantity?: SortOrder
    collateralType?: SortOrderInput | SortOrder
    product?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HoldingCountOrderByAggregateInput
    _avg?: HoldingAvgOrderByAggregateInput
    _max?: HoldingMaxOrderByAggregateInput
    _min?: HoldingMinOrderByAggregateInput
    _sum?: HoldingSumOrderByAggregateInput
  }

  export type HoldingScalarWhereWithAggregatesInput = {
    AND?: HoldingScalarWhereWithAggregatesInput | HoldingScalarWhereWithAggregatesInput[]
    OR?: HoldingScalarWhereWithAggregatesInput[]
    NOT?: HoldingScalarWhereWithAggregatesInput | HoldingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Holding"> | string
    userId?: StringWithAggregatesFilter<"Holding"> | string
    instrumentId?: StringWithAggregatesFilter<"Holding"> | string
    quantity?: IntWithAggregatesFilter<"Holding"> | number
    averagePrice?: FloatWithAggregatesFilter<"Holding"> | number
    lastPrice?: FloatWithAggregatesFilter<"Holding"> | number
    pnl?: FloatWithAggregatesFilter<"Holding"> | number
    dayChange?: FloatWithAggregatesFilter<"Holding"> | number
    dayChangePercent?: FloatWithAggregatesFilter<"Holding"> | number
    collateralQuantity?: IntWithAggregatesFilter<"Holding"> | number
    collateralType?: StringNullableWithAggregatesFilter<"Holding"> | string | null
    product?: EnumProductTypeWithAggregatesFilter<"Holding"> | $Enums.ProductType
    createdAt?: DateTimeWithAggregatesFilter<"Holding"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Holding"> | Date | string
  }

  export type PositionWhereInput = {
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    id?: StringFilter<"Position"> | string
    userId?: StringFilter<"Position"> | string
    instrumentId?: StringFilter<"Position"> | string
    product?: EnumProductTypeFilter<"Position"> | $Enums.ProductType
    quantity?: IntFilter<"Position"> | number
    overnightQuantity?: IntFilter<"Position"> | number
    averagePrice?: FloatFilter<"Position"> | number
    lastPrice?: FloatFilter<"Position"> | number
    value?: FloatFilter<"Position"> | number
    pnl?: FloatFilter<"Position"> | number
    m2m?: FloatFilter<"Position"> | number
    unrealised?: FloatFilter<"Position"> | number
    realised?: FloatFilter<"Position"> | number
    buyQuantity?: IntFilter<"Position"> | number
    buyValue?: FloatFilter<"Position"> | number
    buyPrice?: FloatFilter<"Position"> | number
    sellQuantity?: IntFilter<"Position"> | number
    sellValue?: FloatFilter<"Position"> | number
    sellPrice?: FloatFilter<"Position"> | number
    multiplier?: FloatFilter<"Position"> | number
    tradingSymbol?: StringFilter<"Position"> | string
    exchange?: EnumExchangeFilter<"Position"> | $Enums.Exchange
    positionType?: EnumPositionTypeFilter<"Position"> | $Enums.PositionType
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }

  export type PositionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    overnightQuantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    value?: SortOrder
    pnl?: SortOrder
    m2m?: SortOrder
    unrealised?: SortOrder
    realised?: SortOrder
    buyQuantity?: SortOrder
    buyValue?: SortOrder
    buyPrice?: SortOrder
    sellQuantity?: SortOrder
    sellValue?: SortOrder
    sellPrice?: SortOrder
    multiplier?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    positionType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    instrument?: InstrumentOrderByWithRelationInput
    _relevance?: PositionOrderByRelevanceInput
  }

  export type PositionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_instrumentId_product?: PositionUserIdInstrumentIdProductCompoundUniqueInput
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    userId?: StringFilter<"Position"> | string
    instrumentId?: StringFilter<"Position"> | string
    product?: EnumProductTypeFilter<"Position"> | $Enums.ProductType
    quantity?: IntFilter<"Position"> | number
    overnightQuantity?: IntFilter<"Position"> | number
    averagePrice?: FloatFilter<"Position"> | number
    lastPrice?: FloatFilter<"Position"> | number
    value?: FloatFilter<"Position"> | number
    pnl?: FloatFilter<"Position"> | number
    m2m?: FloatFilter<"Position"> | number
    unrealised?: FloatFilter<"Position"> | number
    realised?: FloatFilter<"Position"> | number
    buyQuantity?: IntFilter<"Position"> | number
    buyValue?: FloatFilter<"Position"> | number
    buyPrice?: FloatFilter<"Position"> | number
    sellQuantity?: IntFilter<"Position"> | number
    sellValue?: FloatFilter<"Position"> | number
    sellPrice?: FloatFilter<"Position"> | number
    multiplier?: FloatFilter<"Position"> | number
    tradingSymbol?: StringFilter<"Position"> | string
    exchange?: EnumExchangeFilter<"Position"> | $Enums.Exchange
    positionType?: EnumPositionTypeFilter<"Position"> | $Enums.PositionType
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }, "id" | "userId_instrumentId_product">

  export type PositionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    overnightQuantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    value?: SortOrder
    pnl?: SortOrder
    m2m?: SortOrder
    unrealised?: SortOrder
    realised?: SortOrder
    buyQuantity?: SortOrder
    buyValue?: SortOrder
    buyPrice?: SortOrder
    sellQuantity?: SortOrder
    sellValue?: SortOrder
    sellPrice?: SortOrder
    multiplier?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    positionType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PositionCountOrderByAggregateInput
    _avg?: PositionAvgOrderByAggregateInput
    _max?: PositionMaxOrderByAggregateInput
    _min?: PositionMinOrderByAggregateInput
    _sum?: PositionSumOrderByAggregateInput
  }

  export type PositionScalarWhereWithAggregatesInput = {
    AND?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    OR?: PositionScalarWhereWithAggregatesInput[]
    NOT?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Position"> | string
    userId?: StringWithAggregatesFilter<"Position"> | string
    instrumentId?: StringWithAggregatesFilter<"Position"> | string
    product?: EnumProductTypeWithAggregatesFilter<"Position"> | $Enums.ProductType
    quantity?: IntWithAggregatesFilter<"Position"> | number
    overnightQuantity?: IntWithAggregatesFilter<"Position"> | number
    averagePrice?: FloatWithAggregatesFilter<"Position"> | number
    lastPrice?: FloatWithAggregatesFilter<"Position"> | number
    value?: FloatWithAggregatesFilter<"Position"> | number
    pnl?: FloatWithAggregatesFilter<"Position"> | number
    m2m?: FloatWithAggregatesFilter<"Position"> | number
    unrealised?: FloatWithAggregatesFilter<"Position"> | number
    realised?: FloatWithAggregatesFilter<"Position"> | number
    buyQuantity?: IntWithAggregatesFilter<"Position"> | number
    buyValue?: FloatWithAggregatesFilter<"Position"> | number
    buyPrice?: FloatWithAggregatesFilter<"Position"> | number
    sellQuantity?: IntWithAggregatesFilter<"Position"> | number
    sellValue?: FloatWithAggregatesFilter<"Position"> | number
    sellPrice?: FloatWithAggregatesFilter<"Position"> | number
    multiplier?: FloatWithAggregatesFilter<"Position"> | number
    tradingSymbol?: StringWithAggregatesFilter<"Position"> | string
    exchange?: EnumExchangeWithAggregatesFilter<"Position"> | $Enums.Exchange
    positionType?: EnumPositionTypeWithAggregatesFilter<"Position"> | $Enums.PositionType
    createdAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: StringFilter<"Order"> | string
    orderId?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    instrumentId?: StringFilter<"Order"> | string
    parentOrderId?: StringNullableFilter<"Order"> | string | null
    exchangeOrderId?: StringNullableFilter<"Order"> | string | null
    exchangeTimestamp?: DateTimeNullableFilter<"Order"> | Date | string | null
    placedBy?: StringFilter<"Order"> | string
    variety?: EnumOrderVarietyFilter<"Order"> | $Enums.OrderVariety
    orderType?: EnumOrderTypeFilter<"Order"> | $Enums.OrderType
    transactionType?: EnumTransactionTypeFilter<"Order"> | $Enums.TransactionType
    validity?: EnumOrderValidityFilter<"Order"> | $Enums.OrderValidity
    product?: EnumProductTypeFilter<"Order"> | $Enums.ProductType
    exchange?: EnumExchangeFilter<"Order"> | $Enums.Exchange
    tradingSymbol?: StringFilter<"Order"> | string
    quantity?: IntFilter<"Order"> | number
    disclosedQuantity?: IntFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    triggerPrice?: FloatFilter<"Order"> | number
    averagePrice?: FloatFilter<"Order"> | number
    filledQuantity?: IntFilter<"Order"> | number
    pendingQuantity?: IntFilter<"Order"> | number
    cancelledQuantity?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    statusMessage?: StringNullableFilter<"Order"> | string | null
    tag?: StringNullableFilter<"Order"> | string | null
    clientOrderId?: StringNullableFilter<"Order"> | string | null
    orderTimestamp?: DateTimeFilter<"Order"> | Date | string
    exchangeUpdateTime?: DateTimeNullableFilter<"Order"> | Date | string | null
    rejectedBy?: StringNullableFilter<"Order"> | string | null
    cancelledBy?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
    trades?: TradeListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    parentOrderId?: SortOrderInput | SortOrder
    exchangeOrderId?: SortOrderInput | SortOrder
    exchangeTimestamp?: SortOrderInput | SortOrder
    placedBy?: SortOrder
    variety?: SortOrder
    orderType?: SortOrder
    transactionType?: SortOrder
    validity?: SortOrder
    product?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    quantity?: SortOrder
    disclosedQuantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    averagePrice?: SortOrder
    filledQuantity?: SortOrder
    pendingQuantity?: SortOrder
    cancelledQuantity?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrderInput | SortOrder
    tag?: SortOrderInput | SortOrder
    clientOrderId?: SortOrderInput | SortOrder
    orderTimestamp?: SortOrder
    exchangeUpdateTime?: SortOrderInput | SortOrder
    rejectedBy?: SortOrderInput | SortOrder
    cancelledBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    instrument?: InstrumentOrderByWithRelationInput
    trades?: TradeOrderByRelationAggregateInput
    _relevance?: OrderOrderByRelevanceInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    orderId?: string
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: StringFilter<"Order"> | string
    instrumentId?: StringFilter<"Order"> | string
    parentOrderId?: StringNullableFilter<"Order"> | string | null
    exchangeOrderId?: StringNullableFilter<"Order"> | string | null
    exchangeTimestamp?: DateTimeNullableFilter<"Order"> | Date | string | null
    placedBy?: StringFilter<"Order"> | string
    variety?: EnumOrderVarietyFilter<"Order"> | $Enums.OrderVariety
    orderType?: EnumOrderTypeFilter<"Order"> | $Enums.OrderType
    transactionType?: EnumTransactionTypeFilter<"Order"> | $Enums.TransactionType
    validity?: EnumOrderValidityFilter<"Order"> | $Enums.OrderValidity
    product?: EnumProductTypeFilter<"Order"> | $Enums.ProductType
    exchange?: EnumExchangeFilter<"Order"> | $Enums.Exchange
    tradingSymbol?: StringFilter<"Order"> | string
    quantity?: IntFilter<"Order"> | number
    disclosedQuantity?: IntFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    triggerPrice?: FloatFilter<"Order"> | number
    averagePrice?: FloatFilter<"Order"> | number
    filledQuantity?: IntFilter<"Order"> | number
    pendingQuantity?: IntFilter<"Order"> | number
    cancelledQuantity?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    statusMessage?: StringNullableFilter<"Order"> | string | null
    tag?: StringNullableFilter<"Order"> | string | null
    clientOrderId?: StringNullableFilter<"Order"> | string | null
    orderTimestamp?: DateTimeFilter<"Order"> | Date | string
    exchangeUpdateTime?: DateTimeNullableFilter<"Order"> | Date | string | null
    rejectedBy?: StringNullableFilter<"Order"> | string | null
    cancelledBy?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
    trades?: TradeListRelationFilter
  }, "id" | "orderId">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    parentOrderId?: SortOrderInput | SortOrder
    exchangeOrderId?: SortOrderInput | SortOrder
    exchangeTimestamp?: SortOrderInput | SortOrder
    placedBy?: SortOrder
    variety?: SortOrder
    orderType?: SortOrder
    transactionType?: SortOrder
    validity?: SortOrder
    product?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    quantity?: SortOrder
    disclosedQuantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    averagePrice?: SortOrder
    filledQuantity?: SortOrder
    pendingQuantity?: SortOrder
    cancelledQuantity?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrderInput | SortOrder
    tag?: SortOrderInput | SortOrder
    clientOrderId?: SortOrderInput | SortOrder
    orderTimestamp?: SortOrder
    exchangeUpdateTime?: SortOrderInput | SortOrder
    rejectedBy?: SortOrderInput | SortOrder
    cancelledBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Order"> | string
    orderId?: StringWithAggregatesFilter<"Order"> | string
    userId?: StringWithAggregatesFilter<"Order"> | string
    instrumentId?: StringWithAggregatesFilter<"Order"> | string
    parentOrderId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    exchangeOrderId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    exchangeTimestamp?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    placedBy?: StringWithAggregatesFilter<"Order"> | string
    variety?: EnumOrderVarietyWithAggregatesFilter<"Order"> | $Enums.OrderVariety
    orderType?: EnumOrderTypeWithAggregatesFilter<"Order"> | $Enums.OrderType
    transactionType?: EnumTransactionTypeWithAggregatesFilter<"Order"> | $Enums.TransactionType
    validity?: EnumOrderValidityWithAggregatesFilter<"Order"> | $Enums.OrderValidity
    product?: EnumProductTypeWithAggregatesFilter<"Order"> | $Enums.ProductType
    exchange?: EnumExchangeWithAggregatesFilter<"Order"> | $Enums.Exchange
    tradingSymbol?: StringWithAggregatesFilter<"Order"> | string
    quantity?: IntWithAggregatesFilter<"Order"> | number
    disclosedQuantity?: IntWithAggregatesFilter<"Order"> | number
    price?: FloatWithAggregatesFilter<"Order"> | number
    triggerPrice?: FloatWithAggregatesFilter<"Order"> | number
    averagePrice?: FloatWithAggregatesFilter<"Order"> | number
    filledQuantity?: IntWithAggregatesFilter<"Order"> | number
    pendingQuantity?: IntWithAggregatesFilter<"Order"> | number
    cancelledQuantity?: IntWithAggregatesFilter<"Order"> | number
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    statusMessage?: StringNullableWithAggregatesFilter<"Order"> | string | null
    tag?: StringNullableWithAggregatesFilter<"Order"> | string | null
    clientOrderId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    orderTimestamp?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    exchangeUpdateTime?: DateTimeNullableWithAggregatesFilter<"Order"> | Date | string | null
    rejectedBy?: StringNullableWithAggregatesFilter<"Order"> | string | null
    cancelledBy?: StringNullableWithAggregatesFilter<"Order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
  }

  export type TradeWhereInput = {
    AND?: TradeWhereInput | TradeWhereInput[]
    OR?: TradeWhereInput[]
    NOT?: TradeWhereInput | TradeWhereInput[]
    id?: StringFilter<"Trade"> | string
    tradeId?: StringFilter<"Trade"> | string
    orderId?: StringFilter<"Trade"> | string
    userId?: StringFilter<"Trade"> | string
    instrumentId?: StringFilter<"Trade"> | string
    exchange?: EnumExchangeFilter<"Trade"> | $Enums.Exchange
    tradingSymbol?: StringFilter<"Trade"> | string
    transactionType?: EnumTransactionTypeFilter<"Trade"> | $Enums.TransactionType
    product?: EnumProductTypeFilter<"Trade"> | $Enums.ProductType
    quantity?: IntFilter<"Trade"> | number
    price?: FloatFilter<"Trade"> | number
    value?: FloatFilter<"Trade"> | number
    exchangeTimestamp?: DateTimeFilter<"Trade"> | Date | string
    createdAt?: DateTimeFilter<"Trade"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
    charges?: XOR<TradeChargesNullableScalarRelationFilter, TradeChargesWhereInput> | null
  }

  export type TradeOrderByWithRelationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    transactionType?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    value?: SortOrder
    exchangeTimestamp?: SortOrder
    createdAt?: SortOrder
    order?: OrderOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    instrument?: InstrumentOrderByWithRelationInput
    charges?: TradeChargesOrderByWithRelationInput
    _relevance?: TradeOrderByRelevanceInput
  }

  export type TradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tradeId?: string
    AND?: TradeWhereInput | TradeWhereInput[]
    OR?: TradeWhereInput[]
    NOT?: TradeWhereInput | TradeWhereInput[]
    orderId?: StringFilter<"Trade"> | string
    userId?: StringFilter<"Trade"> | string
    instrumentId?: StringFilter<"Trade"> | string
    exchange?: EnumExchangeFilter<"Trade"> | $Enums.Exchange
    tradingSymbol?: StringFilter<"Trade"> | string
    transactionType?: EnumTransactionTypeFilter<"Trade"> | $Enums.TransactionType
    product?: EnumProductTypeFilter<"Trade"> | $Enums.ProductType
    quantity?: IntFilter<"Trade"> | number
    price?: FloatFilter<"Trade"> | number
    value?: FloatFilter<"Trade"> | number
    exchangeTimestamp?: DateTimeFilter<"Trade"> | Date | string
    createdAt?: DateTimeFilter<"Trade"> | Date | string
    order?: XOR<OrderScalarRelationFilter, OrderWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
    charges?: XOR<TradeChargesNullableScalarRelationFilter, TradeChargesWhereInput> | null
  }, "id" | "tradeId">

  export type TradeOrderByWithAggregationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    transactionType?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    value?: SortOrder
    exchangeTimestamp?: SortOrder
    createdAt?: SortOrder
    _count?: TradeCountOrderByAggregateInput
    _avg?: TradeAvgOrderByAggregateInput
    _max?: TradeMaxOrderByAggregateInput
    _min?: TradeMinOrderByAggregateInput
    _sum?: TradeSumOrderByAggregateInput
  }

  export type TradeScalarWhereWithAggregatesInput = {
    AND?: TradeScalarWhereWithAggregatesInput | TradeScalarWhereWithAggregatesInput[]
    OR?: TradeScalarWhereWithAggregatesInput[]
    NOT?: TradeScalarWhereWithAggregatesInput | TradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Trade"> | string
    tradeId?: StringWithAggregatesFilter<"Trade"> | string
    orderId?: StringWithAggregatesFilter<"Trade"> | string
    userId?: StringWithAggregatesFilter<"Trade"> | string
    instrumentId?: StringWithAggregatesFilter<"Trade"> | string
    exchange?: EnumExchangeWithAggregatesFilter<"Trade"> | $Enums.Exchange
    tradingSymbol?: StringWithAggregatesFilter<"Trade"> | string
    transactionType?: EnumTransactionTypeWithAggregatesFilter<"Trade"> | $Enums.TransactionType
    product?: EnumProductTypeWithAggregatesFilter<"Trade"> | $Enums.ProductType
    quantity?: IntWithAggregatesFilter<"Trade"> | number
    price?: FloatWithAggregatesFilter<"Trade"> | number
    value?: FloatWithAggregatesFilter<"Trade"> | number
    exchangeTimestamp?: DateTimeWithAggregatesFilter<"Trade"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Trade"> | Date | string
  }

  export type TradeChargesWhereInput = {
    AND?: TradeChargesWhereInput | TradeChargesWhereInput[]
    OR?: TradeChargesWhereInput[]
    NOT?: TradeChargesWhereInput | TradeChargesWhereInput[]
    id?: StringFilter<"TradeCharges"> | string
    tradeId?: StringFilter<"TradeCharges"> | string
    brokerage?: FloatFilter<"TradeCharges"> | number
    stt?: FloatFilter<"TradeCharges"> | number
    exchangeTxnCharge?: FloatFilter<"TradeCharges"> | number
    gst?: FloatFilter<"TradeCharges"> | number
    sebiTurnover?: FloatFilter<"TradeCharges"> | number
    stampDuty?: FloatFilter<"TradeCharges"> | number
    totalCharges?: FloatFilter<"TradeCharges"> | number
    netAmount?: FloatFilter<"TradeCharges"> | number
    trade?: XOR<TradeScalarRelationFilter, TradeWhereInput>
  }

  export type TradeChargesOrderByWithRelationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    brokerage?: SortOrder
    stt?: SortOrder
    exchangeTxnCharge?: SortOrder
    gst?: SortOrder
    sebiTurnover?: SortOrder
    stampDuty?: SortOrder
    totalCharges?: SortOrder
    netAmount?: SortOrder
    trade?: TradeOrderByWithRelationInput
    _relevance?: TradeChargesOrderByRelevanceInput
  }

  export type TradeChargesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tradeId?: string
    AND?: TradeChargesWhereInput | TradeChargesWhereInput[]
    OR?: TradeChargesWhereInput[]
    NOT?: TradeChargesWhereInput | TradeChargesWhereInput[]
    brokerage?: FloatFilter<"TradeCharges"> | number
    stt?: FloatFilter<"TradeCharges"> | number
    exchangeTxnCharge?: FloatFilter<"TradeCharges"> | number
    gst?: FloatFilter<"TradeCharges"> | number
    sebiTurnover?: FloatFilter<"TradeCharges"> | number
    stampDuty?: FloatFilter<"TradeCharges"> | number
    totalCharges?: FloatFilter<"TradeCharges"> | number
    netAmount?: FloatFilter<"TradeCharges"> | number
    trade?: XOR<TradeScalarRelationFilter, TradeWhereInput>
  }, "id" | "tradeId">

  export type TradeChargesOrderByWithAggregationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    brokerage?: SortOrder
    stt?: SortOrder
    exchangeTxnCharge?: SortOrder
    gst?: SortOrder
    sebiTurnover?: SortOrder
    stampDuty?: SortOrder
    totalCharges?: SortOrder
    netAmount?: SortOrder
    _count?: TradeChargesCountOrderByAggregateInput
    _avg?: TradeChargesAvgOrderByAggregateInput
    _max?: TradeChargesMaxOrderByAggregateInput
    _min?: TradeChargesMinOrderByAggregateInput
    _sum?: TradeChargesSumOrderByAggregateInput
  }

  export type TradeChargesScalarWhereWithAggregatesInput = {
    AND?: TradeChargesScalarWhereWithAggregatesInput | TradeChargesScalarWhereWithAggregatesInput[]
    OR?: TradeChargesScalarWhereWithAggregatesInput[]
    NOT?: TradeChargesScalarWhereWithAggregatesInput | TradeChargesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TradeCharges"> | string
    tradeId?: StringWithAggregatesFilter<"TradeCharges"> | string
    brokerage?: FloatWithAggregatesFilter<"TradeCharges"> | number
    stt?: FloatWithAggregatesFilter<"TradeCharges"> | number
    exchangeTxnCharge?: FloatWithAggregatesFilter<"TradeCharges"> | number
    gst?: FloatWithAggregatesFilter<"TradeCharges"> | number
    sebiTurnover?: FloatWithAggregatesFilter<"TradeCharges"> | number
    stampDuty?: FloatWithAggregatesFilter<"TradeCharges"> | number
    totalCharges?: FloatWithAggregatesFilter<"TradeCharges"> | number
    netAmount?: FloatWithAggregatesFilter<"TradeCharges"> | number
  }

  export type GTTOrderWhereInput = {
    AND?: GTTOrderWhereInput | GTTOrderWhereInput[]
    OR?: GTTOrderWhereInput[]
    NOT?: GTTOrderWhereInput | GTTOrderWhereInput[]
    id?: StringFilter<"GTTOrder"> | string
    userId?: StringFilter<"GTTOrder"> | string
    gttType?: EnumGTTTypeFilter<"GTTOrder"> | $Enums.GTTType
    instrumentId?: StringFilter<"GTTOrder"> | string
    tradingSymbol?: StringFilter<"GTTOrder"> | string
    exchange?: EnumExchangeFilter<"GTTOrder"> | $Enums.Exchange
    triggerType?: EnumTriggerTypeFilter<"GTTOrder"> | $Enums.TriggerType
    triggerPrice?: FloatFilter<"GTTOrder"> | number
    lastPrice?: FloatFilter<"GTTOrder"> | number
    limitPrice?: FloatNullableFilter<"GTTOrder"> | number | null
    stopLossPrice?: FloatNullableFilter<"GTTOrder"> | number | null
    quantity?: IntFilter<"GTTOrder"> | number
    product?: EnumProductTypeFilter<"GTTOrder"> | $Enums.ProductType
    orderType?: EnumOrderTypeFilter<"GTTOrder"> | $Enums.OrderType
    status?: EnumGTTStatusFilter<"GTTOrder"> | $Enums.GTTStatus
    expiresAt?: DateTimeNullableFilter<"GTTOrder"> | Date | string | null
    triggeredAt?: DateTimeNullableFilter<"GTTOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"GTTOrder"> | Date | string
    updatedAt?: DateTimeFilter<"GTTOrder"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GTTOrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    gttType?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    triggerType?: SortOrder
    triggerPrice?: SortOrder
    lastPrice?: SortOrder
    limitPrice?: SortOrderInput | SortOrder
    stopLossPrice?: SortOrderInput | SortOrder
    quantity?: SortOrder
    product?: SortOrder
    orderType?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    triggeredAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: GTTOrderOrderByRelevanceInput
  }

  export type GTTOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GTTOrderWhereInput | GTTOrderWhereInput[]
    OR?: GTTOrderWhereInput[]
    NOT?: GTTOrderWhereInput | GTTOrderWhereInput[]
    userId?: StringFilter<"GTTOrder"> | string
    gttType?: EnumGTTTypeFilter<"GTTOrder"> | $Enums.GTTType
    instrumentId?: StringFilter<"GTTOrder"> | string
    tradingSymbol?: StringFilter<"GTTOrder"> | string
    exchange?: EnumExchangeFilter<"GTTOrder"> | $Enums.Exchange
    triggerType?: EnumTriggerTypeFilter<"GTTOrder"> | $Enums.TriggerType
    triggerPrice?: FloatFilter<"GTTOrder"> | number
    lastPrice?: FloatFilter<"GTTOrder"> | number
    limitPrice?: FloatNullableFilter<"GTTOrder"> | number | null
    stopLossPrice?: FloatNullableFilter<"GTTOrder"> | number | null
    quantity?: IntFilter<"GTTOrder"> | number
    product?: EnumProductTypeFilter<"GTTOrder"> | $Enums.ProductType
    orderType?: EnumOrderTypeFilter<"GTTOrder"> | $Enums.OrderType
    status?: EnumGTTStatusFilter<"GTTOrder"> | $Enums.GTTStatus
    expiresAt?: DateTimeNullableFilter<"GTTOrder"> | Date | string | null
    triggeredAt?: DateTimeNullableFilter<"GTTOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"GTTOrder"> | Date | string
    updatedAt?: DateTimeFilter<"GTTOrder"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GTTOrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    gttType?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    triggerType?: SortOrder
    triggerPrice?: SortOrder
    lastPrice?: SortOrder
    limitPrice?: SortOrderInput | SortOrder
    stopLossPrice?: SortOrderInput | SortOrder
    quantity?: SortOrder
    product?: SortOrder
    orderType?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    triggeredAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GTTOrderCountOrderByAggregateInput
    _avg?: GTTOrderAvgOrderByAggregateInput
    _max?: GTTOrderMaxOrderByAggregateInput
    _min?: GTTOrderMinOrderByAggregateInput
    _sum?: GTTOrderSumOrderByAggregateInput
  }

  export type GTTOrderScalarWhereWithAggregatesInput = {
    AND?: GTTOrderScalarWhereWithAggregatesInput | GTTOrderScalarWhereWithAggregatesInput[]
    OR?: GTTOrderScalarWhereWithAggregatesInput[]
    NOT?: GTTOrderScalarWhereWithAggregatesInput | GTTOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GTTOrder"> | string
    userId?: StringWithAggregatesFilter<"GTTOrder"> | string
    gttType?: EnumGTTTypeWithAggregatesFilter<"GTTOrder"> | $Enums.GTTType
    instrumentId?: StringWithAggregatesFilter<"GTTOrder"> | string
    tradingSymbol?: StringWithAggregatesFilter<"GTTOrder"> | string
    exchange?: EnumExchangeWithAggregatesFilter<"GTTOrder"> | $Enums.Exchange
    triggerType?: EnumTriggerTypeWithAggregatesFilter<"GTTOrder"> | $Enums.TriggerType
    triggerPrice?: FloatWithAggregatesFilter<"GTTOrder"> | number
    lastPrice?: FloatWithAggregatesFilter<"GTTOrder"> | number
    limitPrice?: FloatNullableWithAggregatesFilter<"GTTOrder"> | number | null
    stopLossPrice?: FloatNullableWithAggregatesFilter<"GTTOrder"> | number | null
    quantity?: IntWithAggregatesFilter<"GTTOrder"> | number
    product?: EnumProductTypeWithAggregatesFilter<"GTTOrder"> | $Enums.ProductType
    orderType?: EnumOrderTypeWithAggregatesFilter<"GTTOrder"> | $Enums.OrderType
    status?: EnumGTTStatusWithAggregatesFilter<"GTTOrder"> | $Enums.GTTStatus
    expiresAt?: DateTimeNullableWithAggregatesFilter<"GTTOrder"> | Date | string | null
    triggeredAt?: DateTimeNullableWithAggregatesFilter<"GTTOrder"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GTTOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GTTOrder"> | Date | string
  }

  export type WatchlistWhereInput = {
    AND?: WatchlistWhereInput | WatchlistWhereInput[]
    OR?: WatchlistWhereInput[]
    NOT?: WatchlistWhereInput | WatchlistWhereInput[]
    id?: StringFilter<"Watchlist"> | string
    userId?: StringFilter<"Watchlist"> | string
    name?: StringFilter<"Watchlist"> | string
    isDefault?: BoolFilter<"Watchlist"> | boolean
    createdAt?: DateTimeFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeFilter<"Watchlist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: WatchlistItemListRelationFilter
  }

  export type WatchlistOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: WatchlistItemOrderByRelationAggregateInput
    _relevance?: WatchlistOrderByRelevanceInput
  }

  export type WatchlistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WatchlistWhereInput | WatchlistWhereInput[]
    OR?: WatchlistWhereInput[]
    NOT?: WatchlistWhereInput | WatchlistWhereInput[]
    userId?: StringFilter<"Watchlist"> | string
    name?: StringFilter<"Watchlist"> | string
    isDefault?: BoolFilter<"Watchlist"> | boolean
    createdAt?: DateTimeFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeFilter<"Watchlist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: WatchlistItemListRelationFilter
  }, "id">

  export type WatchlistOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WatchlistCountOrderByAggregateInput
    _max?: WatchlistMaxOrderByAggregateInput
    _min?: WatchlistMinOrderByAggregateInput
  }

  export type WatchlistScalarWhereWithAggregatesInput = {
    AND?: WatchlistScalarWhereWithAggregatesInput | WatchlistScalarWhereWithAggregatesInput[]
    OR?: WatchlistScalarWhereWithAggregatesInput[]
    NOT?: WatchlistScalarWhereWithAggregatesInput | WatchlistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Watchlist"> | string
    userId?: StringWithAggregatesFilter<"Watchlist"> | string
    name?: StringWithAggregatesFilter<"Watchlist"> | string
    isDefault?: BoolWithAggregatesFilter<"Watchlist"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Watchlist"> | Date | string
  }

  export type WatchlistItemWhereInput = {
    AND?: WatchlistItemWhereInput | WatchlistItemWhereInput[]
    OR?: WatchlistItemWhereInput[]
    NOT?: WatchlistItemWhereInput | WatchlistItemWhereInput[]
    id?: StringFilter<"WatchlistItem"> | string
    watchlistId?: StringFilter<"WatchlistItem"> | string
    instrumentId?: StringFilter<"WatchlistItem"> | string
    sortOrder?: IntFilter<"WatchlistItem"> | number
    addedAt?: DateTimeFilter<"WatchlistItem"> | Date | string
    watchlist?: XOR<WatchlistScalarRelationFilter, WatchlistWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }

  export type WatchlistItemOrderByWithRelationInput = {
    id?: SortOrder
    watchlistId?: SortOrder
    instrumentId?: SortOrder
    sortOrder?: SortOrder
    addedAt?: SortOrder
    watchlist?: WatchlistOrderByWithRelationInput
    instrument?: InstrumentOrderByWithRelationInput
    _relevance?: WatchlistItemOrderByRelevanceInput
  }

  export type WatchlistItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    watchlistId_instrumentId?: WatchlistItemWatchlistIdInstrumentIdCompoundUniqueInput
    AND?: WatchlistItemWhereInput | WatchlistItemWhereInput[]
    OR?: WatchlistItemWhereInput[]
    NOT?: WatchlistItemWhereInput | WatchlistItemWhereInput[]
    watchlistId?: StringFilter<"WatchlistItem"> | string
    instrumentId?: StringFilter<"WatchlistItem"> | string
    sortOrder?: IntFilter<"WatchlistItem"> | number
    addedAt?: DateTimeFilter<"WatchlistItem"> | Date | string
    watchlist?: XOR<WatchlistScalarRelationFilter, WatchlistWhereInput>
    instrument?: XOR<InstrumentScalarRelationFilter, InstrumentWhereInput>
  }, "id" | "watchlistId_instrumentId">

  export type WatchlistItemOrderByWithAggregationInput = {
    id?: SortOrder
    watchlistId?: SortOrder
    instrumentId?: SortOrder
    sortOrder?: SortOrder
    addedAt?: SortOrder
    _count?: WatchlistItemCountOrderByAggregateInput
    _avg?: WatchlistItemAvgOrderByAggregateInput
    _max?: WatchlistItemMaxOrderByAggregateInput
    _min?: WatchlistItemMinOrderByAggregateInput
    _sum?: WatchlistItemSumOrderByAggregateInput
  }

  export type WatchlistItemScalarWhereWithAggregatesInput = {
    AND?: WatchlistItemScalarWhereWithAggregatesInput | WatchlistItemScalarWhereWithAggregatesInput[]
    OR?: WatchlistItemScalarWhereWithAggregatesInput[]
    NOT?: WatchlistItemScalarWhereWithAggregatesInput | WatchlistItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WatchlistItem"> | string
    watchlistId?: StringWithAggregatesFilter<"WatchlistItem"> | string
    instrumentId?: StringWithAggregatesFilter<"WatchlistItem"> | string
    sortOrder?: IntWithAggregatesFilter<"WatchlistItem"> | number
    addedAt?: DateTimeWithAggregatesFilter<"WatchlistItem"> | Date | string
  }

  export type AlertWhereInput = {
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    id?: StringFilter<"Alert"> | string
    userId?: StringFilter<"Alert"> | string
    instrumentId?: StringNullableFilter<"Alert"> | string | null
    alertType?: EnumAlertTypeFilter<"Alert"> | $Enums.AlertType
    message?: StringFilter<"Alert"> | string
    triggerPrice?: FloatNullableFilter<"Alert"> | number | null
    condition?: StringNullableFilter<"Alert"> | string | null
    isTriggered?: BoolFilter<"Alert"> | boolean
    isRead?: BoolFilter<"Alert"> | boolean
    triggeredAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AlertOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrderInput | SortOrder
    alertType?: SortOrder
    message?: SortOrder
    triggerPrice?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    isTriggered?: SortOrder
    isRead?: SortOrder
    triggeredAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AlertOrderByRelevanceInput
  }

  export type AlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    userId?: StringFilter<"Alert"> | string
    instrumentId?: StringNullableFilter<"Alert"> | string | null
    alertType?: EnumAlertTypeFilter<"Alert"> | $Enums.AlertType
    message?: StringFilter<"Alert"> | string
    triggerPrice?: FloatNullableFilter<"Alert"> | number | null
    condition?: StringNullableFilter<"Alert"> | string | null
    isTriggered?: BoolFilter<"Alert"> | boolean
    isRead?: BoolFilter<"Alert"> | boolean
    triggeredAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AlertOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrderInput | SortOrder
    alertType?: SortOrder
    message?: SortOrder
    triggerPrice?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    isTriggered?: SortOrder
    isRead?: SortOrder
    triggeredAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AlertCountOrderByAggregateInput
    _avg?: AlertAvgOrderByAggregateInput
    _max?: AlertMaxOrderByAggregateInput
    _min?: AlertMinOrderByAggregateInput
    _sum?: AlertSumOrderByAggregateInput
  }

  export type AlertScalarWhereWithAggregatesInput = {
    AND?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    OR?: AlertScalarWhereWithAggregatesInput[]
    NOT?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alert"> | string
    userId?: StringWithAggregatesFilter<"Alert"> | string
    instrumentId?: StringNullableWithAggregatesFilter<"Alert"> | string | null
    alertType?: EnumAlertTypeWithAggregatesFilter<"Alert"> | $Enums.AlertType
    message?: StringWithAggregatesFilter<"Alert"> | string
    triggerPrice?: FloatNullableWithAggregatesFilter<"Alert"> | number | null
    condition?: StringNullableWithAggregatesFilter<"Alert"> | string | null
    isTriggered?: BoolWithAggregatesFilter<"Alert"> | boolean
    isRead?: BoolWithAggregatesFilter<"Alert"> | boolean
    triggeredAt?: DateTimeNullableWithAggregatesFilter<"Alert"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Alert"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    priority?: EnumPriorityFilter<"Notification"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: NotificationOrderByRelevanceInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    priority?: EnumPriorityFilter<"Notification"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    priority?: EnumPriorityWithAggregatesFilter<"Notification"> | $Enums.Priority
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type BasketWhereInput = {
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    id?: StringFilter<"Basket"> | string
    userId?: StringFilter<"Basket"> | string
    name?: StringFilter<"Basket"> | string
    description?: StringNullableFilter<"Basket"> | string | null
    totalValue?: FloatFilter<"Basket"> | number
    isActive?: BoolFilter<"Basket"> | boolean
    createdAt?: DateTimeFilter<"Basket"> | Date | string
    updatedAt?: DateTimeFilter<"Basket"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: BasketItemListRelationFilter
  }

  export type BasketOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    totalValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: BasketItemOrderByRelationAggregateInput
    _relevance?: BasketOrderByRelevanceInput
  }

  export type BasketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BasketWhereInput | BasketWhereInput[]
    OR?: BasketWhereInput[]
    NOT?: BasketWhereInput | BasketWhereInput[]
    userId?: StringFilter<"Basket"> | string
    name?: StringFilter<"Basket"> | string
    description?: StringNullableFilter<"Basket"> | string | null
    totalValue?: FloatFilter<"Basket"> | number
    isActive?: BoolFilter<"Basket"> | boolean
    createdAt?: DateTimeFilter<"Basket"> | Date | string
    updatedAt?: DateTimeFilter<"Basket"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: BasketItemListRelationFilter
  }, "id">

  export type BasketOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    totalValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BasketCountOrderByAggregateInput
    _avg?: BasketAvgOrderByAggregateInput
    _max?: BasketMaxOrderByAggregateInput
    _min?: BasketMinOrderByAggregateInput
    _sum?: BasketSumOrderByAggregateInput
  }

  export type BasketScalarWhereWithAggregatesInput = {
    AND?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    OR?: BasketScalarWhereWithAggregatesInput[]
    NOT?: BasketScalarWhereWithAggregatesInput | BasketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Basket"> | string
    userId?: StringWithAggregatesFilter<"Basket"> | string
    name?: StringWithAggregatesFilter<"Basket"> | string
    description?: StringNullableWithAggregatesFilter<"Basket"> | string | null
    totalValue?: FloatWithAggregatesFilter<"Basket"> | number
    isActive?: BoolWithAggregatesFilter<"Basket"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Basket"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Basket"> | Date | string
  }

  export type BasketItemWhereInput = {
    AND?: BasketItemWhereInput | BasketItemWhereInput[]
    OR?: BasketItemWhereInput[]
    NOT?: BasketItemWhereInput | BasketItemWhereInput[]
    id?: StringFilter<"BasketItem"> | string
    basketId?: StringFilter<"BasketItem"> | string
    instrumentId?: StringFilter<"BasketItem"> | string
    tradingSymbol?: StringFilter<"BasketItem"> | string
    exchange?: EnumExchangeFilter<"BasketItem"> | $Enums.Exchange
    transactionType?: EnumTransactionTypeFilter<"BasketItem"> | $Enums.TransactionType
    quantity?: IntFilter<"BasketItem"> | number
    orderType?: EnumOrderTypeFilter<"BasketItem"> | $Enums.OrderType
    price?: FloatNullableFilter<"BasketItem"> | number | null
    triggerPrice?: FloatNullableFilter<"BasketItem"> | number | null
    product?: EnumProductTypeFilter<"BasketItem"> | $Enums.ProductType
    sortOrder?: IntFilter<"BasketItem"> | number
    basket?: XOR<BasketScalarRelationFilter, BasketWhereInput>
  }

  export type BasketItemOrderByWithRelationInput = {
    id?: SortOrder
    basketId?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    transactionType?: SortOrder
    quantity?: SortOrder
    orderType?: SortOrder
    price?: SortOrderInput | SortOrder
    triggerPrice?: SortOrderInput | SortOrder
    product?: SortOrder
    sortOrder?: SortOrder
    basket?: BasketOrderByWithRelationInput
    _relevance?: BasketItemOrderByRelevanceInput
  }

  export type BasketItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BasketItemWhereInput | BasketItemWhereInput[]
    OR?: BasketItemWhereInput[]
    NOT?: BasketItemWhereInput | BasketItemWhereInput[]
    basketId?: StringFilter<"BasketItem"> | string
    instrumentId?: StringFilter<"BasketItem"> | string
    tradingSymbol?: StringFilter<"BasketItem"> | string
    exchange?: EnumExchangeFilter<"BasketItem"> | $Enums.Exchange
    transactionType?: EnumTransactionTypeFilter<"BasketItem"> | $Enums.TransactionType
    quantity?: IntFilter<"BasketItem"> | number
    orderType?: EnumOrderTypeFilter<"BasketItem"> | $Enums.OrderType
    price?: FloatNullableFilter<"BasketItem"> | number | null
    triggerPrice?: FloatNullableFilter<"BasketItem"> | number | null
    product?: EnumProductTypeFilter<"BasketItem"> | $Enums.ProductType
    sortOrder?: IntFilter<"BasketItem"> | number
    basket?: XOR<BasketScalarRelationFilter, BasketWhereInput>
  }, "id">

  export type BasketItemOrderByWithAggregationInput = {
    id?: SortOrder
    basketId?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    transactionType?: SortOrder
    quantity?: SortOrder
    orderType?: SortOrder
    price?: SortOrderInput | SortOrder
    triggerPrice?: SortOrderInput | SortOrder
    product?: SortOrder
    sortOrder?: SortOrder
    _count?: BasketItemCountOrderByAggregateInput
    _avg?: BasketItemAvgOrderByAggregateInput
    _max?: BasketItemMaxOrderByAggregateInput
    _min?: BasketItemMinOrderByAggregateInput
    _sum?: BasketItemSumOrderByAggregateInput
  }

  export type BasketItemScalarWhereWithAggregatesInput = {
    AND?: BasketItemScalarWhereWithAggregatesInput | BasketItemScalarWhereWithAggregatesInput[]
    OR?: BasketItemScalarWhereWithAggregatesInput[]
    NOT?: BasketItemScalarWhereWithAggregatesInput | BasketItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BasketItem"> | string
    basketId?: StringWithAggregatesFilter<"BasketItem"> | string
    instrumentId?: StringWithAggregatesFilter<"BasketItem"> | string
    tradingSymbol?: StringWithAggregatesFilter<"BasketItem"> | string
    exchange?: EnumExchangeWithAggregatesFilter<"BasketItem"> | $Enums.Exchange
    transactionType?: EnumTransactionTypeWithAggregatesFilter<"BasketItem"> | $Enums.TransactionType
    quantity?: IntWithAggregatesFilter<"BasketItem"> | number
    orderType?: EnumOrderTypeWithAggregatesFilter<"BasketItem"> | $Enums.OrderType
    price?: FloatNullableWithAggregatesFilter<"BasketItem"> | number | null
    triggerPrice?: FloatNullableWithAggregatesFilter<"BasketItem"> | number | null
    product?: EnumProductTypeWithAggregatesFilter<"BasketItem"> | $Enums.ProductType
    sortOrder?: IntWithAggregatesFilter<"BasketItem"> | number
  }

  export type CorporateActionWhereInput = {
    AND?: CorporateActionWhereInput | CorporateActionWhereInput[]
    OR?: CorporateActionWhereInput[]
    NOT?: CorporateActionWhereInput | CorporateActionWhereInput[]
    id?: StringFilter<"CorporateAction"> | string
    instrumentId?: StringFilter<"CorporateAction"> | string
    actionType?: EnumCorporateActionTypeFilter<"CorporateAction"> | $Enums.CorporateActionType
    exDate?: DateTimeFilter<"CorporateAction"> | Date | string
    recordDate?: DateTimeNullableFilter<"CorporateAction"> | Date | string | null
    announcementDate?: DateTimeFilter<"CorporateAction"> | Date | string
    description?: StringFilter<"CorporateAction"> | string
    oldSymbol?: StringNullableFilter<"CorporateAction"> | string | null
    newSymbol?: StringNullableFilter<"CorporateAction"> | string | null
    ratio?: StringNullableFilter<"CorporateAction"> | string | null
    dividendAmount?: FloatNullableFilter<"CorporateAction"> | number | null
    isProcessed?: BoolFilter<"CorporateAction"> | boolean
    processedAt?: DateTimeNullableFilter<"CorporateAction"> | Date | string | null
    createdAt?: DateTimeFilter<"CorporateAction"> | Date | string
  }

  export type CorporateActionOrderByWithRelationInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    actionType?: SortOrder
    exDate?: SortOrder
    recordDate?: SortOrderInput | SortOrder
    announcementDate?: SortOrder
    description?: SortOrder
    oldSymbol?: SortOrderInput | SortOrder
    newSymbol?: SortOrderInput | SortOrder
    ratio?: SortOrderInput | SortOrder
    dividendAmount?: SortOrderInput | SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _relevance?: CorporateActionOrderByRelevanceInput
  }

  export type CorporateActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CorporateActionWhereInput | CorporateActionWhereInput[]
    OR?: CorporateActionWhereInput[]
    NOT?: CorporateActionWhereInput | CorporateActionWhereInput[]
    instrumentId?: StringFilter<"CorporateAction"> | string
    actionType?: EnumCorporateActionTypeFilter<"CorporateAction"> | $Enums.CorporateActionType
    exDate?: DateTimeFilter<"CorporateAction"> | Date | string
    recordDate?: DateTimeNullableFilter<"CorporateAction"> | Date | string | null
    announcementDate?: DateTimeFilter<"CorporateAction"> | Date | string
    description?: StringFilter<"CorporateAction"> | string
    oldSymbol?: StringNullableFilter<"CorporateAction"> | string | null
    newSymbol?: StringNullableFilter<"CorporateAction"> | string | null
    ratio?: StringNullableFilter<"CorporateAction"> | string | null
    dividendAmount?: FloatNullableFilter<"CorporateAction"> | number | null
    isProcessed?: BoolFilter<"CorporateAction"> | boolean
    processedAt?: DateTimeNullableFilter<"CorporateAction"> | Date | string | null
    createdAt?: DateTimeFilter<"CorporateAction"> | Date | string
  }, "id">

  export type CorporateActionOrderByWithAggregationInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    actionType?: SortOrder
    exDate?: SortOrder
    recordDate?: SortOrderInput | SortOrder
    announcementDate?: SortOrder
    description?: SortOrder
    oldSymbol?: SortOrderInput | SortOrder
    newSymbol?: SortOrderInput | SortOrder
    ratio?: SortOrderInput | SortOrder
    dividendAmount?: SortOrderInput | SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CorporateActionCountOrderByAggregateInput
    _avg?: CorporateActionAvgOrderByAggregateInput
    _max?: CorporateActionMaxOrderByAggregateInput
    _min?: CorporateActionMinOrderByAggregateInput
    _sum?: CorporateActionSumOrderByAggregateInput
  }

  export type CorporateActionScalarWhereWithAggregatesInput = {
    AND?: CorporateActionScalarWhereWithAggregatesInput | CorporateActionScalarWhereWithAggregatesInput[]
    OR?: CorporateActionScalarWhereWithAggregatesInput[]
    NOT?: CorporateActionScalarWhereWithAggregatesInput | CorporateActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CorporateAction"> | string
    instrumentId?: StringWithAggregatesFilter<"CorporateAction"> | string
    actionType?: EnumCorporateActionTypeWithAggregatesFilter<"CorporateAction"> | $Enums.CorporateActionType
    exDate?: DateTimeWithAggregatesFilter<"CorporateAction"> | Date | string
    recordDate?: DateTimeNullableWithAggregatesFilter<"CorporateAction"> | Date | string | null
    announcementDate?: DateTimeWithAggregatesFilter<"CorporateAction"> | Date | string
    description?: StringWithAggregatesFilter<"CorporateAction"> | string
    oldSymbol?: StringNullableWithAggregatesFilter<"CorporateAction"> | string | null
    newSymbol?: StringNullableWithAggregatesFilter<"CorporateAction"> | string | null
    ratio?: StringNullableWithAggregatesFilter<"CorporateAction"> | string | null
    dividendAmount?: FloatNullableWithAggregatesFilter<"CorporateAction"> | number | null
    isProcessed?: BoolWithAggregatesFilter<"CorporateAction"> | boolean
    processedAt?: DateTimeNullableWithAggregatesFilter<"CorporateAction"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CorporateAction"> | Date | string
  }

  export type TradeJournalWhereInput = {
    AND?: TradeJournalWhereInput | TradeJournalWhereInput[]
    OR?: TradeJournalWhereInput[]
    NOT?: TradeJournalWhereInput | TradeJournalWhereInput[]
    id?: StringFilter<"TradeJournal"> | string
    userId?: StringFilter<"TradeJournal"> | string
    tradeId?: StringNullableFilter<"TradeJournal"> | string | null
    orderId?: StringNullableFilter<"TradeJournal"> | string | null
    date?: DateTimeFilter<"TradeJournal"> | Date | string
    notes?: StringFilter<"TradeJournal"> | string
    tags?: StringNullableListFilter<"TradeJournal">
    strategy?: StringNullableFilter<"TradeJournal"> | string | null
    emotionalState?: StringNullableFilter<"TradeJournal"> | string | null
    learnings?: StringNullableFilter<"TradeJournal"> | string | null
    createdAt?: DateTimeFilter<"TradeJournal"> | Date | string
    updatedAt?: DateTimeFilter<"TradeJournal"> | Date | string
  }

  export type TradeJournalOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    date?: SortOrder
    notes?: SortOrder
    tags?: SortOrder
    strategy?: SortOrderInput | SortOrder
    emotionalState?: SortOrderInput | SortOrder
    learnings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: TradeJournalOrderByRelevanceInput
  }

  export type TradeJournalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TradeJournalWhereInput | TradeJournalWhereInput[]
    OR?: TradeJournalWhereInput[]
    NOT?: TradeJournalWhereInput | TradeJournalWhereInput[]
    userId?: StringFilter<"TradeJournal"> | string
    tradeId?: StringNullableFilter<"TradeJournal"> | string | null
    orderId?: StringNullableFilter<"TradeJournal"> | string | null
    date?: DateTimeFilter<"TradeJournal"> | Date | string
    notes?: StringFilter<"TradeJournal"> | string
    tags?: StringNullableListFilter<"TradeJournal">
    strategy?: StringNullableFilter<"TradeJournal"> | string | null
    emotionalState?: StringNullableFilter<"TradeJournal"> | string | null
    learnings?: StringNullableFilter<"TradeJournal"> | string | null
    createdAt?: DateTimeFilter<"TradeJournal"> | Date | string
    updatedAt?: DateTimeFilter<"TradeJournal"> | Date | string
  }, "id">

  export type TradeJournalOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    date?: SortOrder
    notes?: SortOrder
    tags?: SortOrder
    strategy?: SortOrderInput | SortOrder
    emotionalState?: SortOrderInput | SortOrder
    learnings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TradeJournalCountOrderByAggregateInput
    _max?: TradeJournalMaxOrderByAggregateInput
    _min?: TradeJournalMinOrderByAggregateInput
  }

  export type TradeJournalScalarWhereWithAggregatesInput = {
    AND?: TradeJournalScalarWhereWithAggregatesInput | TradeJournalScalarWhereWithAggregatesInput[]
    OR?: TradeJournalScalarWhereWithAggregatesInput[]
    NOT?: TradeJournalScalarWhereWithAggregatesInput | TradeJournalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TradeJournal"> | string
    userId?: StringWithAggregatesFilter<"TradeJournal"> | string
    tradeId?: StringNullableWithAggregatesFilter<"TradeJournal"> | string | null
    orderId?: StringNullableWithAggregatesFilter<"TradeJournal"> | string | null
    date?: DateTimeWithAggregatesFilter<"TradeJournal"> | Date | string
    notes?: StringWithAggregatesFilter<"TradeJournal"> | string
    tags?: StringNullableListFilter<"TradeJournal">
    strategy?: StringNullableWithAggregatesFilter<"TradeJournal"> | string | null
    emotionalState?: StringNullableWithAggregatesFilter<"TradeJournal"> | string | null
    learnings?: StringNullableWithAggregatesFilter<"TradeJournal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TradeJournal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TradeJournal"> | Date | string
  }

  export type DailyPnLWhereInput = {
    AND?: DailyPnLWhereInput | DailyPnLWhereInput[]
    OR?: DailyPnLWhereInput[]
    NOT?: DailyPnLWhereInput | DailyPnLWhereInput[]
    id?: StringFilter<"DailyPnL"> | string
    userId?: StringFilter<"DailyPnL"> | string
    date?: DateTimeFilter<"DailyPnL"> | Date | string
    realizedPnl?: FloatFilter<"DailyPnL"> | number
    unrealizedPnl?: FloatFilter<"DailyPnL"> | number
    totalPnl?: FloatFilter<"DailyPnL"> | number
    equityPnl?: FloatFilter<"DailyPnL"> | number
    foPnl?: FloatFilter<"DailyPnL"> | number
    commodityPnl?: FloatFilter<"DailyPnL"> | number
    charges?: FloatFilter<"DailyPnL"> | number
    createdAt?: DateTimeFilter<"DailyPnL"> | Date | string
  }

  export type DailyPnLOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    realizedPnl?: SortOrder
    unrealizedPnl?: SortOrder
    totalPnl?: SortOrder
    equityPnl?: SortOrder
    foPnl?: SortOrder
    commodityPnl?: SortOrder
    charges?: SortOrder
    createdAt?: SortOrder
    _relevance?: DailyPnLOrderByRelevanceInput
  }

  export type DailyPnLWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    date?: Date | string
    AND?: DailyPnLWhereInput | DailyPnLWhereInput[]
    OR?: DailyPnLWhereInput[]
    NOT?: DailyPnLWhereInput | DailyPnLWhereInput[]
    userId?: StringFilter<"DailyPnL"> | string
    realizedPnl?: FloatFilter<"DailyPnL"> | number
    unrealizedPnl?: FloatFilter<"DailyPnL"> | number
    totalPnl?: FloatFilter<"DailyPnL"> | number
    equityPnl?: FloatFilter<"DailyPnL"> | number
    foPnl?: FloatFilter<"DailyPnL"> | number
    commodityPnl?: FloatFilter<"DailyPnL"> | number
    charges?: FloatFilter<"DailyPnL"> | number
    createdAt?: DateTimeFilter<"DailyPnL"> | Date | string
  }, "id" | "date">

  export type DailyPnLOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    realizedPnl?: SortOrder
    unrealizedPnl?: SortOrder
    totalPnl?: SortOrder
    equityPnl?: SortOrder
    foPnl?: SortOrder
    commodityPnl?: SortOrder
    charges?: SortOrder
    createdAt?: SortOrder
    _count?: DailyPnLCountOrderByAggregateInput
    _avg?: DailyPnLAvgOrderByAggregateInput
    _max?: DailyPnLMaxOrderByAggregateInput
    _min?: DailyPnLMinOrderByAggregateInput
    _sum?: DailyPnLSumOrderByAggregateInput
  }

  export type DailyPnLScalarWhereWithAggregatesInput = {
    AND?: DailyPnLScalarWhereWithAggregatesInput | DailyPnLScalarWhereWithAggregatesInput[]
    OR?: DailyPnLScalarWhereWithAggregatesInput[]
    NOT?: DailyPnLScalarWhereWithAggregatesInput | DailyPnLScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DailyPnL"> | string
    userId?: StringWithAggregatesFilter<"DailyPnL"> | string
    date?: DateTimeWithAggregatesFilter<"DailyPnL"> | Date | string
    realizedPnl?: FloatWithAggregatesFilter<"DailyPnL"> | number
    unrealizedPnl?: FloatWithAggregatesFilter<"DailyPnL"> | number
    totalPnl?: FloatWithAggregatesFilter<"DailyPnL"> | number
    equityPnl?: FloatWithAggregatesFilter<"DailyPnL"> | number
    foPnl?: FloatWithAggregatesFilter<"DailyPnL"> | number
    commodityPnl?: FloatWithAggregatesFilter<"DailyPnL"> | number
    charges?: FloatWithAggregatesFilter<"DailyPnL"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DailyPnL"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserProfileCreateInput = {
    id?: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    fatherName?: string | null
    motherName?: string | null
    maritalStatus?: string | null
    country?: string
    occupation?: string | null
    annualIncome?: string | null
    tradingExperience?: string | null
    riskProfile?: $Enums.RiskProfile
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: string
    userId: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    fatherName?: string | null
    motherName?: string | null
    maritalStatus?: string | null
    country?: string
    occupation?: string | null
    annualIncome?: string | null
    tradingExperience?: string | null
    riskProfile?: $Enums.RiskProfile
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    annualIncome?: NullableStringFieldUpdateOperationsInput | string | null
    tradingExperience?: NullableStringFieldUpdateOperationsInput | string | null
    riskProfile?: EnumRiskProfileFieldUpdateOperationsInput | $Enums.RiskProfile
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    annualIncome?: NullableStringFieldUpdateOperationsInput | string | null
    tradingExperience?: NullableStringFieldUpdateOperationsInput | string | null
    riskProfile?: EnumRiskProfileFieldUpdateOperationsInput | $Enums.RiskProfile
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    id?: string
    userId: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    fatherName?: string | null
    motherName?: string | null
    maritalStatus?: string | null
    country?: string
    occupation?: string | null
    annualIncome?: string | null
    tradingExperience?: string | null
    riskProfile?: $Enums.RiskProfile
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    annualIncome?: NullableStringFieldUpdateOperationsInput | string | null
    tradingExperience?: NullableStringFieldUpdateOperationsInput | string | null
    riskProfile?: EnumRiskProfileFieldUpdateOperationsInput | $Enums.RiskProfile
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    annualIncome?: NullableStringFieldUpdateOperationsInput | string | null
    tradingExperience?: NullableStringFieldUpdateOperationsInput | string | null
    riskProfile?: EnumRiskProfileFieldUpdateOperationsInput | $Enums.RiskProfile
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankAccountCreateInput = {
    id?: string
    accountNumber: string
    ifscCode: string
    bankName: string
    branchName: string
    accountHolderName: string
    accountType: $Enums.BankAccountType
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBankAccountsInput
  }

  export type BankAccountUncheckedCreateInput = {
    id?: string
    userId: string
    accountNumber: string
    ifscCode: string
    bankName: string
    branchName: string
    accountHolderName: string
    accountType: $Enums.BankAccountType
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    branchName?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountType?: EnumBankAccountTypeFieldUpdateOperationsInput | $Enums.BankAccountType
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBankAccountsNestedInput
  }

  export type BankAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    branchName?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountType?: EnumBankAccountTypeFieldUpdateOperationsInput | $Enums.BankAccountType
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankAccountCreateManyInput = {
    id?: string
    userId: string
    accountNumber: string
    ifscCode: string
    bankName: string
    branchName: string
    accountHolderName: string
    accountType: $Enums.BankAccountType
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    branchName?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountType?: EnumBankAccountTypeFieldUpdateOperationsInput | $Enums.BankAccountType
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    branchName?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountType?: EnumBankAccountTypeFieldUpdateOperationsInput | $Enums.BankAccountType
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    deviceType?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    deviceType?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    deviceType?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundTransactionCreateInput = {
    id?: string
    transactionType: $Enums.FundTransactionType
    amount: number
    status?: $Enums.TransactionStatus
    paymentMode?: $Enums.PaymentMode | null
    utrNumber?: string | null
    bankAccountId?: string | null
    remarks?: string | null
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFundsInput
  }

  export type FundTransactionUncheckedCreateInput = {
    id?: string
    userId: string
    transactionType: $Enums.FundTransactionType
    amount: number
    status?: $Enums.TransactionStatus
    paymentMode?: $Enums.PaymentMode | null
    utrNumber?: string | null
    bankAccountId?: string | null
    remarks?: string | null
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FundTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumFundTransactionTypeFieldUpdateOperationsInput | $Enums.FundTransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMode?: NullableEnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode | null
    utrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFundsNestedInput
  }

  export type FundTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumFundTransactionTypeFieldUpdateOperationsInput | $Enums.FundTransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMode?: NullableEnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode | null
    utrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundTransactionCreateManyInput = {
    id?: string
    userId: string
    transactionType: $Enums.FundTransactionType
    amount: number
    status?: $Enums.TransactionStatus
    paymentMode?: $Enums.PaymentMode | null
    utrNumber?: string | null
    bankAccountId?: string | null
    remarks?: string | null
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FundTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumFundTransactionTypeFieldUpdateOperationsInput | $Enums.FundTransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMode?: NullableEnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode | null
    utrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumFundTransactionTypeFieldUpdateOperationsInput | $Enums.FundTransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMode?: NullableEnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode | null
    utrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarginCreateInput = {
    id?: string
    userId: string
    availableCash?: number
    usedMargin?: number
    availableMargin?: number
    collateralValue?: number
    openingBalance?: number
    payin?: number
    payout?: number
    spanMargin?: number
    exposureMargin?: number
    optionPremium?: number
    updatedAt?: Date | string
  }

  export type MarginUncheckedCreateInput = {
    id?: string
    userId: string
    availableCash?: number
    usedMargin?: number
    availableMargin?: number
    collateralValue?: number
    openingBalance?: number
    payin?: number
    payout?: number
    spanMargin?: number
    exposureMargin?: number
    optionPremium?: number
    updatedAt?: Date | string
  }

  export type MarginUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    availableCash?: FloatFieldUpdateOperationsInput | number
    usedMargin?: FloatFieldUpdateOperationsInput | number
    availableMargin?: FloatFieldUpdateOperationsInput | number
    collateralValue?: FloatFieldUpdateOperationsInput | number
    openingBalance?: FloatFieldUpdateOperationsInput | number
    payin?: FloatFieldUpdateOperationsInput | number
    payout?: FloatFieldUpdateOperationsInput | number
    spanMargin?: FloatFieldUpdateOperationsInput | number
    exposureMargin?: FloatFieldUpdateOperationsInput | number
    optionPremium?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarginUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    availableCash?: FloatFieldUpdateOperationsInput | number
    usedMargin?: FloatFieldUpdateOperationsInput | number
    availableMargin?: FloatFieldUpdateOperationsInput | number
    collateralValue?: FloatFieldUpdateOperationsInput | number
    openingBalance?: FloatFieldUpdateOperationsInput | number
    payin?: FloatFieldUpdateOperationsInput | number
    payout?: FloatFieldUpdateOperationsInput | number
    spanMargin?: FloatFieldUpdateOperationsInput | number
    exposureMargin?: FloatFieldUpdateOperationsInput | number
    optionPremium?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarginCreateManyInput = {
    id?: string
    userId: string
    availableCash?: number
    usedMargin?: number
    availableMargin?: number
    collateralValue?: number
    openingBalance?: number
    payin?: number
    payout?: number
    spanMargin?: number
    exposureMargin?: number
    optionPremium?: number
    updatedAt?: Date | string
  }

  export type MarginUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    availableCash?: FloatFieldUpdateOperationsInput | number
    usedMargin?: FloatFieldUpdateOperationsInput | number
    availableMargin?: FloatFieldUpdateOperationsInput | number
    collateralValue?: FloatFieldUpdateOperationsInput | number
    openingBalance?: FloatFieldUpdateOperationsInput | number
    payin?: FloatFieldUpdateOperationsInput | number
    payout?: FloatFieldUpdateOperationsInput | number
    spanMargin?: FloatFieldUpdateOperationsInput | number
    exposureMargin?: FloatFieldUpdateOperationsInput | number
    optionPremium?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarginUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    availableCash?: FloatFieldUpdateOperationsInput | number
    usedMargin?: FloatFieldUpdateOperationsInput | number
    availableMargin?: FloatFieldUpdateOperationsInput | number
    collateralValue?: FloatFieldUpdateOperationsInput | number
    openingBalance?: FloatFieldUpdateOperationsInput | number
    payin?: FloatFieldUpdateOperationsInput | number
    payout?: FloatFieldUpdateOperationsInput | number
    spanMargin?: FloatFieldUpdateOperationsInput | number
    exposureMargin?: FloatFieldUpdateOperationsInput | number
    optionPremium?: FloatFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentCreateInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingCreateNestedManyWithoutInstrumentInput
    positions?: PositionCreateNestedManyWithoutInstrumentInput
    orders?: OrderCreateNestedManyWithoutInstrumentInput
    trades?: TradeCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingUncheckedCreateNestedManyWithoutInstrumentInput
    positions?: PositionUncheckedCreateNestedManyWithoutInstrumentInput
    orders?: OrderUncheckedCreateNestedManyWithoutInstrumentInput
    trades?: TradeUncheckedCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUncheckedUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUncheckedUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUncheckedUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUncheckedUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentCreateManyInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstrumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketDepthCreateInput = {
    id?: string
    side: $Enums.OrderSide
    price: number
    quantity: number
    orders: number
    timestamp?: Date | string
    instrument: InstrumentCreateNestedOneWithoutMarketDepthInput
  }

  export type MarketDepthUncheckedCreateInput = {
    id?: string
    instrumentId: string
    side: $Enums.OrderSide
    price: number
    quantity: number
    orders: number
    timestamp?: Date | string
  }

  export type MarketDepthUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    side?: EnumOrderSideFieldUpdateOperationsInput | $Enums.OrderSide
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    instrument?: InstrumentUpdateOneRequiredWithoutMarketDepthNestedInput
  }

  export type MarketDepthUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    side?: EnumOrderSideFieldUpdateOperationsInput | $Enums.OrderSide
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketDepthCreateManyInput = {
    id?: string
    instrumentId: string
    side: $Enums.OrderSide
    price: number
    quantity: number
    orders: number
    timestamp?: Date | string
  }

  export type MarketDepthUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    side?: EnumOrderSideFieldUpdateOperationsInput | $Enums.OrderSide
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketDepthUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    side?: EnumOrderSideFieldUpdateOperationsInput | $Enums.OrderSide
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryCreateInput = {
    id?: string
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: Date | string
    interval: string
    instrument: InstrumentCreateNestedOneWithoutPriceHistoryInput
  }

  export type PriceHistoryUncheckedCreateInput = {
    id?: string
    instrumentId: string
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: Date | string
    interval: string
  }

  export type PriceHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    open?: FloatFieldUpdateOperationsInput | number
    high?: FloatFieldUpdateOperationsInput | number
    low?: FloatFieldUpdateOperationsInput | number
    close?: FloatFieldUpdateOperationsInput | number
    volume?: IntFieldUpdateOperationsInput | number
    ohlcDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interval?: StringFieldUpdateOperationsInput | string
    instrument?: InstrumentUpdateOneRequiredWithoutPriceHistoryNestedInput
  }

  export type PriceHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    open?: FloatFieldUpdateOperationsInput | number
    high?: FloatFieldUpdateOperationsInput | number
    low?: FloatFieldUpdateOperationsInput | number
    close?: FloatFieldUpdateOperationsInput | number
    volume?: IntFieldUpdateOperationsInput | number
    ohlcDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interval?: StringFieldUpdateOperationsInput | string
  }

  export type PriceHistoryCreateManyInput = {
    id?: string
    instrumentId: string
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: Date | string
    interval: string
  }

  export type PriceHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    open?: FloatFieldUpdateOperationsInput | number
    high?: FloatFieldUpdateOperationsInput | number
    low?: FloatFieldUpdateOperationsInput | number
    close?: FloatFieldUpdateOperationsInput | number
    volume?: IntFieldUpdateOperationsInput | number
    ohlcDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interval?: StringFieldUpdateOperationsInput | string
  }

  export type PriceHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    open?: FloatFieldUpdateOperationsInput | number
    high?: FloatFieldUpdateOperationsInput | number
    low?: FloatFieldUpdateOperationsInput | number
    close?: FloatFieldUpdateOperationsInput | number
    volume?: IntFieldUpdateOperationsInput | number
    ohlcDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interval?: StringFieldUpdateOperationsInput | string
  }

  export type PortfolioCreateInput = {
    id?: string
    totalValue?: number
    investedValue?: number
    currentValue?: number
    dayChange?: number
    dayChangePercent?: number
    totalPnl?: number
    totalPnlPercent?: number
    xirr?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPortfoliosInput
  }

  export type PortfolioUncheckedCreateInput = {
    id?: string
    userId: string
    totalValue?: number
    investedValue?: number
    currentValue?: number
    dayChange?: number
    dayChangePercent?: number
    totalPnl?: number
    totalPnlPercent?: number
    xirr?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PortfolioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: FloatFieldUpdateOperationsInput | number
    investedValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    totalPnlPercent?: FloatFieldUpdateOperationsInput | number
    xirr?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPortfoliosNestedInput
  }

  export type PortfolioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalValue?: FloatFieldUpdateOperationsInput | number
    investedValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    totalPnlPercent?: FloatFieldUpdateOperationsInput | number
    xirr?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioCreateManyInput = {
    id?: string
    userId: string
    totalValue?: number
    investedValue?: number
    currentValue?: number
    dayChange?: number
    dayChangePercent?: number
    totalPnl?: number
    totalPnlPercent?: number
    xirr?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PortfolioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: FloatFieldUpdateOperationsInput | number
    investedValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    totalPnlPercent?: FloatFieldUpdateOperationsInput | number
    xirr?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    totalValue?: FloatFieldUpdateOperationsInput | number
    investedValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    totalPnlPercent?: FloatFieldUpdateOperationsInput | number
    xirr?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HoldingCreateInput = {
    id?: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHoldingsInput
    instrument: InstrumentCreateNestedOneWithoutHoldingsInput
  }

  export type HoldingUncheckedCreateInput = {
    id?: string
    userId: string
    instrumentId: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HoldingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHoldingsNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutHoldingsNestedInput
  }

  export type HoldingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HoldingCreateManyInput = {
    id?: string
    userId: string
    instrumentId: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HoldingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HoldingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionCreateInput = {
    id?: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPositionsInput
    instrument: InstrumentCreateNestedOneWithoutPositionsInput
  }

  export type PositionUncheckedCreateInput = {
    id?: string
    userId: string
    instrumentId: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPositionsNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutPositionsNestedInput
  }

  export type PositionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionCreateManyInput = {
    id?: string
    userId: string
    instrumentId: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderCreateInput = {
    id?: string
    orderId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    instrument: InstrumentCreateNestedOneWithoutOrdersInput
    trades?: TradeCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: string
    orderId: string
    userId: string
    instrumentId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trades?: TradeUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutOrdersNestedInput
    trades?: TradeUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trades?: TradeUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: string
    orderId: string
    userId: string
    instrumentId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCreateInput = {
    id?: string
    tradeId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutTradesInput
    user: UserCreateNestedOneWithoutTradesInput
    instrument: InstrumentCreateNestedOneWithoutTradesInput
    charges?: TradeChargesCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateInput = {
    id?: string
    tradeId: string
    orderId: string
    userId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    charges?: TradeChargesUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutTradesNestedInput
    user?: UserUpdateOneRequiredWithoutTradesNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutTradesNestedInput
    charges?: TradeChargesUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charges?: TradeChargesUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type TradeCreateManyInput = {
    id?: string
    tradeId: string
    orderId: string
    userId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
  }

  export type TradeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeChargesCreateInput = {
    id?: string
    brokerage?: number
    stt?: number
    exchangeTxnCharge?: number
    gst?: number
    sebiTurnover?: number
    stampDuty?: number
    totalCharges?: number
    netAmount: number
    trade: TradeCreateNestedOneWithoutChargesInput
  }

  export type TradeChargesUncheckedCreateInput = {
    id?: string
    tradeId: string
    brokerage?: number
    stt?: number
    exchangeTxnCharge?: number
    gst?: number
    sebiTurnover?: number
    stampDuty?: number
    totalCharges?: number
    netAmount: number
  }

  export type TradeChargesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    brokerage?: FloatFieldUpdateOperationsInput | number
    stt?: FloatFieldUpdateOperationsInput | number
    exchangeTxnCharge?: FloatFieldUpdateOperationsInput | number
    gst?: FloatFieldUpdateOperationsInput | number
    sebiTurnover?: FloatFieldUpdateOperationsInput | number
    stampDuty?: FloatFieldUpdateOperationsInput | number
    totalCharges?: FloatFieldUpdateOperationsInput | number
    netAmount?: FloatFieldUpdateOperationsInput | number
    trade?: TradeUpdateOneRequiredWithoutChargesNestedInput
  }

  export type TradeChargesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    brokerage?: FloatFieldUpdateOperationsInput | number
    stt?: FloatFieldUpdateOperationsInput | number
    exchangeTxnCharge?: FloatFieldUpdateOperationsInput | number
    gst?: FloatFieldUpdateOperationsInput | number
    sebiTurnover?: FloatFieldUpdateOperationsInput | number
    stampDuty?: FloatFieldUpdateOperationsInput | number
    totalCharges?: FloatFieldUpdateOperationsInput | number
    netAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type TradeChargesCreateManyInput = {
    id?: string
    tradeId: string
    brokerage?: number
    stt?: number
    exchangeTxnCharge?: number
    gst?: number
    sebiTurnover?: number
    stampDuty?: number
    totalCharges?: number
    netAmount: number
  }

  export type TradeChargesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    brokerage?: FloatFieldUpdateOperationsInput | number
    stt?: FloatFieldUpdateOperationsInput | number
    exchangeTxnCharge?: FloatFieldUpdateOperationsInput | number
    gst?: FloatFieldUpdateOperationsInput | number
    sebiTurnover?: FloatFieldUpdateOperationsInput | number
    stampDuty?: FloatFieldUpdateOperationsInput | number
    totalCharges?: FloatFieldUpdateOperationsInput | number
    netAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type TradeChargesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    brokerage?: FloatFieldUpdateOperationsInput | number
    stt?: FloatFieldUpdateOperationsInput | number
    exchangeTxnCharge?: FloatFieldUpdateOperationsInput | number
    gst?: FloatFieldUpdateOperationsInput | number
    sebiTurnover?: FloatFieldUpdateOperationsInput | number
    stampDuty?: FloatFieldUpdateOperationsInput | number
    totalCharges?: FloatFieldUpdateOperationsInput | number
    netAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type GTTOrderCreateInput = {
    id?: string
    gttType: $Enums.GTTType
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    triggerType: $Enums.TriggerType
    triggerPrice: number
    lastPrice: number
    limitPrice?: number | null
    stopLossPrice?: number | null
    quantity: number
    product: $Enums.ProductType
    orderType: $Enums.OrderType
    status?: $Enums.GTTStatus
    expiresAt?: Date | string | null
    triggeredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutGttOrdersInput
  }

  export type GTTOrderUncheckedCreateInput = {
    id?: string
    userId: string
    gttType: $Enums.GTTType
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    triggerType: $Enums.TriggerType
    triggerPrice: number
    lastPrice: number
    limitPrice?: number | null
    stopLossPrice?: number | null
    quantity: number
    product: $Enums.ProductType
    orderType: $Enums.OrderType
    status?: $Enums.GTTStatus
    expiresAt?: Date | string | null
    triggeredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GTTOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    gttType?: EnumGTTTypeFieldUpdateOperationsInput | $Enums.GTTType
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    triggerType?: EnumTriggerTypeFieldUpdateOperationsInput | $Enums.TriggerType
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    limitPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    stopLossPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    status?: EnumGTTStatusFieldUpdateOperationsInput | $Enums.GTTStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGttOrdersNestedInput
  }

  export type GTTOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gttType?: EnumGTTTypeFieldUpdateOperationsInput | $Enums.GTTType
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    triggerType?: EnumTriggerTypeFieldUpdateOperationsInput | $Enums.TriggerType
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    limitPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    stopLossPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    status?: EnumGTTStatusFieldUpdateOperationsInput | $Enums.GTTStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GTTOrderCreateManyInput = {
    id?: string
    userId: string
    gttType: $Enums.GTTType
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    triggerType: $Enums.TriggerType
    triggerPrice: number
    lastPrice: number
    limitPrice?: number | null
    stopLossPrice?: number | null
    quantity: number
    product: $Enums.ProductType
    orderType: $Enums.OrderType
    status?: $Enums.GTTStatus
    expiresAt?: Date | string | null
    triggeredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GTTOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    gttType?: EnumGTTTypeFieldUpdateOperationsInput | $Enums.GTTType
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    triggerType?: EnumTriggerTypeFieldUpdateOperationsInput | $Enums.TriggerType
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    limitPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    stopLossPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    status?: EnumGTTStatusFieldUpdateOperationsInput | $Enums.GTTStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GTTOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    gttType?: EnumGTTTypeFieldUpdateOperationsInput | $Enums.GTTType
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    triggerType?: EnumTriggerTypeFieldUpdateOperationsInput | $Enums.TriggerType
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    limitPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    stopLossPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    status?: EnumGTTStatusFieldUpdateOperationsInput | $Enums.GTTStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistCreateInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWatchlistsInput
    items?: WatchlistItemCreateNestedManyWithoutWatchlistInput
  }

  export type WatchlistUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: WatchlistItemUncheckedCreateNestedManyWithoutWatchlistInput
  }

  export type WatchlistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchlistsNestedInput
    items?: WatchlistItemUpdateManyWithoutWatchlistNestedInput
  }

  export type WatchlistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: WatchlistItemUncheckedUpdateManyWithoutWatchlistNestedInput
  }

  export type WatchlistCreateManyInput = {
    id?: string
    userId: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WatchlistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistItemCreateInput = {
    id?: string
    sortOrder?: number
    addedAt?: Date | string
    watchlist: WatchlistCreateNestedOneWithoutItemsInput
    instrument: InstrumentCreateNestedOneWithoutWatchlistItemsInput
  }

  export type WatchlistItemUncheckedCreateInput = {
    id?: string
    watchlistId: string
    instrumentId: string
    sortOrder?: number
    addedAt?: Date | string
  }

  export type WatchlistItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchlist?: WatchlistUpdateOneRequiredWithoutItemsNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutWatchlistItemsNestedInput
  }

  export type WatchlistItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    watchlistId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistItemCreateManyInput = {
    id?: string
    watchlistId: string
    instrumentId: string
    sortOrder?: number
    addedAt?: Date | string
  }

  export type WatchlistItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    watchlistId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateInput = {
    id?: string
    instrumentId?: string | null
    alertType: $Enums.AlertType
    message: string
    triggerPrice?: number | null
    condition?: string | null
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAlertsInput
  }

  export type AlertUncheckedCreateInput = {
    id?: string
    userId: string
    instrumentId?: string | null
    alertType: $Enums.AlertType
    message: string
    triggerPrice?: number | null
    condition?: string | null
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isTriggered?: BoolFieldUpdateOperationsInput | boolean
    isRead?: BoolFieldUpdateOperationsInput | boolean
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAlertsNestedInput
  }

  export type AlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isTriggered?: BoolFieldUpdateOperationsInput | boolean
    isRead?: BoolFieldUpdateOperationsInput | boolean
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateManyInput = {
    id?: string
    userId: string
    instrumentId?: string | null
    alertType: $Enums.AlertType
    message: string
    triggerPrice?: number | null
    condition?: string | null
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isTriggered?: BoolFieldUpdateOperationsInput | boolean
    isRead?: BoolFieldUpdateOperationsInput | boolean
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isTriggered?: BoolFieldUpdateOperationsInput | boolean
    isRead?: BoolFieldUpdateOperationsInput | boolean
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    priority?: $Enums.Priority
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    priority?: $Enums.Priority
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    priority?: $Enums.Priority
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketCreateInput = {
    id?: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBasketsInput
    items?: BasketItemCreateNestedManyWithoutBasketInput
  }

  export type BasketUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BasketItemUncheckedCreateNestedManyWithoutBasketInput
  }

  export type BasketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBasketsNestedInput
    items?: BasketItemUpdateManyWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BasketItemUncheckedUpdateManyWithoutBasketNestedInput
  }

  export type BasketCreateManyInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketItemCreateInput = {
    id?: string
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    transactionType: $Enums.TransactionType
    quantity: number
    orderType: $Enums.OrderType
    price?: number | null
    triggerPrice?: number | null
    product: $Enums.ProductType
    sortOrder?: number
    basket: BasketCreateNestedOneWithoutItemsInput
  }

  export type BasketItemUncheckedCreateInput = {
    id?: string
    basketId: string
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    transactionType: $Enums.TransactionType
    quantity: number
    orderType: $Enums.OrderType
    price?: number | null
    triggerPrice?: number | null
    product: $Enums.ProductType
    sortOrder?: number
  }

  export type BasketItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    quantity?: IntFieldUpdateOperationsInput | number
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    sortOrder?: IntFieldUpdateOperationsInput | number
    basket?: BasketUpdateOneRequiredWithoutItemsNestedInput
  }

  export type BasketItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    basketId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    quantity?: IntFieldUpdateOperationsInput | number
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BasketItemCreateManyInput = {
    id?: string
    basketId: string
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    transactionType: $Enums.TransactionType
    quantity: number
    orderType: $Enums.OrderType
    price?: number | null
    triggerPrice?: number | null
    product: $Enums.ProductType
    sortOrder?: number
  }

  export type BasketItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    quantity?: IntFieldUpdateOperationsInput | number
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BasketItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    basketId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    quantity?: IntFieldUpdateOperationsInput | number
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type CorporateActionCreateInput = {
    id?: string
    instrumentId: string
    actionType: $Enums.CorporateActionType
    exDate: Date | string
    recordDate?: Date | string | null
    announcementDate: Date | string
    description: string
    oldSymbol?: string | null
    newSymbol?: string | null
    ratio?: string | null
    dividendAmount?: number | null
    isProcessed?: boolean
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type CorporateActionUncheckedCreateInput = {
    id?: string
    instrumentId: string
    actionType: $Enums.CorporateActionType
    exDate: Date | string
    recordDate?: Date | string | null
    announcementDate: Date | string
    description: string
    oldSymbol?: string | null
    newSymbol?: string | null
    ratio?: string | null
    dividendAmount?: number | null
    isProcessed?: boolean
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type CorporateActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    actionType?: EnumCorporateActionTypeFieldUpdateOperationsInput | $Enums.CorporateActionType
    exDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recordDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    announcementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    oldSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    newSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    ratio?: NullableStringFieldUpdateOperationsInput | string | null
    dividendAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    actionType?: EnumCorporateActionTypeFieldUpdateOperationsInput | $Enums.CorporateActionType
    exDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recordDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    announcementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    oldSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    newSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    ratio?: NullableStringFieldUpdateOperationsInput | string | null
    dividendAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActionCreateManyInput = {
    id?: string
    instrumentId: string
    actionType: $Enums.CorporateActionType
    exDate: Date | string
    recordDate?: Date | string | null
    announcementDate: Date | string
    description: string
    oldSymbol?: string | null
    newSymbol?: string | null
    ratio?: string | null
    dividendAmount?: number | null
    isProcessed?: boolean
    processedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type CorporateActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    actionType?: EnumCorporateActionTypeFieldUpdateOperationsInput | $Enums.CorporateActionType
    exDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recordDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    announcementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    oldSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    newSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    ratio?: NullableStringFieldUpdateOperationsInput | string | null
    dividendAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorporateActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    actionType?: EnumCorporateActionTypeFieldUpdateOperationsInput | $Enums.CorporateActionType
    exDate?: DateTimeFieldUpdateOperationsInput | Date | string
    recordDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    announcementDate?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    oldSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    newSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    ratio?: NullableStringFieldUpdateOperationsInput | string | null
    dividendAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    isProcessed?: BoolFieldUpdateOperationsInput | boolean
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeJournalCreateInput = {
    id?: string
    userId: string
    tradeId?: string | null
    orderId?: string | null
    date: Date | string
    notes: string
    tags?: TradeJournalCreatetagsInput | string[]
    strategy?: string | null
    emotionalState?: string | null
    learnings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeJournalUncheckedCreateInput = {
    id?: string
    userId: string
    tradeId?: string | null
    orderId?: string | null
    date: Date | string
    notes: string
    tags?: TradeJournalCreatetagsInput | string[]
    strategy?: string | null
    emotionalState?: string | null
    learnings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeJournalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tradeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    tags?: TradeJournalUpdatetagsInput | string[]
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    learnings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeJournalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tradeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    tags?: TradeJournalUpdatetagsInput | string[]
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    learnings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeJournalCreateManyInput = {
    id?: string
    userId: string
    tradeId?: string | null
    orderId?: string | null
    date: Date | string
    notes: string
    tags?: TradeJournalCreatetagsInput | string[]
    strategy?: string | null
    emotionalState?: string | null
    learnings?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeJournalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tradeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    tags?: TradeJournalUpdatetagsInput | string[]
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    learnings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeJournalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tradeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    tags?: TradeJournalUpdatetagsInput | string[]
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    emotionalState?: NullableStringFieldUpdateOperationsInput | string | null
    learnings?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPnLCreateInput = {
    id?: string
    userId: string
    date: Date | string
    realizedPnl?: number
    unrealizedPnl?: number
    totalPnl?: number
    equityPnl?: number
    foPnl?: number
    commodityPnl?: number
    charges?: number
    createdAt?: Date | string
  }

  export type DailyPnLUncheckedCreateInput = {
    id?: string
    userId: string
    date: Date | string
    realizedPnl?: number
    unrealizedPnl?: number
    totalPnl?: number
    equityPnl?: number
    foPnl?: number
    commodityPnl?: number
    charges?: number
    createdAt?: Date | string
  }

  export type DailyPnLUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    realizedPnl?: FloatFieldUpdateOperationsInput | number
    unrealizedPnl?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    equityPnl?: FloatFieldUpdateOperationsInput | number
    foPnl?: FloatFieldUpdateOperationsInput | number
    commodityPnl?: FloatFieldUpdateOperationsInput | number
    charges?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPnLUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    realizedPnl?: FloatFieldUpdateOperationsInput | number
    unrealizedPnl?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    equityPnl?: FloatFieldUpdateOperationsInput | number
    foPnl?: FloatFieldUpdateOperationsInput | number
    commodityPnl?: FloatFieldUpdateOperationsInput | number
    charges?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPnLCreateManyInput = {
    id?: string
    userId: string
    date: Date | string
    realizedPnl?: number
    unrealizedPnl?: number
    totalPnl?: number
    equityPnl?: number
    foPnl?: number
    commodityPnl?: number
    charges?: number
    createdAt?: Date | string
  }

  export type DailyPnLUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    realizedPnl?: FloatFieldUpdateOperationsInput | number
    unrealizedPnl?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    equityPnl?: FloatFieldUpdateOperationsInput | number
    foPnl?: FloatFieldUpdateOperationsInput | number
    commodityPnl?: FloatFieldUpdateOperationsInput | number
    charges?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyPnLUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    realizedPnl?: FloatFieldUpdateOperationsInput | number
    unrealizedPnl?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    equityPnl?: FloatFieldUpdateOperationsInput | number
    foPnl?: FloatFieldUpdateOperationsInput | number
    commodityPnl?: FloatFieldUpdateOperationsInput | number
    charges?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumKYCStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumKYCStatusNullableFilter<$PrismaModel> | $Enums.KYCStatus | null
  }

  export type EnumAccountTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAccountTypeNullableFilter<$PrismaModel> | $Enums.AccountType | null
  }

  export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type UserProfileNullableScalarRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type BankAccountListRelationFilter = {
    every?: BankAccountWhereInput
    some?: BankAccountWhereInput
    none?: BankAccountWhereInput
  }

  export type FundTransactionListRelationFilter = {
    every?: FundTransactionWhereInput
    some?: FundTransactionWhereInput
    none?: FundTransactionWhereInput
  }

  export type HoldingListRelationFilter = {
    every?: HoldingWhereInput
    some?: HoldingWhereInput
    none?: HoldingWhereInput
  }

  export type PositionListRelationFilter = {
    every?: PositionWhereInput
    some?: PositionWhereInput
    none?: PositionWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type TradeListRelationFilter = {
    every?: TradeWhereInput
    some?: TradeWhereInput
    none?: TradeWhereInput
  }

  export type WatchlistListRelationFilter = {
    every?: WatchlistWhereInput
    some?: WatchlistWhereInput
    none?: WatchlistWhereInput
  }

  export type PortfolioListRelationFilter = {
    every?: PortfolioWhereInput
    some?: PortfolioWhereInput
    none?: PortfolioWhereInput
  }

  export type GTTOrderListRelationFilter = {
    every?: GTTOrderWhereInput
    some?: GTTOrderWhereInput
    none?: GTTOrderWhereInput
  }

  export type BasketListRelationFilter = {
    every?: BasketWhereInput
    some?: BasketWhereInput
    none?: BasketWhereInput
  }

  export type AlertListRelationFilter = {
    every?: AlertWhereInput
    some?: AlertWhereInput
    none?: AlertWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BankAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FundTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HoldingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PositionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchlistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PortfolioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GTTOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BasketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    panNumber?: SortOrder
    aadhaarNumber?: SortOrder
    dateOfBirth?: SortOrder
    kycStatus?: SortOrder
    accountType?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    panNumber?: SortOrder
    aadhaarNumber?: SortOrder
    dateOfBirth?: SortOrder
    kycStatus?: SortOrder
    accountType?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    panNumber?: SortOrder
    aadhaarNumber?: SortOrder
    dateOfBirth?: SortOrder
    kycStatus?: SortOrder
    accountType?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    twoFactorEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumKYCStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumKYCStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.KYCStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumKYCStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumKYCStatusNullableFilter<$PrismaModel>
  }

  export type EnumAccountTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAccountTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AccountType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumRiskProfileFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskProfile | EnumRiskProfileFieldRefInput<$PrismaModel>
    in?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskProfileFilter<$PrismaModel> | $Enums.RiskProfile
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserProfileOrderByRelevanceInput = {
    fields: UserProfileOrderByRelevanceFieldEnum | UserProfileOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    maritalStatus?: SortOrder
    country?: SortOrder
    occupation?: SortOrder
    annualIncome?: SortOrder
    tradingExperience?: SortOrder
    riskProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    maritalStatus?: SortOrder
    country?: SortOrder
    occupation?: SortOrder
    annualIncome?: SortOrder
    tradingExperience?: SortOrder
    riskProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    pincode?: SortOrder
    fatherName?: SortOrder
    motherName?: SortOrder
    maritalStatus?: SortOrder
    country?: SortOrder
    occupation?: SortOrder
    annualIncome?: SortOrder
    tradingExperience?: SortOrder
    riskProfile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRiskProfileWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskProfile | EnumRiskProfileFieldRefInput<$PrismaModel>
    in?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskProfileWithAggregatesFilter<$PrismaModel> | $Enums.RiskProfile
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskProfileFilter<$PrismaModel>
    _max?: NestedEnumRiskProfileFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumBankAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BankAccountType | EnumBankAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBankAccountTypeFilter<$PrismaModel> | $Enums.BankAccountType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BankAccountOrderByRelevanceInput = {
    fields: BankAccountOrderByRelevanceFieldEnum | BankAccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BankAccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankName?: SortOrder
    branchName?: SortOrder
    accountHolderName?: SortOrder
    accountType?: SortOrder
    isPrimary?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankName?: SortOrder
    branchName?: SortOrder
    accountHolderName?: SortOrder
    accountType?: SortOrder
    isPrimary?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankAccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankName?: SortOrder
    branchName?: SortOrder
    accountHolderName?: SortOrder
    accountType?: SortOrder
    isPrimary?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBankAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BankAccountType | EnumBankAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBankAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.BankAccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBankAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumBankAccountTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    deviceType?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    deviceType?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    deviceType?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumFundTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FundTransactionType | EnumFundTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFundTransactionTypeFilter<$PrismaModel> | $Enums.FundTransactionType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type EnumPaymentModeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentModeNullableFilter<$PrismaModel> | $Enums.PaymentMode | null
  }

  export type FundTransactionOrderByRelevanceInput = {
    fields: FundTransactionOrderByRelevanceFieldEnum | FundTransactionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FundTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMode?: SortOrder
    utrNumber?: SortOrder
    bankAccountId?: SortOrder
    remarks?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FundTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type FundTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMode?: SortOrder
    utrNumber?: SortOrder
    bankAccountId?: SortOrder
    remarks?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FundTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    transactionType?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentMode?: SortOrder
    utrNumber?: SortOrder
    bankAccountId?: SortOrder
    remarks?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FundTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumFundTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FundTransactionType | EnumFundTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFundTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.FundTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFundTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumFundTransactionTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type EnumPaymentModeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentModeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentModeNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentModeNullableFilter<$PrismaModel>
  }

  export type MarginOrderByRelevanceInput = {
    fields: MarginOrderByRelevanceFieldEnum | MarginOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MarginCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    availableCash?: SortOrder
    usedMargin?: SortOrder
    availableMargin?: SortOrder
    collateralValue?: SortOrder
    openingBalance?: SortOrder
    payin?: SortOrder
    payout?: SortOrder
    spanMargin?: SortOrder
    exposureMargin?: SortOrder
    optionPremium?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarginAvgOrderByAggregateInput = {
    availableCash?: SortOrder
    usedMargin?: SortOrder
    availableMargin?: SortOrder
    collateralValue?: SortOrder
    openingBalance?: SortOrder
    payin?: SortOrder
    payout?: SortOrder
    spanMargin?: SortOrder
    exposureMargin?: SortOrder
    optionPremium?: SortOrder
  }

  export type MarginMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    availableCash?: SortOrder
    usedMargin?: SortOrder
    availableMargin?: SortOrder
    collateralValue?: SortOrder
    openingBalance?: SortOrder
    payin?: SortOrder
    payout?: SortOrder
    spanMargin?: SortOrder
    exposureMargin?: SortOrder
    optionPremium?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarginMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    availableCash?: SortOrder
    usedMargin?: SortOrder
    availableMargin?: SortOrder
    collateralValue?: SortOrder
    openingBalance?: SortOrder
    payin?: SortOrder
    payout?: SortOrder
    spanMargin?: SortOrder
    exposureMargin?: SortOrder
    optionPremium?: SortOrder
    updatedAt?: SortOrder
  }

  export type MarginSumOrderByAggregateInput = {
    availableCash?: SortOrder
    usedMargin?: SortOrder
    availableMargin?: SortOrder
    collateralValue?: SortOrder
    openingBalance?: SortOrder
    payin?: SortOrder
    payout?: SortOrder
    spanMargin?: SortOrder
    exposureMargin?: SortOrder
    optionPremium?: SortOrder
  }

  export type EnumExchangeFilter<$PrismaModel = never> = {
    equals?: $Enums.Exchange | EnumExchangeFieldRefInput<$PrismaModel>
    in?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeFilter<$PrismaModel> | $Enums.Exchange
  }

  export type EnumSegmentFilter<$PrismaModel = never> = {
    equals?: $Enums.Segment | EnumSegmentFieldRefInput<$PrismaModel>
    in?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    not?: NestedEnumSegmentFilter<$PrismaModel> | $Enums.Segment
  }

  export type EnumInstrumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InstrumentType | EnumInstrumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstrumentTypeFilter<$PrismaModel> | $Enums.InstrumentType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MarketDepthListRelationFilter = {
    every?: MarketDepthWhereInput
    some?: MarketDepthWhereInput
    none?: MarketDepthWhereInput
  }

  export type PriceHistoryListRelationFilter = {
    every?: PriceHistoryWhereInput
    some?: PriceHistoryWhereInput
    none?: PriceHistoryWhereInput
  }

  export type WatchlistItemListRelationFilter = {
    every?: WatchlistItemWhereInput
    some?: WatchlistItemWhereInput
    none?: WatchlistItemWhereInput
  }

  export type MarketDepthOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PriceHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchlistItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstrumentOrderByRelevanceInput = {
    fields: InstrumentOrderByRelevanceFieldEnum | InstrumentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InstrumentCountOrderByAggregateInput = {
    id?: SortOrder
    instrumentToken?: SortOrder
    exchangeToken?: SortOrder
    tradingSymbol?: SortOrder
    name?: SortOrder
    exchange?: SortOrder
    segment?: SortOrder
    instrumentType?: SortOrder
    tickSize?: SortOrder
    lotSize?: SortOrder
    expiry?: SortOrder
    strike?: SortOrder
    isin?: SortOrder
    isActive?: SortOrder
    lastPrice?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstrumentAvgOrderByAggregateInput = {
    tickSize?: SortOrder
    lotSize?: SortOrder
    strike?: SortOrder
    lastPrice?: SortOrder
  }

  export type InstrumentMaxOrderByAggregateInput = {
    id?: SortOrder
    instrumentToken?: SortOrder
    exchangeToken?: SortOrder
    tradingSymbol?: SortOrder
    name?: SortOrder
    exchange?: SortOrder
    segment?: SortOrder
    instrumentType?: SortOrder
    tickSize?: SortOrder
    lotSize?: SortOrder
    expiry?: SortOrder
    strike?: SortOrder
    isin?: SortOrder
    isActive?: SortOrder
    lastPrice?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstrumentMinOrderByAggregateInput = {
    id?: SortOrder
    instrumentToken?: SortOrder
    exchangeToken?: SortOrder
    tradingSymbol?: SortOrder
    name?: SortOrder
    exchange?: SortOrder
    segment?: SortOrder
    instrumentType?: SortOrder
    tickSize?: SortOrder
    lotSize?: SortOrder
    expiry?: SortOrder
    strike?: SortOrder
    isin?: SortOrder
    isActive?: SortOrder
    lastPrice?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstrumentSumOrderByAggregateInput = {
    tickSize?: SortOrder
    lotSize?: SortOrder
    strike?: SortOrder
    lastPrice?: SortOrder
  }

  export type EnumExchangeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Exchange | EnumExchangeFieldRefInput<$PrismaModel>
    in?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeWithAggregatesFilter<$PrismaModel> | $Enums.Exchange
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExchangeFilter<$PrismaModel>
    _max?: NestedEnumExchangeFilter<$PrismaModel>
  }

  export type EnumSegmentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Segment | EnumSegmentFieldRefInput<$PrismaModel>
    in?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    not?: NestedEnumSegmentWithAggregatesFilter<$PrismaModel> | $Enums.Segment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSegmentFilter<$PrismaModel>
    _max?: NestedEnumSegmentFilter<$PrismaModel>
  }

  export type EnumInstrumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InstrumentType | EnumInstrumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstrumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.InstrumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInstrumentTypeFilter<$PrismaModel>
    _max?: NestedEnumInstrumentTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumOrderSideFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSide | EnumOrderSideFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSideFilter<$PrismaModel> | $Enums.OrderSide
  }

  export type InstrumentScalarRelationFilter = {
    is?: InstrumentWhereInput
    isNot?: InstrumentWhereInput
  }

  export type MarketDepthOrderByRelevanceInput = {
    fields: MarketDepthOrderByRelevanceFieldEnum | MarketDepthOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MarketDepthCountOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    side?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orders?: SortOrder
    timestamp?: SortOrder
  }

  export type MarketDepthAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    orders?: SortOrder
  }

  export type MarketDepthMaxOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    side?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orders?: SortOrder
    timestamp?: SortOrder
  }

  export type MarketDepthMinOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    side?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orders?: SortOrder
    timestamp?: SortOrder
  }

  export type MarketDepthSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
    orders?: SortOrder
  }

  export type EnumOrderSideWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSide | EnumOrderSideFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSideWithAggregatesFilter<$PrismaModel> | $Enums.OrderSide
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderSideFilter<$PrismaModel>
    _max?: NestedEnumOrderSideFilter<$PrismaModel>
  }

  export type PriceHistoryOrderByRelevanceInput = {
    fields: PriceHistoryOrderByRelevanceFieldEnum | PriceHistoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PriceHistoryInstrumentIdOhlcDateIntervalCompoundUniqueInput = {
    instrumentId: string
    ohlcDate: Date | string
    interval: string
  }

  export type PriceHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    ohlcDate?: SortOrder
    interval?: SortOrder
  }

  export type PriceHistoryAvgOrderByAggregateInput = {
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
  }

  export type PriceHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    ohlcDate?: SortOrder
    interval?: SortOrder
  }

  export type PriceHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
    ohlcDate?: SortOrder
    interval?: SortOrder
  }

  export type PriceHistorySumOrderByAggregateInput = {
    open?: SortOrder
    high?: SortOrder
    low?: SortOrder
    close?: SortOrder
    volume?: SortOrder
  }

  export type PortfolioOrderByRelevanceInput = {
    fields: PortfolioOrderByRelevanceFieldEnum | PortfolioOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PortfolioCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalValue?: SortOrder
    investedValue?: SortOrder
    currentValue?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    totalPnl?: SortOrder
    totalPnlPercent?: SortOrder
    xirr?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioAvgOrderByAggregateInput = {
    totalValue?: SortOrder
    investedValue?: SortOrder
    currentValue?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    totalPnl?: SortOrder
    totalPnlPercent?: SortOrder
    xirr?: SortOrder
  }

  export type PortfolioMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalValue?: SortOrder
    investedValue?: SortOrder
    currentValue?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    totalPnl?: SortOrder
    totalPnlPercent?: SortOrder
    xirr?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalValue?: SortOrder
    investedValue?: SortOrder
    currentValue?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    totalPnl?: SortOrder
    totalPnlPercent?: SortOrder
    xirr?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type PortfolioSumOrderByAggregateInput = {
    totalValue?: SortOrder
    investedValue?: SortOrder
    currentValue?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    totalPnl?: SortOrder
    totalPnlPercent?: SortOrder
    xirr?: SortOrder
  }

  export type EnumProductTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeFilter<$PrismaModel> | $Enums.ProductType
  }

  export type HoldingOrderByRelevanceInput = {
    fields: HoldingOrderByRelevanceFieldEnum | HoldingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type HoldingUserIdInstrumentIdProductCompoundUniqueInput = {
    userId: string
    instrumentId: string
    product: $Enums.ProductType
  }

  export type HoldingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    quantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    pnl?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    collateralQuantity?: SortOrder
    collateralType?: SortOrder
    product?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HoldingAvgOrderByAggregateInput = {
    quantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    pnl?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    collateralQuantity?: SortOrder
  }

  export type HoldingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    quantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    pnl?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    collateralQuantity?: SortOrder
    collateralType?: SortOrder
    product?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HoldingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    quantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    pnl?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    collateralQuantity?: SortOrder
    collateralType?: SortOrder
    product?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HoldingSumOrderByAggregateInput = {
    quantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    pnl?: SortOrder
    dayChange?: SortOrder
    dayChangePercent?: SortOrder
    collateralQuantity?: SortOrder
  }

  export type EnumProductTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProductType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductTypeFilter<$PrismaModel>
    _max?: NestedEnumProductTypeFilter<$PrismaModel>
  }

  export type EnumPositionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PositionType | EnumPositionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionTypeFilter<$PrismaModel> | $Enums.PositionType
  }

  export type PositionOrderByRelevanceInput = {
    fields: PositionOrderByRelevanceFieldEnum | PositionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PositionUserIdInstrumentIdProductCompoundUniqueInput = {
    userId: string
    instrumentId: string
    product: $Enums.ProductType
  }

  export type PositionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    overnightQuantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    value?: SortOrder
    pnl?: SortOrder
    m2m?: SortOrder
    unrealised?: SortOrder
    realised?: SortOrder
    buyQuantity?: SortOrder
    buyValue?: SortOrder
    buyPrice?: SortOrder
    sellQuantity?: SortOrder
    sellValue?: SortOrder
    sellPrice?: SortOrder
    multiplier?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    positionType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionAvgOrderByAggregateInput = {
    quantity?: SortOrder
    overnightQuantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    value?: SortOrder
    pnl?: SortOrder
    m2m?: SortOrder
    unrealised?: SortOrder
    realised?: SortOrder
    buyQuantity?: SortOrder
    buyValue?: SortOrder
    buyPrice?: SortOrder
    sellQuantity?: SortOrder
    sellValue?: SortOrder
    sellPrice?: SortOrder
    multiplier?: SortOrder
  }

  export type PositionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    overnightQuantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    value?: SortOrder
    pnl?: SortOrder
    m2m?: SortOrder
    unrealised?: SortOrder
    realised?: SortOrder
    buyQuantity?: SortOrder
    buyValue?: SortOrder
    buyPrice?: SortOrder
    sellQuantity?: SortOrder
    sellValue?: SortOrder
    sellPrice?: SortOrder
    multiplier?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    positionType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    overnightQuantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    value?: SortOrder
    pnl?: SortOrder
    m2m?: SortOrder
    unrealised?: SortOrder
    realised?: SortOrder
    buyQuantity?: SortOrder
    buyValue?: SortOrder
    buyPrice?: SortOrder
    sellQuantity?: SortOrder
    sellValue?: SortOrder
    sellPrice?: SortOrder
    multiplier?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    positionType?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionSumOrderByAggregateInput = {
    quantity?: SortOrder
    overnightQuantity?: SortOrder
    averagePrice?: SortOrder
    lastPrice?: SortOrder
    value?: SortOrder
    pnl?: SortOrder
    m2m?: SortOrder
    unrealised?: SortOrder
    realised?: SortOrder
    buyQuantity?: SortOrder
    buyValue?: SortOrder
    buyPrice?: SortOrder
    sellQuantity?: SortOrder
    sellValue?: SortOrder
    sellPrice?: SortOrder
    multiplier?: SortOrder
  }

  export type EnumPositionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PositionType | EnumPositionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionTypeWithAggregatesFilter<$PrismaModel> | $Enums.PositionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPositionTypeFilter<$PrismaModel>
    _max?: NestedEnumPositionTypeFilter<$PrismaModel>
  }

  export type EnumOrderVarietyFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderVariety | EnumOrderVarietyFieldRefInput<$PrismaModel>
    in?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderVarietyFilter<$PrismaModel> | $Enums.OrderVariety
  }

  export type EnumOrderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderTypeFilter<$PrismaModel> | $Enums.OrderType
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type EnumOrderValidityFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderValidity | EnumOrderValidityFieldRefInput<$PrismaModel>
    in?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderValidityFilter<$PrismaModel> | $Enums.OrderValidity
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type OrderOrderByRelevanceInput = {
    fields: OrderOrderByRelevanceFieldEnum | OrderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    parentOrderId?: SortOrder
    exchangeOrderId?: SortOrder
    exchangeTimestamp?: SortOrder
    placedBy?: SortOrder
    variety?: SortOrder
    orderType?: SortOrder
    transactionType?: SortOrder
    validity?: SortOrder
    product?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    quantity?: SortOrder
    disclosedQuantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    averagePrice?: SortOrder
    filledQuantity?: SortOrder
    pendingQuantity?: SortOrder
    cancelledQuantity?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
    tag?: SortOrder
    clientOrderId?: SortOrder
    orderTimestamp?: SortOrder
    exchangeUpdateTime?: SortOrder
    rejectedBy?: SortOrder
    cancelledBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    quantity?: SortOrder
    disclosedQuantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    averagePrice?: SortOrder
    filledQuantity?: SortOrder
    pendingQuantity?: SortOrder
    cancelledQuantity?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    parentOrderId?: SortOrder
    exchangeOrderId?: SortOrder
    exchangeTimestamp?: SortOrder
    placedBy?: SortOrder
    variety?: SortOrder
    orderType?: SortOrder
    transactionType?: SortOrder
    validity?: SortOrder
    product?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    quantity?: SortOrder
    disclosedQuantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    averagePrice?: SortOrder
    filledQuantity?: SortOrder
    pendingQuantity?: SortOrder
    cancelledQuantity?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
    tag?: SortOrder
    clientOrderId?: SortOrder
    orderTimestamp?: SortOrder
    exchangeUpdateTime?: SortOrder
    rejectedBy?: SortOrder
    cancelledBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    parentOrderId?: SortOrder
    exchangeOrderId?: SortOrder
    exchangeTimestamp?: SortOrder
    placedBy?: SortOrder
    variety?: SortOrder
    orderType?: SortOrder
    transactionType?: SortOrder
    validity?: SortOrder
    product?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    quantity?: SortOrder
    disclosedQuantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    averagePrice?: SortOrder
    filledQuantity?: SortOrder
    pendingQuantity?: SortOrder
    cancelledQuantity?: SortOrder
    status?: SortOrder
    statusMessage?: SortOrder
    tag?: SortOrder
    clientOrderId?: SortOrder
    orderTimestamp?: SortOrder
    exchangeUpdateTime?: SortOrder
    rejectedBy?: SortOrder
    cancelledBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    quantity?: SortOrder
    disclosedQuantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    averagePrice?: SortOrder
    filledQuantity?: SortOrder
    pendingQuantity?: SortOrder
    cancelledQuantity?: SortOrder
  }

  export type EnumOrderVarietyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderVariety | EnumOrderVarietyFieldRefInput<$PrismaModel>
    in?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderVarietyWithAggregatesFilter<$PrismaModel> | $Enums.OrderVariety
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderVarietyFilter<$PrismaModel>
    _max?: NestedEnumOrderVarietyFilter<$PrismaModel>
  }

  export type EnumOrderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderTypeWithAggregatesFilter<$PrismaModel> | $Enums.OrderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderTypeFilter<$PrismaModel>
    _max?: NestedEnumOrderTypeFilter<$PrismaModel>
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type EnumOrderValidityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderValidity | EnumOrderValidityFieldRefInput<$PrismaModel>
    in?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderValidityWithAggregatesFilter<$PrismaModel> | $Enums.OrderValidity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderValidityFilter<$PrismaModel>
    _max?: NestedEnumOrderValidityFilter<$PrismaModel>
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type OrderScalarRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type TradeChargesNullableScalarRelationFilter = {
    is?: TradeChargesWhereInput | null
    isNot?: TradeChargesWhereInput | null
  }

  export type TradeOrderByRelevanceInput = {
    fields: TradeOrderByRelevanceFieldEnum | TradeOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TradeCountOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    transactionType?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    value?: SortOrder
    exchangeTimestamp?: SortOrder
    createdAt?: SortOrder
  }

  export type TradeAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    value?: SortOrder
  }

  export type TradeMaxOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    transactionType?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    value?: SortOrder
    exchangeTimestamp?: SortOrder
    createdAt?: SortOrder
  }

  export type TradeMinOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    exchange?: SortOrder
    tradingSymbol?: SortOrder
    transactionType?: SortOrder
    product?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    value?: SortOrder
    exchangeTimestamp?: SortOrder
    createdAt?: SortOrder
  }

  export type TradeSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    value?: SortOrder
  }

  export type TradeScalarRelationFilter = {
    is?: TradeWhereInput
    isNot?: TradeWhereInput
  }

  export type TradeChargesOrderByRelevanceInput = {
    fields: TradeChargesOrderByRelevanceFieldEnum | TradeChargesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TradeChargesCountOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    brokerage?: SortOrder
    stt?: SortOrder
    exchangeTxnCharge?: SortOrder
    gst?: SortOrder
    sebiTurnover?: SortOrder
    stampDuty?: SortOrder
    totalCharges?: SortOrder
    netAmount?: SortOrder
  }

  export type TradeChargesAvgOrderByAggregateInput = {
    brokerage?: SortOrder
    stt?: SortOrder
    exchangeTxnCharge?: SortOrder
    gst?: SortOrder
    sebiTurnover?: SortOrder
    stampDuty?: SortOrder
    totalCharges?: SortOrder
    netAmount?: SortOrder
  }

  export type TradeChargesMaxOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    brokerage?: SortOrder
    stt?: SortOrder
    exchangeTxnCharge?: SortOrder
    gst?: SortOrder
    sebiTurnover?: SortOrder
    stampDuty?: SortOrder
    totalCharges?: SortOrder
    netAmount?: SortOrder
  }

  export type TradeChargesMinOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    brokerage?: SortOrder
    stt?: SortOrder
    exchangeTxnCharge?: SortOrder
    gst?: SortOrder
    sebiTurnover?: SortOrder
    stampDuty?: SortOrder
    totalCharges?: SortOrder
    netAmount?: SortOrder
  }

  export type TradeChargesSumOrderByAggregateInput = {
    brokerage?: SortOrder
    stt?: SortOrder
    exchangeTxnCharge?: SortOrder
    gst?: SortOrder
    sebiTurnover?: SortOrder
    stampDuty?: SortOrder
    totalCharges?: SortOrder
    netAmount?: SortOrder
  }

  export type EnumGTTTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTType | EnumGTTTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTTypeFilter<$PrismaModel> | $Enums.GTTType
  }

  export type EnumTriggerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TriggerType | EnumTriggerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTriggerTypeFilter<$PrismaModel> | $Enums.TriggerType
  }

  export type EnumGTTStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTStatus | EnumGTTStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTStatusFilter<$PrismaModel> | $Enums.GTTStatus
  }

  export type GTTOrderOrderByRelevanceInput = {
    fields: GTTOrderOrderByRelevanceFieldEnum | GTTOrderOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GTTOrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gttType?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    triggerType?: SortOrder
    triggerPrice?: SortOrder
    lastPrice?: SortOrder
    limitPrice?: SortOrder
    stopLossPrice?: SortOrder
    quantity?: SortOrder
    product?: SortOrder
    orderType?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    triggeredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GTTOrderAvgOrderByAggregateInput = {
    triggerPrice?: SortOrder
    lastPrice?: SortOrder
    limitPrice?: SortOrder
    stopLossPrice?: SortOrder
    quantity?: SortOrder
  }

  export type GTTOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gttType?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    triggerType?: SortOrder
    triggerPrice?: SortOrder
    lastPrice?: SortOrder
    limitPrice?: SortOrder
    stopLossPrice?: SortOrder
    quantity?: SortOrder
    product?: SortOrder
    orderType?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    triggeredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GTTOrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gttType?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    triggerType?: SortOrder
    triggerPrice?: SortOrder
    lastPrice?: SortOrder
    limitPrice?: SortOrder
    stopLossPrice?: SortOrder
    quantity?: SortOrder
    product?: SortOrder
    orderType?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    triggeredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GTTOrderSumOrderByAggregateInput = {
    triggerPrice?: SortOrder
    lastPrice?: SortOrder
    limitPrice?: SortOrder
    stopLossPrice?: SortOrder
    quantity?: SortOrder
  }

  export type EnumGTTTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTType | EnumGTTTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTTypeWithAggregatesFilter<$PrismaModel> | $Enums.GTTType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGTTTypeFilter<$PrismaModel>
    _max?: NestedEnumGTTTypeFilter<$PrismaModel>
  }

  export type EnumTriggerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TriggerType | EnumTriggerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTriggerTypeWithAggregatesFilter<$PrismaModel> | $Enums.TriggerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTriggerTypeFilter<$PrismaModel>
    _max?: NestedEnumTriggerTypeFilter<$PrismaModel>
  }

  export type EnumGTTStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTStatus | EnumGTTStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTStatusWithAggregatesFilter<$PrismaModel> | $Enums.GTTStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGTTStatusFilter<$PrismaModel>
    _max?: NestedEnumGTTStatusFilter<$PrismaModel>
  }

  export type WatchlistOrderByRelevanceInput = {
    fields: WatchlistOrderByRelevanceFieldEnum | WatchlistOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WatchlistCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WatchlistMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WatchlistMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WatchlistScalarRelationFilter = {
    is?: WatchlistWhereInput
    isNot?: WatchlistWhereInput
  }

  export type WatchlistItemOrderByRelevanceInput = {
    fields: WatchlistItemOrderByRelevanceFieldEnum | WatchlistItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WatchlistItemWatchlistIdInstrumentIdCompoundUniqueInput = {
    watchlistId: string
    instrumentId: string
  }

  export type WatchlistItemCountOrderByAggregateInput = {
    id?: SortOrder
    watchlistId?: SortOrder
    instrumentId?: SortOrder
    sortOrder?: SortOrder
    addedAt?: SortOrder
  }

  export type WatchlistItemAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type WatchlistItemMaxOrderByAggregateInput = {
    id?: SortOrder
    watchlistId?: SortOrder
    instrumentId?: SortOrder
    sortOrder?: SortOrder
    addedAt?: SortOrder
  }

  export type WatchlistItemMinOrderByAggregateInput = {
    id?: SortOrder
    watchlistId?: SortOrder
    instrumentId?: SortOrder
    sortOrder?: SortOrder
    addedAt?: SortOrder
  }

  export type WatchlistItemSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type EnumAlertTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeFilter<$PrismaModel> | $Enums.AlertType
  }

  export type AlertOrderByRelevanceInput = {
    fields: AlertOrderByRelevanceFieldEnum | AlertOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AlertCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    triggerPrice?: SortOrder
    condition?: SortOrder
    isTriggered?: SortOrder
    isRead?: SortOrder
    triggeredAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AlertAvgOrderByAggregateInput = {
    triggerPrice?: SortOrder
  }

  export type AlertMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    triggerPrice?: SortOrder
    condition?: SortOrder
    isTriggered?: SortOrder
    isRead?: SortOrder
    triggeredAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AlertMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    instrumentId?: SortOrder
    alertType?: SortOrder
    message?: SortOrder
    triggerPrice?: SortOrder
    condition?: SortOrder
    isTriggered?: SortOrder
    isRead?: SortOrder
    triggeredAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AlertSumOrderByAggregateInput = {
    triggerPrice?: SortOrder
  }

  export type EnumAlertTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel> | $Enums.AlertType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertTypeFilter<$PrismaModel>
    _max?: NestedEnumAlertTypeFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NotificationOrderByRelevanceInput = {
    fields: NotificationOrderByRelevanceFieldEnum | NotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    notificationType?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type BasketItemListRelationFilter = {
    every?: BasketItemWhereInput
    some?: BasketItemWhereInput
    none?: BasketItemWhereInput
  }

  export type BasketItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BasketOrderByRelevanceInput = {
    fields: BasketOrderByRelevanceFieldEnum | BasketOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BasketCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BasketAvgOrderByAggregateInput = {
    totalValue?: SortOrder
  }

  export type BasketMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BasketMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    totalValue?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BasketSumOrderByAggregateInput = {
    totalValue?: SortOrder
  }

  export type BasketScalarRelationFilter = {
    is?: BasketWhereInput
    isNot?: BasketWhereInput
  }

  export type BasketItemOrderByRelevanceInput = {
    fields: BasketItemOrderByRelevanceFieldEnum | BasketItemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BasketItemCountOrderByAggregateInput = {
    id?: SortOrder
    basketId?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    transactionType?: SortOrder
    quantity?: SortOrder
    orderType?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    product?: SortOrder
    sortOrder?: SortOrder
  }

  export type BasketItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    sortOrder?: SortOrder
  }

  export type BasketItemMaxOrderByAggregateInput = {
    id?: SortOrder
    basketId?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    transactionType?: SortOrder
    quantity?: SortOrder
    orderType?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    product?: SortOrder
    sortOrder?: SortOrder
  }

  export type BasketItemMinOrderByAggregateInput = {
    id?: SortOrder
    basketId?: SortOrder
    instrumentId?: SortOrder
    tradingSymbol?: SortOrder
    exchange?: SortOrder
    transactionType?: SortOrder
    quantity?: SortOrder
    orderType?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    product?: SortOrder
    sortOrder?: SortOrder
  }

  export type BasketItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    price?: SortOrder
    triggerPrice?: SortOrder
    sortOrder?: SortOrder
  }

  export type EnumCorporateActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CorporateActionType | EnumCorporateActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCorporateActionTypeFilter<$PrismaModel> | $Enums.CorporateActionType
  }

  export type CorporateActionOrderByRelevanceInput = {
    fields: CorporateActionOrderByRelevanceFieldEnum | CorporateActionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CorporateActionCountOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    actionType?: SortOrder
    exDate?: SortOrder
    recordDate?: SortOrder
    announcementDate?: SortOrder
    description?: SortOrder
    oldSymbol?: SortOrder
    newSymbol?: SortOrder
    ratio?: SortOrder
    dividendAmount?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CorporateActionAvgOrderByAggregateInput = {
    dividendAmount?: SortOrder
  }

  export type CorporateActionMaxOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    actionType?: SortOrder
    exDate?: SortOrder
    recordDate?: SortOrder
    announcementDate?: SortOrder
    description?: SortOrder
    oldSymbol?: SortOrder
    newSymbol?: SortOrder
    ratio?: SortOrder
    dividendAmount?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CorporateActionMinOrderByAggregateInput = {
    id?: SortOrder
    instrumentId?: SortOrder
    actionType?: SortOrder
    exDate?: SortOrder
    recordDate?: SortOrder
    announcementDate?: SortOrder
    description?: SortOrder
    oldSymbol?: SortOrder
    newSymbol?: SortOrder
    ratio?: SortOrder
    dividendAmount?: SortOrder
    isProcessed?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type CorporateActionSumOrderByAggregateInput = {
    dividendAmount?: SortOrder
  }

  export type EnumCorporateActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CorporateActionType | EnumCorporateActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCorporateActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CorporateActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCorporateActionTypeFilter<$PrismaModel>
    _max?: NestedEnumCorporateActionTypeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TradeJournalOrderByRelevanceInput = {
    fields: TradeJournalOrderByRelevanceFieldEnum | TradeJournalOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TradeJournalCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    tags?: SortOrder
    strategy?: SortOrder
    emotionalState?: SortOrder
    learnings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeJournalMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    strategy?: SortOrder
    emotionalState?: SortOrder
    learnings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeJournalMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    orderId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    strategy?: SortOrder
    emotionalState?: SortOrder
    learnings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DailyPnLOrderByRelevanceInput = {
    fields: DailyPnLOrderByRelevanceFieldEnum | DailyPnLOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DailyPnLCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    realizedPnl?: SortOrder
    unrealizedPnl?: SortOrder
    totalPnl?: SortOrder
    equityPnl?: SortOrder
    foPnl?: SortOrder
    commodityPnl?: SortOrder
    charges?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyPnLAvgOrderByAggregateInput = {
    realizedPnl?: SortOrder
    unrealizedPnl?: SortOrder
    totalPnl?: SortOrder
    equityPnl?: SortOrder
    foPnl?: SortOrder
    commodityPnl?: SortOrder
    charges?: SortOrder
  }

  export type DailyPnLMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    realizedPnl?: SortOrder
    unrealizedPnl?: SortOrder
    totalPnl?: SortOrder
    equityPnl?: SortOrder
    foPnl?: SortOrder
    commodityPnl?: SortOrder
    charges?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyPnLMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    realizedPnl?: SortOrder
    unrealizedPnl?: SortOrder
    totalPnl?: SortOrder
    equityPnl?: SortOrder
    foPnl?: SortOrder
    commodityPnl?: SortOrder
    charges?: SortOrder
    createdAt?: SortOrder
  }

  export type DailyPnLSumOrderByAggregateInput = {
    realizedPnl?: SortOrder
    unrealizedPnl?: SortOrder
    totalPnl?: SortOrder
    equityPnl?: SortOrder
    foPnl?: SortOrder
    commodityPnl?: SortOrder
    charges?: SortOrder
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type BankAccountCreateNestedManyWithoutUserInput = {
    create?: XOR<BankAccountCreateWithoutUserInput, BankAccountUncheckedCreateWithoutUserInput> | BankAccountCreateWithoutUserInput[] | BankAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankAccountCreateOrConnectWithoutUserInput | BankAccountCreateOrConnectWithoutUserInput[]
    createMany?: BankAccountCreateManyUserInputEnvelope
    connect?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
  }

  export type FundTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<FundTransactionCreateWithoutUserInput, FundTransactionUncheckedCreateWithoutUserInput> | FundTransactionCreateWithoutUserInput[] | FundTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FundTransactionCreateOrConnectWithoutUserInput | FundTransactionCreateOrConnectWithoutUserInput[]
    createMany?: FundTransactionCreateManyUserInputEnvelope
    connect?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
  }

  export type HoldingCreateNestedManyWithoutUserInput = {
    create?: XOR<HoldingCreateWithoutUserInput, HoldingUncheckedCreateWithoutUserInput> | HoldingCreateWithoutUserInput[] | HoldingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutUserInput | HoldingCreateOrConnectWithoutUserInput[]
    createMany?: HoldingCreateManyUserInputEnvelope
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
  }

  export type PositionCreateNestedManyWithoutUserInput = {
    create?: XOR<PositionCreateWithoutUserInput, PositionUncheckedCreateWithoutUserInput> | PositionCreateWithoutUserInput[] | PositionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutUserInput | PositionCreateOrConnectWithoutUserInput[]
    createMany?: PositionCreateManyUserInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type TradeCreateNestedManyWithoutUserInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type WatchlistCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
  }

  export type PortfolioCreateNestedManyWithoutUserInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type GTTOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<GTTOrderCreateWithoutUserInput, GTTOrderUncheckedCreateWithoutUserInput> | GTTOrderCreateWithoutUserInput[] | GTTOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GTTOrderCreateOrConnectWithoutUserInput | GTTOrderCreateOrConnectWithoutUserInput[]
    createMany?: GTTOrderCreateManyUserInputEnvelope
    connect?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
  }

  export type BasketCreateNestedManyWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type AlertCreateNestedManyWithoutUserInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type BankAccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BankAccountCreateWithoutUserInput, BankAccountUncheckedCreateWithoutUserInput> | BankAccountCreateWithoutUserInput[] | BankAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankAccountCreateOrConnectWithoutUserInput | BankAccountCreateOrConnectWithoutUserInput[]
    createMany?: BankAccountCreateManyUserInputEnvelope
    connect?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
  }

  export type FundTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FundTransactionCreateWithoutUserInput, FundTransactionUncheckedCreateWithoutUserInput> | FundTransactionCreateWithoutUserInput[] | FundTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FundTransactionCreateOrConnectWithoutUserInput | FundTransactionCreateOrConnectWithoutUserInput[]
    createMany?: FundTransactionCreateManyUserInputEnvelope
    connect?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
  }

  export type HoldingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HoldingCreateWithoutUserInput, HoldingUncheckedCreateWithoutUserInput> | HoldingCreateWithoutUserInput[] | HoldingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutUserInput | HoldingCreateOrConnectWithoutUserInput[]
    createMany?: HoldingCreateManyUserInputEnvelope
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
  }

  export type PositionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PositionCreateWithoutUserInput, PositionUncheckedCreateWithoutUserInput> | PositionCreateWithoutUserInput[] | PositionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutUserInput | PositionCreateOrConnectWithoutUserInput[]
    createMany?: PositionCreateManyUserInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type TradeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type WatchlistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
  }

  export type PortfolioUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type GTTOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GTTOrderCreateWithoutUserInput, GTTOrderUncheckedCreateWithoutUserInput> | GTTOrderCreateWithoutUserInput[] | GTTOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GTTOrderCreateOrConnectWithoutUserInput | GTTOrderCreateOrConnectWithoutUserInput[]
    createMany?: GTTOrderCreateManyUserInputEnvelope
    connect?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
  }

  export type BasketUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumKYCStatusFieldUpdateOperationsInput = {
    set?: $Enums.KYCStatus | null
  }

  export type NullableEnumAccountTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountType | null
  }

  export type NullableEnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type BankAccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<BankAccountCreateWithoutUserInput, BankAccountUncheckedCreateWithoutUserInput> | BankAccountCreateWithoutUserInput[] | BankAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankAccountCreateOrConnectWithoutUserInput | BankAccountCreateOrConnectWithoutUserInput[]
    upsert?: BankAccountUpsertWithWhereUniqueWithoutUserInput | BankAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BankAccountCreateManyUserInputEnvelope
    set?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    disconnect?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    delete?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    connect?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    update?: BankAccountUpdateWithWhereUniqueWithoutUserInput | BankAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BankAccountUpdateManyWithWhereWithoutUserInput | BankAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BankAccountScalarWhereInput | BankAccountScalarWhereInput[]
  }

  export type FundTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<FundTransactionCreateWithoutUserInput, FundTransactionUncheckedCreateWithoutUserInput> | FundTransactionCreateWithoutUserInput[] | FundTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FundTransactionCreateOrConnectWithoutUserInput | FundTransactionCreateOrConnectWithoutUserInput[]
    upsert?: FundTransactionUpsertWithWhereUniqueWithoutUserInput | FundTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FundTransactionCreateManyUserInputEnvelope
    set?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    disconnect?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    delete?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    connect?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    update?: FundTransactionUpdateWithWhereUniqueWithoutUserInput | FundTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FundTransactionUpdateManyWithWhereWithoutUserInput | FundTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FundTransactionScalarWhereInput | FundTransactionScalarWhereInput[]
  }

  export type HoldingUpdateManyWithoutUserNestedInput = {
    create?: XOR<HoldingCreateWithoutUserInput, HoldingUncheckedCreateWithoutUserInput> | HoldingCreateWithoutUserInput[] | HoldingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutUserInput | HoldingCreateOrConnectWithoutUserInput[]
    upsert?: HoldingUpsertWithWhereUniqueWithoutUserInput | HoldingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HoldingCreateManyUserInputEnvelope
    set?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    disconnect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    delete?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    update?: HoldingUpdateWithWhereUniqueWithoutUserInput | HoldingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HoldingUpdateManyWithWhereWithoutUserInput | HoldingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HoldingScalarWhereInput | HoldingScalarWhereInput[]
  }

  export type PositionUpdateManyWithoutUserNestedInput = {
    create?: XOR<PositionCreateWithoutUserInput, PositionUncheckedCreateWithoutUserInput> | PositionCreateWithoutUserInput[] | PositionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutUserInput | PositionCreateOrConnectWithoutUserInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutUserInput | PositionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PositionCreateManyUserInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutUserInput | PositionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutUserInput | PositionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type TradeUpdateManyWithoutUserNestedInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutUserInput | TradeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutUserInput | TradeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutUserInput | TradeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type WatchlistUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    upsert?: WatchlistUpsertWithWhereUniqueWithoutUserInput | WatchlistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    set?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    disconnect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    delete?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    update?: WatchlistUpdateWithWhereUniqueWithoutUserInput | WatchlistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchlistUpdateManyWithWhereWithoutUserInput | WatchlistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
  }

  export type PortfolioUpdateManyWithoutUserNestedInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutUserInput | PortfolioUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutUserInput | PortfolioUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutUserInput | PortfolioUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type GTTOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<GTTOrderCreateWithoutUserInput, GTTOrderUncheckedCreateWithoutUserInput> | GTTOrderCreateWithoutUserInput[] | GTTOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GTTOrderCreateOrConnectWithoutUserInput | GTTOrderCreateOrConnectWithoutUserInput[]
    upsert?: GTTOrderUpsertWithWhereUniqueWithoutUserInput | GTTOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GTTOrderCreateManyUserInputEnvelope
    set?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    disconnect?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    delete?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    connect?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    update?: GTTOrderUpdateWithWhereUniqueWithoutUserInput | GTTOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GTTOrderUpdateManyWithWhereWithoutUserInput | GTTOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GTTOrderScalarWhereInput | GTTOrderScalarWhereInput[]
  }

  export type BasketUpdateManyWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutUserInput | BasketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutUserInput | BasketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutUserInput | BasketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type AlertUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutUserInput | AlertUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutUserInput | AlertUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutUserInput | AlertUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type BankAccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BankAccountCreateWithoutUserInput, BankAccountUncheckedCreateWithoutUserInput> | BankAccountCreateWithoutUserInput[] | BankAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankAccountCreateOrConnectWithoutUserInput | BankAccountCreateOrConnectWithoutUserInput[]
    upsert?: BankAccountUpsertWithWhereUniqueWithoutUserInput | BankAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BankAccountCreateManyUserInputEnvelope
    set?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    disconnect?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    delete?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    connect?: BankAccountWhereUniqueInput | BankAccountWhereUniqueInput[]
    update?: BankAccountUpdateWithWhereUniqueWithoutUserInput | BankAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BankAccountUpdateManyWithWhereWithoutUserInput | BankAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BankAccountScalarWhereInput | BankAccountScalarWhereInput[]
  }

  export type FundTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FundTransactionCreateWithoutUserInput, FundTransactionUncheckedCreateWithoutUserInput> | FundTransactionCreateWithoutUserInput[] | FundTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FundTransactionCreateOrConnectWithoutUserInput | FundTransactionCreateOrConnectWithoutUserInput[]
    upsert?: FundTransactionUpsertWithWhereUniqueWithoutUserInput | FundTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FundTransactionCreateManyUserInputEnvelope
    set?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    disconnect?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    delete?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    connect?: FundTransactionWhereUniqueInput | FundTransactionWhereUniqueInput[]
    update?: FundTransactionUpdateWithWhereUniqueWithoutUserInput | FundTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FundTransactionUpdateManyWithWhereWithoutUserInput | FundTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FundTransactionScalarWhereInput | FundTransactionScalarWhereInput[]
  }

  export type HoldingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HoldingCreateWithoutUserInput, HoldingUncheckedCreateWithoutUserInput> | HoldingCreateWithoutUserInput[] | HoldingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutUserInput | HoldingCreateOrConnectWithoutUserInput[]
    upsert?: HoldingUpsertWithWhereUniqueWithoutUserInput | HoldingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HoldingCreateManyUserInputEnvelope
    set?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    disconnect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    delete?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    update?: HoldingUpdateWithWhereUniqueWithoutUserInput | HoldingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HoldingUpdateManyWithWhereWithoutUserInput | HoldingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HoldingScalarWhereInput | HoldingScalarWhereInput[]
  }

  export type PositionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PositionCreateWithoutUserInput, PositionUncheckedCreateWithoutUserInput> | PositionCreateWithoutUserInput[] | PositionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutUserInput | PositionCreateOrConnectWithoutUserInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutUserInput | PositionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PositionCreateManyUserInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutUserInput | PositionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutUserInput | PositionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type TradeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutUserInput | TradeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutUserInput | TradeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutUserInput | TradeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type WatchlistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    upsert?: WatchlistUpsertWithWhereUniqueWithoutUserInput | WatchlistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    set?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    disconnect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    delete?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    update?: WatchlistUpdateWithWhereUniqueWithoutUserInput | WatchlistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchlistUpdateManyWithWhereWithoutUserInput | WatchlistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
  }

  export type PortfolioUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutUserInput | PortfolioUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutUserInput | PortfolioUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutUserInput | PortfolioUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type GTTOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GTTOrderCreateWithoutUserInput, GTTOrderUncheckedCreateWithoutUserInput> | GTTOrderCreateWithoutUserInput[] | GTTOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GTTOrderCreateOrConnectWithoutUserInput | GTTOrderCreateOrConnectWithoutUserInput[]
    upsert?: GTTOrderUpsertWithWhereUniqueWithoutUserInput | GTTOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GTTOrderCreateManyUserInputEnvelope
    set?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    disconnect?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    delete?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    connect?: GTTOrderWhereUniqueInput | GTTOrderWhereUniqueInput[]
    update?: GTTOrderUpdateWithWhereUniqueWithoutUserInput | GTTOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GTTOrderUpdateManyWithWhereWithoutUserInput | GTTOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GTTOrderScalarWhereInput | GTTOrderScalarWhereInput[]
  }

  export type BasketUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput> | BasketCreateWithoutUserInput[] | BasketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BasketCreateOrConnectWithoutUserInput | BasketCreateOrConnectWithoutUserInput[]
    upsert?: BasketUpsertWithWhereUniqueWithoutUserInput | BasketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BasketCreateManyUserInputEnvelope
    set?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    disconnect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    delete?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    connect?: BasketWhereUniqueInput | BasketWhereUniqueInput[]
    update?: BasketUpdateWithWhereUniqueWithoutUserInput | BasketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BasketUpdateManyWithWhereWithoutUserInput | BasketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BasketScalarWhereInput | BasketScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput> | AlertCreateWithoutUserInput[] | AlertUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutUserInput | AlertCreateOrConnectWithoutUserInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutUserInput | AlertUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlertCreateManyUserInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutUserInput | AlertUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutUserInput | AlertUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRiskProfileFieldUpdateOperationsInput = {
    set?: $Enums.RiskProfile
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutBankAccountsInput = {
    create?: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBankAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumBankAccountTypeFieldUpdateOperationsInput = {
    set?: $Enums.BankAccountType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutBankAccountsNestedInput = {
    create?: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBankAccountsInput
    upsert?: UserUpsertWithoutBankAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBankAccountsInput, UserUpdateWithoutBankAccountsInput>, UserUncheckedUpdateWithoutBankAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutFundsInput = {
    create?: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFundsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumFundTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.FundTransactionType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumTransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransactionStatus
  }

  export type NullableEnumPaymentModeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMode | null
  }

  export type UserUpdateOneRequiredWithoutFundsNestedInput = {
    create?: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFundsInput
    upsert?: UserUpsertWithoutFundsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFundsInput, UserUpdateWithoutFundsInput>, UserUncheckedUpdateWithoutFundsInput>
  }

  export type HoldingCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<HoldingCreateWithoutInstrumentInput, HoldingUncheckedCreateWithoutInstrumentInput> | HoldingCreateWithoutInstrumentInput[] | HoldingUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutInstrumentInput | HoldingCreateOrConnectWithoutInstrumentInput[]
    createMany?: HoldingCreateManyInstrumentInputEnvelope
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
  }

  export type PositionCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<PositionCreateWithoutInstrumentInput, PositionUncheckedCreateWithoutInstrumentInput> | PositionCreateWithoutInstrumentInput[] | PositionUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutInstrumentInput | PositionCreateOrConnectWithoutInstrumentInput[]
    createMany?: PositionCreateManyInstrumentInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<OrderCreateWithoutInstrumentInput, OrderUncheckedCreateWithoutInstrumentInput> | OrderCreateWithoutInstrumentInput[] | OrderUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInstrumentInput | OrderCreateOrConnectWithoutInstrumentInput[]
    createMany?: OrderCreateManyInstrumentInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type TradeCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<TradeCreateWithoutInstrumentInput, TradeUncheckedCreateWithoutInstrumentInput> | TradeCreateWithoutInstrumentInput[] | TradeUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutInstrumentInput | TradeCreateOrConnectWithoutInstrumentInput[]
    createMany?: TradeCreateManyInstrumentInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type MarketDepthCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<MarketDepthCreateWithoutInstrumentInput, MarketDepthUncheckedCreateWithoutInstrumentInput> | MarketDepthCreateWithoutInstrumentInput[] | MarketDepthUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: MarketDepthCreateOrConnectWithoutInstrumentInput | MarketDepthCreateOrConnectWithoutInstrumentInput[]
    createMany?: MarketDepthCreateManyInstrumentInputEnvelope
    connect?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
  }

  export type PriceHistoryCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<PriceHistoryCreateWithoutInstrumentInput, PriceHistoryUncheckedCreateWithoutInstrumentInput> | PriceHistoryCreateWithoutInstrumentInput[] | PriceHistoryUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutInstrumentInput | PriceHistoryCreateOrConnectWithoutInstrumentInput[]
    createMany?: PriceHistoryCreateManyInstrumentInputEnvelope
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
  }

  export type WatchlistItemCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<WatchlistItemCreateWithoutInstrumentInput, WatchlistItemUncheckedCreateWithoutInstrumentInput> | WatchlistItemCreateWithoutInstrumentInput[] | WatchlistItemUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutInstrumentInput | WatchlistItemCreateOrConnectWithoutInstrumentInput[]
    createMany?: WatchlistItemCreateManyInstrumentInputEnvelope
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
  }

  export type HoldingUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<HoldingCreateWithoutInstrumentInput, HoldingUncheckedCreateWithoutInstrumentInput> | HoldingCreateWithoutInstrumentInput[] | HoldingUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutInstrumentInput | HoldingCreateOrConnectWithoutInstrumentInput[]
    createMany?: HoldingCreateManyInstrumentInputEnvelope
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
  }

  export type PositionUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<PositionCreateWithoutInstrumentInput, PositionUncheckedCreateWithoutInstrumentInput> | PositionCreateWithoutInstrumentInput[] | PositionUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutInstrumentInput | PositionCreateOrConnectWithoutInstrumentInput[]
    createMany?: PositionCreateManyInstrumentInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<OrderCreateWithoutInstrumentInput, OrderUncheckedCreateWithoutInstrumentInput> | OrderCreateWithoutInstrumentInput[] | OrderUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInstrumentInput | OrderCreateOrConnectWithoutInstrumentInput[]
    createMany?: OrderCreateManyInstrumentInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type TradeUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<TradeCreateWithoutInstrumentInput, TradeUncheckedCreateWithoutInstrumentInput> | TradeCreateWithoutInstrumentInput[] | TradeUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutInstrumentInput | TradeCreateOrConnectWithoutInstrumentInput[]
    createMany?: TradeCreateManyInstrumentInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<MarketDepthCreateWithoutInstrumentInput, MarketDepthUncheckedCreateWithoutInstrumentInput> | MarketDepthCreateWithoutInstrumentInput[] | MarketDepthUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: MarketDepthCreateOrConnectWithoutInstrumentInput | MarketDepthCreateOrConnectWithoutInstrumentInput[]
    createMany?: MarketDepthCreateManyInstrumentInputEnvelope
    connect?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
  }

  export type PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<PriceHistoryCreateWithoutInstrumentInput, PriceHistoryUncheckedCreateWithoutInstrumentInput> | PriceHistoryCreateWithoutInstrumentInput[] | PriceHistoryUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutInstrumentInput | PriceHistoryCreateOrConnectWithoutInstrumentInput[]
    createMany?: PriceHistoryCreateManyInstrumentInputEnvelope
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
  }

  export type WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput = {
    create?: XOR<WatchlistItemCreateWithoutInstrumentInput, WatchlistItemUncheckedCreateWithoutInstrumentInput> | WatchlistItemCreateWithoutInstrumentInput[] | WatchlistItemUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutInstrumentInput | WatchlistItemCreateOrConnectWithoutInstrumentInput[]
    createMany?: WatchlistItemCreateManyInstrumentInputEnvelope
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
  }

  export type EnumExchangeFieldUpdateOperationsInput = {
    set?: $Enums.Exchange
  }

  export type EnumSegmentFieldUpdateOperationsInput = {
    set?: $Enums.Segment
  }

  export type EnumInstrumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.InstrumentType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HoldingUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<HoldingCreateWithoutInstrumentInput, HoldingUncheckedCreateWithoutInstrumentInput> | HoldingCreateWithoutInstrumentInput[] | HoldingUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutInstrumentInput | HoldingCreateOrConnectWithoutInstrumentInput[]
    upsert?: HoldingUpsertWithWhereUniqueWithoutInstrumentInput | HoldingUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: HoldingCreateManyInstrumentInputEnvelope
    set?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    disconnect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    delete?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    update?: HoldingUpdateWithWhereUniqueWithoutInstrumentInput | HoldingUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: HoldingUpdateManyWithWhereWithoutInstrumentInput | HoldingUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: HoldingScalarWhereInput | HoldingScalarWhereInput[]
  }

  export type PositionUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<PositionCreateWithoutInstrumentInput, PositionUncheckedCreateWithoutInstrumentInput> | PositionCreateWithoutInstrumentInput[] | PositionUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutInstrumentInput | PositionCreateOrConnectWithoutInstrumentInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutInstrumentInput | PositionUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: PositionCreateManyInstrumentInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutInstrumentInput | PositionUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutInstrumentInput | PositionUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<OrderCreateWithoutInstrumentInput, OrderUncheckedCreateWithoutInstrumentInput> | OrderCreateWithoutInstrumentInput[] | OrderUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInstrumentInput | OrderCreateOrConnectWithoutInstrumentInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutInstrumentInput | OrderUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: OrderCreateManyInstrumentInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutInstrumentInput | OrderUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutInstrumentInput | OrderUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type TradeUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<TradeCreateWithoutInstrumentInput, TradeUncheckedCreateWithoutInstrumentInput> | TradeCreateWithoutInstrumentInput[] | TradeUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutInstrumentInput | TradeCreateOrConnectWithoutInstrumentInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutInstrumentInput | TradeUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: TradeCreateManyInstrumentInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutInstrumentInput | TradeUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutInstrumentInput | TradeUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type MarketDepthUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<MarketDepthCreateWithoutInstrumentInput, MarketDepthUncheckedCreateWithoutInstrumentInput> | MarketDepthCreateWithoutInstrumentInput[] | MarketDepthUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: MarketDepthCreateOrConnectWithoutInstrumentInput | MarketDepthCreateOrConnectWithoutInstrumentInput[]
    upsert?: MarketDepthUpsertWithWhereUniqueWithoutInstrumentInput | MarketDepthUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: MarketDepthCreateManyInstrumentInputEnvelope
    set?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    disconnect?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    delete?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    connect?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    update?: MarketDepthUpdateWithWhereUniqueWithoutInstrumentInput | MarketDepthUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: MarketDepthUpdateManyWithWhereWithoutInstrumentInput | MarketDepthUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: MarketDepthScalarWhereInput | MarketDepthScalarWhereInput[]
  }

  export type PriceHistoryUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<PriceHistoryCreateWithoutInstrumentInput, PriceHistoryUncheckedCreateWithoutInstrumentInput> | PriceHistoryCreateWithoutInstrumentInput[] | PriceHistoryUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutInstrumentInput | PriceHistoryCreateOrConnectWithoutInstrumentInput[]
    upsert?: PriceHistoryUpsertWithWhereUniqueWithoutInstrumentInput | PriceHistoryUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: PriceHistoryCreateManyInstrumentInputEnvelope
    set?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    disconnect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    delete?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    update?: PriceHistoryUpdateWithWhereUniqueWithoutInstrumentInput | PriceHistoryUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: PriceHistoryUpdateManyWithWhereWithoutInstrumentInput | PriceHistoryUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
  }

  export type WatchlistItemUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<WatchlistItemCreateWithoutInstrumentInput, WatchlistItemUncheckedCreateWithoutInstrumentInput> | WatchlistItemCreateWithoutInstrumentInput[] | WatchlistItemUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutInstrumentInput | WatchlistItemCreateOrConnectWithoutInstrumentInput[]
    upsert?: WatchlistItemUpsertWithWhereUniqueWithoutInstrumentInput | WatchlistItemUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: WatchlistItemCreateManyInstrumentInputEnvelope
    set?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    disconnect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    delete?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    update?: WatchlistItemUpdateWithWhereUniqueWithoutInstrumentInput | WatchlistItemUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: WatchlistItemUpdateManyWithWhereWithoutInstrumentInput | WatchlistItemUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: WatchlistItemScalarWhereInput | WatchlistItemScalarWhereInput[]
  }

  export type HoldingUncheckedUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<HoldingCreateWithoutInstrumentInput, HoldingUncheckedCreateWithoutInstrumentInput> | HoldingCreateWithoutInstrumentInput[] | HoldingUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: HoldingCreateOrConnectWithoutInstrumentInput | HoldingCreateOrConnectWithoutInstrumentInput[]
    upsert?: HoldingUpsertWithWhereUniqueWithoutInstrumentInput | HoldingUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: HoldingCreateManyInstrumentInputEnvelope
    set?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    disconnect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    delete?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    connect?: HoldingWhereUniqueInput | HoldingWhereUniqueInput[]
    update?: HoldingUpdateWithWhereUniqueWithoutInstrumentInput | HoldingUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: HoldingUpdateManyWithWhereWithoutInstrumentInput | HoldingUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: HoldingScalarWhereInput | HoldingScalarWhereInput[]
  }

  export type PositionUncheckedUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<PositionCreateWithoutInstrumentInput, PositionUncheckedCreateWithoutInstrumentInput> | PositionCreateWithoutInstrumentInput[] | PositionUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutInstrumentInput | PositionCreateOrConnectWithoutInstrumentInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutInstrumentInput | PositionUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: PositionCreateManyInstrumentInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutInstrumentInput | PositionUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutInstrumentInput | PositionUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<OrderCreateWithoutInstrumentInput, OrderUncheckedCreateWithoutInstrumentInput> | OrderCreateWithoutInstrumentInput[] | OrderUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutInstrumentInput | OrderCreateOrConnectWithoutInstrumentInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutInstrumentInput | OrderUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: OrderCreateManyInstrumentInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutInstrumentInput | OrderUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutInstrumentInput | OrderUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type TradeUncheckedUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<TradeCreateWithoutInstrumentInput, TradeUncheckedCreateWithoutInstrumentInput> | TradeCreateWithoutInstrumentInput[] | TradeUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutInstrumentInput | TradeCreateOrConnectWithoutInstrumentInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutInstrumentInput | TradeUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: TradeCreateManyInstrumentInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutInstrumentInput | TradeUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutInstrumentInput | TradeUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<MarketDepthCreateWithoutInstrumentInput, MarketDepthUncheckedCreateWithoutInstrumentInput> | MarketDepthCreateWithoutInstrumentInput[] | MarketDepthUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: MarketDepthCreateOrConnectWithoutInstrumentInput | MarketDepthCreateOrConnectWithoutInstrumentInput[]
    upsert?: MarketDepthUpsertWithWhereUniqueWithoutInstrumentInput | MarketDepthUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: MarketDepthCreateManyInstrumentInputEnvelope
    set?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    disconnect?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    delete?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    connect?: MarketDepthWhereUniqueInput | MarketDepthWhereUniqueInput[]
    update?: MarketDepthUpdateWithWhereUniqueWithoutInstrumentInput | MarketDepthUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: MarketDepthUpdateManyWithWhereWithoutInstrumentInput | MarketDepthUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: MarketDepthScalarWhereInput | MarketDepthScalarWhereInput[]
  }

  export type PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<PriceHistoryCreateWithoutInstrumentInput, PriceHistoryUncheckedCreateWithoutInstrumentInput> | PriceHistoryCreateWithoutInstrumentInput[] | PriceHistoryUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: PriceHistoryCreateOrConnectWithoutInstrumentInput | PriceHistoryCreateOrConnectWithoutInstrumentInput[]
    upsert?: PriceHistoryUpsertWithWhereUniqueWithoutInstrumentInput | PriceHistoryUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: PriceHistoryCreateManyInstrumentInputEnvelope
    set?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    disconnect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    delete?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    connect?: PriceHistoryWhereUniqueInput | PriceHistoryWhereUniqueInput[]
    update?: PriceHistoryUpdateWithWhereUniqueWithoutInstrumentInput | PriceHistoryUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: PriceHistoryUpdateManyWithWhereWithoutInstrumentInput | PriceHistoryUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
  }

  export type WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput = {
    create?: XOR<WatchlistItemCreateWithoutInstrumentInput, WatchlistItemUncheckedCreateWithoutInstrumentInput> | WatchlistItemCreateWithoutInstrumentInput[] | WatchlistItemUncheckedCreateWithoutInstrumentInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutInstrumentInput | WatchlistItemCreateOrConnectWithoutInstrumentInput[]
    upsert?: WatchlistItemUpsertWithWhereUniqueWithoutInstrumentInput | WatchlistItemUpsertWithWhereUniqueWithoutInstrumentInput[]
    createMany?: WatchlistItemCreateManyInstrumentInputEnvelope
    set?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    disconnect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    delete?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    update?: WatchlistItemUpdateWithWhereUniqueWithoutInstrumentInput | WatchlistItemUpdateWithWhereUniqueWithoutInstrumentInput[]
    updateMany?: WatchlistItemUpdateManyWithWhereWithoutInstrumentInput | WatchlistItemUpdateManyWithWhereWithoutInstrumentInput[]
    deleteMany?: WatchlistItemScalarWhereInput | WatchlistItemScalarWhereInput[]
  }

  export type InstrumentCreateNestedOneWithoutMarketDepthInput = {
    create?: XOR<InstrumentCreateWithoutMarketDepthInput, InstrumentUncheckedCreateWithoutMarketDepthInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutMarketDepthInput
    connect?: InstrumentWhereUniqueInput
  }

  export type EnumOrderSideFieldUpdateOperationsInput = {
    set?: $Enums.OrderSide
  }

  export type InstrumentUpdateOneRequiredWithoutMarketDepthNestedInput = {
    create?: XOR<InstrumentCreateWithoutMarketDepthInput, InstrumentUncheckedCreateWithoutMarketDepthInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutMarketDepthInput
    upsert?: InstrumentUpsertWithoutMarketDepthInput
    connect?: InstrumentWhereUniqueInput
    update?: XOR<XOR<InstrumentUpdateToOneWithWhereWithoutMarketDepthInput, InstrumentUpdateWithoutMarketDepthInput>, InstrumentUncheckedUpdateWithoutMarketDepthInput>
  }

  export type InstrumentCreateNestedOneWithoutPriceHistoryInput = {
    create?: XOR<InstrumentCreateWithoutPriceHistoryInput, InstrumentUncheckedCreateWithoutPriceHistoryInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutPriceHistoryInput
    connect?: InstrumentWhereUniqueInput
  }

  export type InstrumentUpdateOneRequiredWithoutPriceHistoryNestedInput = {
    create?: XOR<InstrumentCreateWithoutPriceHistoryInput, InstrumentUncheckedCreateWithoutPriceHistoryInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutPriceHistoryInput
    upsert?: InstrumentUpsertWithoutPriceHistoryInput
    connect?: InstrumentWhereUniqueInput
    update?: XOR<XOR<InstrumentUpdateToOneWithWhereWithoutPriceHistoryInput, InstrumentUpdateWithoutPriceHistoryInput>, InstrumentUncheckedUpdateWithoutPriceHistoryInput>
  }

  export type UserCreateNestedOneWithoutPortfoliosInput = {
    create?: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPortfoliosInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPortfoliosNestedInput = {
    create?: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPortfoliosInput
    upsert?: UserUpsertWithoutPortfoliosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPortfoliosInput, UserUpdateWithoutPortfoliosInput>, UserUncheckedUpdateWithoutPortfoliosInput>
  }

  export type UserCreateNestedOneWithoutHoldingsInput = {
    create?: XOR<UserCreateWithoutHoldingsInput, UserUncheckedCreateWithoutHoldingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHoldingsInput
    connect?: UserWhereUniqueInput
  }

  export type InstrumentCreateNestedOneWithoutHoldingsInput = {
    create?: XOR<InstrumentCreateWithoutHoldingsInput, InstrumentUncheckedCreateWithoutHoldingsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutHoldingsInput
    connect?: InstrumentWhereUniqueInput
  }

  export type EnumProductTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProductType
  }

  export type UserUpdateOneRequiredWithoutHoldingsNestedInput = {
    create?: XOR<UserCreateWithoutHoldingsInput, UserUncheckedCreateWithoutHoldingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHoldingsInput
    upsert?: UserUpsertWithoutHoldingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHoldingsInput, UserUpdateWithoutHoldingsInput>, UserUncheckedUpdateWithoutHoldingsInput>
  }

  export type InstrumentUpdateOneRequiredWithoutHoldingsNestedInput = {
    create?: XOR<InstrumentCreateWithoutHoldingsInput, InstrumentUncheckedCreateWithoutHoldingsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutHoldingsInput
    upsert?: InstrumentUpsertWithoutHoldingsInput
    connect?: InstrumentWhereUniqueInput
    update?: XOR<XOR<InstrumentUpdateToOneWithWhereWithoutHoldingsInput, InstrumentUpdateWithoutHoldingsInput>, InstrumentUncheckedUpdateWithoutHoldingsInput>
  }

  export type UserCreateNestedOneWithoutPositionsInput = {
    create?: XOR<UserCreateWithoutPositionsInput, UserUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPositionsInput
    connect?: UserWhereUniqueInput
  }

  export type InstrumentCreateNestedOneWithoutPositionsInput = {
    create?: XOR<InstrumentCreateWithoutPositionsInput, InstrumentUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutPositionsInput
    connect?: InstrumentWhereUniqueInput
  }

  export type EnumPositionTypeFieldUpdateOperationsInput = {
    set?: $Enums.PositionType
  }

  export type UserUpdateOneRequiredWithoutPositionsNestedInput = {
    create?: XOR<UserCreateWithoutPositionsInput, UserUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPositionsInput
    upsert?: UserUpsertWithoutPositionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPositionsInput, UserUpdateWithoutPositionsInput>, UserUncheckedUpdateWithoutPositionsInput>
  }

  export type InstrumentUpdateOneRequiredWithoutPositionsNestedInput = {
    create?: XOR<InstrumentCreateWithoutPositionsInput, InstrumentUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutPositionsInput
    upsert?: InstrumentUpsertWithoutPositionsInput
    connect?: InstrumentWhereUniqueInput
    update?: XOR<XOR<InstrumentUpdateToOneWithWhereWithoutPositionsInput, InstrumentUpdateWithoutPositionsInput>, InstrumentUncheckedUpdateWithoutPositionsInput>
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type InstrumentCreateNestedOneWithoutOrdersInput = {
    create?: XOR<InstrumentCreateWithoutOrdersInput, InstrumentUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutOrdersInput
    connect?: InstrumentWhereUniqueInput
  }

  export type TradeCreateNestedManyWithoutOrderInput = {
    create?: XOR<TradeCreateWithoutOrderInput, TradeUncheckedCreateWithoutOrderInput> | TradeCreateWithoutOrderInput[] | TradeUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutOrderInput | TradeCreateOrConnectWithoutOrderInput[]
    createMany?: TradeCreateManyOrderInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type TradeUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<TradeCreateWithoutOrderInput, TradeUncheckedCreateWithoutOrderInput> | TradeCreateWithoutOrderInput[] | TradeUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutOrderInput | TradeCreateOrConnectWithoutOrderInput[]
    createMany?: TradeCreateManyOrderInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type EnumOrderVarietyFieldUpdateOperationsInput = {
    set?: $Enums.OrderVariety
  }

  export type EnumOrderTypeFieldUpdateOperationsInput = {
    set?: $Enums.OrderType
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type EnumOrderValidityFieldUpdateOperationsInput = {
    set?: $Enums.OrderValidity
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type InstrumentUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<InstrumentCreateWithoutOrdersInput, InstrumentUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutOrdersInput
    upsert?: InstrumentUpsertWithoutOrdersInput
    connect?: InstrumentWhereUniqueInput
    update?: XOR<XOR<InstrumentUpdateToOneWithWhereWithoutOrdersInput, InstrumentUpdateWithoutOrdersInput>, InstrumentUncheckedUpdateWithoutOrdersInput>
  }

  export type TradeUpdateManyWithoutOrderNestedInput = {
    create?: XOR<TradeCreateWithoutOrderInput, TradeUncheckedCreateWithoutOrderInput> | TradeCreateWithoutOrderInput[] | TradeUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutOrderInput | TradeCreateOrConnectWithoutOrderInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutOrderInput | TradeUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: TradeCreateManyOrderInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutOrderInput | TradeUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutOrderInput | TradeUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type TradeUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<TradeCreateWithoutOrderInput, TradeUncheckedCreateWithoutOrderInput> | TradeCreateWithoutOrderInput[] | TradeUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutOrderInput | TradeCreateOrConnectWithoutOrderInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutOrderInput | TradeUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: TradeCreateManyOrderInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutOrderInput | TradeUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutOrderInput | TradeUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutTradesInput = {
    create?: XOR<OrderCreateWithoutTradesInput, OrderUncheckedCreateWithoutTradesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutTradesInput
    connect?: OrderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTradesInput = {
    create?: XOR<UserCreateWithoutTradesInput, UserUncheckedCreateWithoutTradesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradesInput
    connect?: UserWhereUniqueInput
  }

  export type InstrumentCreateNestedOneWithoutTradesInput = {
    create?: XOR<InstrumentCreateWithoutTradesInput, InstrumentUncheckedCreateWithoutTradesInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutTradesInput
    connect?: InstrumentWhereUniqueInput
  }

  export type TradeChargesCreateNestedOneWithoutTradeInput = {
    create?: XOR<TradeChargesCreateWithoutTradeInput, TradeChargesUncheckedCreateWithoutTradeInput>
    connectOrCreate?: TradeChargesCreateOrConnectWithoutTradeInput
    connect?: TradeChargesWhereUniqueInput
  }

  export type TradeChargesUncheckedCreateNestedOneWithoutTradeInput = {
    create?: XOR<TradeChargesCreateWithoutTradeInput, TradeChargesUncheckedCreateWithoutTradeInput>
    connectOrCreate?: TradeChargesCreateOrConnectWithoutTradeInput
    connect?: TradeChargesWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutTradesNestedInput = {
    create?: XOR<OrderCreateWithoutTradesInput, OrderUncheckedCreateWithoutTradesInput>
    connectOrCreate?: OrderCreateOrConnectWithoutTradesInput
    upsert?: OrderUpsertWithoutTradesInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutTradesInput, OrderUpdateWithoutTradesInput>, OrderUncheckedUpdateWithoutTradesInput>
  }

  export type UserUpdateOneRequiredWithoutTradesNestedInput = {
    create?: XOR<UserCreateWithoutTradesInput, UserUncheckedCreateWithoutTradesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradesInput
    upsert?: UserUpsertWithoutTradesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTradesInput, UserUpdateWithoutTradesInput>, UserUncheckedUpdateWithoutTradesInput>
  }

  export type InstrumentUpdateOneRequiredWithoutTradesNestedInput = {
    create?: XOR<InstrumentCreateWithoutTradesInput, InstrumentUncheckedCreateWithoutTradesInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutTradesInput
    upsert?: InstrumentUpsertWithoutTradesInput
    connect?: InstrumentWhereUniqueInput
    update?: XOR<XOR<InstrumentUpdateToOneWithWhereWithoutTradesInput, InstrumentUpdateWithoutTradesInput>, InstrumentUncheckedUpdateWithoutTradesInput>
  }

  export type TradeChargesUpdateOneWithoutTradeNestedInput = {
    create?: XOR<TradeChargesCreateWithoutTradeInput, TradeChargesUncheckedCreateWithoutTradeInput>
    connectOrCreate?: TradeChargesCreateOrConnectWithoutTradeInput
    upsert?: TradeChargesUpsertWithoutTradeInput
    disconnect?: TradeChargesWhereInput | boolean
    delete?: TradeChargesWhereInput | boolean
    connect?: TradeChargesWhereUniqueInput
    update?: XOR<XOR<TradeChargesUpdateToOneWithWhereWithoutTradeInput, TradeChargesUpdateWithoutTradeInput>, TradeChargesUncheckedUpdateWithoutTradeInput>
  }

  export type TradeChargesUncheckedUpdateOneWithoutTradeNestedInput = {
    create?: XOR<TradeChargesCreateWithoutTradeInput, TradeChargesUncheckedCreateWithoutTradeInput>
    connectOrCreate?: TradeChargesCreateOrConnectWithoutTradeInput
    upsert?: TradeChargesUpsertWithoutTradeInput
    disconnect?: TradeChargesWhereInput | boolean
    delete?: TradeChargesWhereInput | boolean
    connect?: TradeChargesWhereUniqueInput
    update?: XOR<XOR<TradeChargesUpdateToOneWithWhereWithoutTradeInput, TradeChargesUpdateWithoutTradeInput>, TradeChargesUncheckedUpdateWithoutTradeInput>
  }

  export type TradeCreateNestedOneWithoutChargesInput = {
    create?: XOR<TradeCreateWithoutChargesInput, TradeUncheckedCreateWithoutChargesInput>
    connectOrCreate?: TradeCreateOrConnectWithoutChargesInput
    connect?: TradeWhereUniqueInput
  }

  export type TradeUpdateOneRequiredWithoutChargesNestedInput = {
    create?: XOR<TradeCreateWithoutChargesInput, TradeUncheckedCreateWithoutChargesInput>
    connectOrCreate?: TradeCreateOrConnectWithoutChargesInput
    upsert?: TradeUpsertWithoutChargesInput
    connect?: TradeWhereUniqueInput
    update?: XOR<XOR<TradeUpdateToOneWithWhereWithoutChargesInput, TradeUpdateWithoutChargesInput>, TradeUncheckedUpdateWithoutChargesInput>
  }

  export type UserCreateNestedOneWithoutGttOrdersInput = {
    create?: XOR<UserCreateWithoutGttOrdersInput, UserUncheckedCreateWithoutGttOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutGttOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumGTTTypeFieldUpdateOperationsInput = {
    set?: $Enums.GTTType
  }

  export type EnumTriggerTypeFieldUpdateOperationsInput = {
    set?: $Enums.TriggerType
  }

  export type EnumGTTStatusFieldUpdateOperationsInput = {
    set?: $Enums.GTTStatus
  }

  export type UserUpdateOneRequiredWithoutGttOrdersNestedInput = {
    create?: XOR<UserCreateWithoutGttOrdersInput, UserUncheckedCreateWithoutGttOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutGttOrdersInput
    upsert?: UserUpsertWithoutGttOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGttOrdersInput, UserUpdateWithoutGttOrdersInput>, UserUncheckedUpdateWithoutGttOrdersInput>
  }

  export type UserCreateNestedOneWithoutWatchlistsInput = {
    create?: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchlistsInput
    connect?: UserWhereUniqueInput
  }

  export type WatchlistItemCreateNestedManyWithoutWatchlistInput = {
    create?: XOR<WatchlistItemCreateWithoutWatchlistInput, WatchlistItemUncheckedCreateWithoutWatchlistInput> | WatchlistItemCreateWithoutWatchlistInput[] | WatchlistItemUncheckedCreateWithoutWatchlistInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutWatchlistInput | WatchlistItemCreateOrConnectWithoutWatchlistInput[]
    createMany?: WatchlistItemCreateManyWatchlistInputEnvelope
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
  }

  export type WatchlistItemUncheckedCreateNestedManyWithoutWatchlistInput = {
    create?: XOR<WatchlistItemCreateWithoutWatchlistInput, WatchlistItemUncheckedCreateWithoutWatchlistInput> | WatchlistItemCreateWithoutWatchlistInput[] | WatchlistItemUncheckedCreateWithoutWatchlistInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutWatchlistInput | WatchlistItemCreateOrConnectWithoutWatchlistInput[]
    createMany?: WatchlistItemCreateManyWatchlistInputEnvelope
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutWatchlistsNestedInput = {
    create?: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchlistsInput
    upsert?: UserUpsertWithoutWatchlistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWatchlistsInput, UserUpdateWithoutWatchlistsInput>, UserUncheckedUpdateWithoutWatchlistsInput>
  }

  export type WatchlistItemUpdateManyWithoutWatchlistNestedInput = {
    create?: XOR<WatchlistItemCreateWithoutWatchlistInput, WatchlistItemUncheckedCreateWithoutWatchlistInput> | WatchlistItemCreateWithoutWatchlistInput[] | WatchlistItemUncheckedCreateWithoutWatchlistInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutWatchlistInput | WatchlistItemCreateOrConnectWithoutWatchlistInput[]
    upsert?: WatchlistItemUpsertWithWhereUniqueWithoutWatchlistInput | WatchlistItemUpsertWithWhereUniqueWithoutWatchlistInput[]
    createMany?: WatchlistItemCreateManyWatchlistInputEnvelope
    set?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    disconnect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    delete?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    update?: WatchlistItemUpdateWithWhereUniqueWithoutWatchlistInput | WatchlistItemUpdateWithWhereUniqueWithoutWatchlistInput[]
    updateMany?: WatchlistItemUpdateManyWithWhereWithoutWatchlistInput | WatchlistItemUpdateManyWithWhereWithoutWatchlistInput[]
    deleteMany?: WatchlistItemScalarWhereInput | WatchlistItemScalarWhereInput[]
  }

  export type WatchlistItemUncheckedUpdateManyWithoutWatchlistNestedInput = {
    create?: XOR<WatchlistItemCreateWithoutWatchlistInput, WatchlistItemUncheckedCreateWithoutWatchlistInput> | WatchlistItemCreateWithoutWatchlistInput[] | WatchlistItemUncheckedCreateWithoutWatchlistInput[]
    connectOrCreate?: WatchlistItemCreateOrConnectWithoutWatchlistInput | WatchlistItemCreateOrConnectWithoutWatchlistInput[]
    upsert?: WatchlistItemUpsertWithWhereUniqueWithoutWatchlistInput | WatchlistItemUpsertWithWhereUniqueWithoutWatchlistInput[]
    createMany?: WatchlistItemCreateManyWatchlistInputEnvelope
    set?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    disconnect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    delete?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    connect?: WatchlistItemWhereUniqueInput | WatchlistItemWhereUniqueInput[]
    update?: WatchlistItemUpdateWithWhereUniqueWithoutWatchlistInput | WatchlistItemUpdateWithWhereUniqueWithoutWatchlistInput[]
    updateMany?: WatchlistItemUpdateManyWithWhereWithoutWatchlistInput | WatchlistItemUpdateManyWithWhereWithoutWatchlistInput[]
    deleteMany?: WatchlistItemScalarWhereInput | WatchlistItemScalarWhereInput[]
  }

  export type WatchlistCreateNestedOneWithoutItemsInput = {
    create?: XOR<WatchlistCreateWithoutItemsInput, WatchlistUncheckedCreateWithoutItemsInput>
    connectOrCreate?: WatchlistCreateOrConnectWithoutItemsInput
    connect?: WatchlistWhereUniqueInput
  }

  export type InstrumentCreateNestedOneWithoutWatchlistItemsInput = {
    create?: XOR<InstrumentCreateWithoutWatchlistItemsInput, InstrumentUncheckedCreateWithoutWatchlistItemsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutWatchlistItemsInput
    connect?: InstrumentWhereUniqueInput
  }

  export type WatchlistUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<WatchlistCreateWithoutItemsInput, WatchlistUncheckedCreateWithoutItemsInput>
    connectOrCreate?: WatchlistCreateOrConnectWithoutItemsInput
    upsert?: WatchlistUpsertWithoutItemsInput
    connect?: WatchlistWhereUniqueInput
    update?: XOR<XOR<WatchlistUpdateToOneWithWhereWithoutItemsInput, WatchlistUpdateWithoutItemsInput>, WatchlistUncheckedUpdateWithoutItemsInput>
  }

  export type InstrumentUpdateOneRequiredWithoutWatchlistItemsNestedInput = {
    create?: XOR<InstrumentCreateWithoutWatchlistItemsInput, InstrumentUncheckedCreateWithoutWatchlistItemsInput>
    connectOrCreate?: InstrumentCreateOrConnectWithoutWatchlistItemsInput
    upsert?: InstrumentUpsertWithoutWatchlistItemsInput
    connect?: InstrumentWhereUniqueInput
    update?: XOR<XOR<InstrumentUpdateToOneWithWhereWithoutWatchlistItemsInput, InstrumentUpdateWithoutWatchlistItemsInput>, InstrumentUncheckedUpdateWithoutWatchlistItemsInput>
  }

  export type UserCreateNestedOneWithoutAlertsInput = {
    create?: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlertsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAlertTypeFieldUpdateOperationsInput = {
    set?: $Enums.AlertType
  }

  export type UserUpdateOneRequiredWithoutAlertsNestedInput = {
    create?: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlertsInput
    upsert?: UserUpsertWithoutAlertsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlertsInput, UserUpdateWithoutAlertsInput>, UserUncheckedUpdateWithoutAlertsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutBasketsInput = {
    create?: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketsInput
    connect?: UserWhereUniqueInput
  }

  export type BasketItemCreateNestedManyWithoutBasketInput = {
    create?: XOR<BasketItemCreateWithoutBasketInput, BasketItemUncheckedCreateWithoutBasketInput> | BasketItemCreateWithoutBasketInput[] | BasketItemUncheckedCreateWithoutBasketInput[]
    connectOrCreate?: BasketItemCreateOrConnectWithoutBasketInput | BasketItemCreateOrConnectWithoutBasketInput[]
    createMany?: BasketItemCreateManyBasketInputEnvelope
    connect?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
  }

  export type BasketItemUncheckedCreateNestedManyWithoutBasketInput = {
    create?: XOR<BasketItemCreateWithoutBasketInput, BasketItemUncheckedCreateWithoutBasketInput> | BasketItemCreateWithoutBasketInput[] | BasketItemUncheckedCreateWithoutBasketInput[]
    connectOrCreate?: BasketItemCreateOrConnectWithoutBasketInput | BasketItemCreateOrConnectWithoutBasketInput[]
    createMany?: BasketItemCreateManyBasketInputEnvelope
    connect?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutBasketsNestedInput = {
    create?: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBasketsInput
    upsert?: UserUpsertWithoutBasketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBasketsInput, UserUpdateWithoutBasketsInput>, UserUncheckedUpdateWithoutBasketsInput>
  }

  export type BasketItemUpdateManyWithoutBasketNestedInput = {
    create?: XOR<BasketItemCreateWithoutBasketInput, BasketItemUncheckedCreateWithoutBasketInput> | BasketItemCreateWithoutBasketInput[] | BasketItemUncheckedCreateWithoutBasketInput[]
    connectOrCreate?: BasketItemCreateOrConnectWithoutBasketInput | BasketItemCreateOrConnectWithoutBasketInput[]
    upsert?: BasketItemUpsertWithWhereUniqueWithoutBasketInput | BasketItemUpsertWithWhereUniqueWithoutBasketInput[]
    createMany?: BasketItemCreateManyBasketInputEnvelope
    set?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    disconnect?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    delete?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    connect?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    update?: BasketItemUpdateWithWhereUniqueWithoutBasketInput | BasketItemUpdateWithWhereUniqueWithoutBasketInput[]
    updateMany?: BasketItemUpdateManyWithWhereWithoutBasketInput | BasketItemUpdateManyWithWhereWithoutBasketInput[]
    deleteMany?: BasketItemScalarWhereInput | BasketItemScalarWhereInput[]
  }

  export type BasketItemUncheckedUpdateManyWithoutBasketNestedInput = {
    create?: XOR<BasketItemCreateWithoutBasketInput, BasketItemUncheckedCreateWithoutBasketInput> | BasketItemCreateWithoutBasketInput[] | BasketItemUncheckedCreateWithoutBasketInput[]
    connectOrCreate?: BasketItemCreateOrConnectWithoutBasketInput | BasketItemCreateOrConnectWithoutBasketInput[]
    upsert?: BasketItemUpsertWithWhereUniqueWithoutBasketInput | BasketItemUpsertWithWhereUniqueWithoutBasketInput[]
    createMany?: BasketItemCreateManyBasketInputEnvelope
    set?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    disconnect?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    delete?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    connect?: BasketItemWhereUniqueInput | BasketItemWhereUniqueInput[]
    update?: BasketItemUpdateWithWhereUniqueWithoutBasketInput | BasketItemUpdateWithWhereUniqueWithoutBasketInput[]
    updateMany?: BasketItemUpdateManyWithWhereWithoutBasketInput | BasketItemUpdateManyWithWhereWithoutBasketInput[]
    deleteMany?: BasketItemScalarWhereInput | BasketItemScalarWhereInput[]
  }

  export type BasketCreateNestedOneWithoutItemsInput = {
    create?: XOR<BasketCreateWithoutItemsInput, BasketUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BasketCreateOrConnectWithoutItemsInput
    connect?: BasketWhereUniqueInput
  }

  export type BasketUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<BasketCreateWithoutItemsInput, BasketUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BasketCreateOrConnectWithoutItemsInput
    upsert?: BasketUpsertWithoutItemsInput
    connect?: BasketWhereUniqueInput
    update?: XOR<XOR<BasketUpdateToOneWithWhereWithoutItemsInput, BasketUpdateWithoutItemsInput>, BasketUncheckedUpdateWithoutItemsInput>
  }

  export type EnumCorporateActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.CorporateActionType
  }

  export type TradeJournalCreatetagsInput = {
    set: string[]
  }

  export type TradeJournalUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumKYCStatusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumKYCStatusNullableFilter<$PrismaModel> | $Enums.KYCStatus | null
  }

  export type NestedEnumAccountTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAccountTypeNullableFilter<$PrismaModel> | $Enums.AccountType | null
  }

  export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumKYCStatusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel> | null
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumKYCStatusNullableWithAggregatesFilter<$PrismaModel> | $Enums.KYCStatus | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumKYCStatusNullableFilter<$PrismaModel>
    _max?: NestedEnumKYCStatusNullableFilter<$PrismaModel>
  }

  export type NestedEnumAccountTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AccountType[] | ListEnumAccountTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAccountTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AccountType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumRiskProfileFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskProfile | EnumRiskProfileFieldRefInput<$PrismaModel>
    in?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskProfileFilter<$PrismaModel> | $Enums.RiskProfile
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumRiskProfileWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskProfile | EnumRiskProfileFieldRefInput<$PrismaModel>
    in?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskProfile[] | ListEnumRiskProfileFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskProfileWithAggregatesFilter<$PrismaModel> | $Enums.RiskProfile
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskProfileFilter<$PrismaModel>
    _max?: NestedEnumRiskProfileFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumBankAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BankAccountType | EnumBankAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBankAccountTypeFilter<$PrismaModel> | $Enums.BankAccountType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumBankAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BankAccountType | EnumBankAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BankAccountType[] | ListEnumBankAccountTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBankAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.BankAccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBankAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumBankAccountTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumFundTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FundTransactionType | EnumFundTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFundTransactionTypeFilter<$PrismaModel> | $Enums.FundTransactionType
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type NestedEnumPaymentModeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentModeNullableFilter<$PrismaModel> | $Enums.PaymentMode | null
  }

  export type NestedEnumFundTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FundTransactionType | EnumFundTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundTransactionType[] | ListEnumFundTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFundTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.FundTransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFundTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumFundTransactionTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentModeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMode | EnumPaymentModeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMode[] | ListEnumPaymentModeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentModeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMode | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentModeNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentModeNullableFilter<$PrismaModel>
  }

  export type NestedEnumExchangeFilter<$PrismaModel = never> = {
    equals?: $Enums.Exchange | EnumExchangeFieldRefInput<$PrismaModel>
    in?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeFilter<$PrismaModel> | $Enums.Exchange
  }

  export type NestedEnumSegmentFilter<$PrismaModel = never> = {
    equals?: $Enums.Segment | EnumSegmentFieldRefInput<$PrismaModel>
    in?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    not?: NestedEnumSegmentFilter<$PrismaModel> | $Enums.Segment
  }

  export type NestedEnumInstrumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InstrumentType | EnumInstrumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstrumentTypeFilter<$PrismaModel> | $Enums.InstrumentType
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumExchangeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Exchange | EnumExchangeFieldRefInput<$PrismaModel>
    in?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Exchange[] | ListEnumExchangeFieldRefInput<$PrismaModel>
    not?: NestedEnumExchangeWithAggregatesFilter<$PrismaModel> | $Enums.Exchange
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumExchangeFilter<$PrismaModel>
    _max?: NestedEnumExchangeFilter<$PrismaModel>
  }

  export type NestedEnumSegmentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Segment | EnumSegmentFieldRefInput<$PrismaModel>
    in?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Segment[] | ListEnumSegmentFieldRefInput<$PrismaModel>
    not?: NestedEnumSegmentWithAggregatesFilter<$PrismaModel> | $Enums.Segment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSegmentFilter<$PrismaModel>
    _max?: NestedEnumSegmentFilter<$PrismaModel>
  }

  export type NestedEnumInstrumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InstrumentType | EnumInstrumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InstrumentType[] | ListEnumInstrumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInstrumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.InstrumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInstrumentTypeFilter<$PrismaModel>
    _max?: NestedEnumInstrumentTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumOrderSideFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSide | EnumOrderSideFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSideFilter<$PrismaModel> | $Enums.OrderSide
  }

  export type NestedEnumOrderSideWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderSide | EnumOrderSideFieldRefInput<$PrismaModel>
    in?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderSide[] | ListEnumOrderSideFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderSideWithAggregatesFilter<$PrismaModel> | $Enums.OrderSide
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderSideFilter<$PrismaModel>
    _max?: NestedEnumOrderSideFilter<$PrismaModel>
  }

  export type NestedEnumProductTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeFilter<$PrismaModel> | $Enums.ProductType
  }

  export type NestedEnumProductTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProductType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductTypeFilter<$PrismaModel>
    _max?: NestedEnumProductTypeFilter<$PrismaModel>
  }

  export type NestedEnumPositionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PositionType | EnumPositionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionTypeFilter<$PrismaModel> | $Enums.PositionType
  }

  export type NestedEnumPositionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PositionType | EnumPositionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PositionType[] | ListEnumPositionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionTypeWithAggregatesFilter<$PrismaModel> | $Enums.PositionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPositionTypeFilter<$PrismaModel>
    _max?: NestedEnumPositionTypeFilter<$PrismaModel>
  }

  export type NestedEnumOrderVarietyFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderVariety | EnumOrderVarietyFieldRefInput<$PrismaModel>
    in?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderVarietyFilter<$PrismaModel> | $Enums.OrderVariety
  }

  export type NestedEnumOrderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderTypeFilter<$PrismaModel> | $Enums.OrderType
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumOrderValidityFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderValidity | EnumOrderValidityFieldRefInput<$PrismaModel>
    in?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderValidityFilter<$PrismaModel> | $Enums.OrderValidity
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderVarietyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderVariety | EnumOrderVarietyFieldRefInput<$PrismaModel>
    in?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderVariety[] | ListEnumOrderVarietyFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderVarietyWithAggregatesFilter<$PrismaModel> | $Enums.OrderVariety
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderVarietyFilter<$PrismaModel>
    _max?: NestedEnumOrderVarietyFilter<$PrismaModel>
  }

  export type NestedEnumOrderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderType | EnumOrderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderType[] | ListEnumOrderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderTypeWithAggregatesFilter<$PrismaModel> | $Enums.OrderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderTypeFilter<$PrismaModel>
    _max?: NestedEnumOrderTypeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumOrderValidityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderValidity | EnumOrderValidityFieldRefInput<$PrismaModel>
    in?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderValidity[] | ListEnumOrderValidityFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderValidityWithAggregatesFilter<$PrismaModel> | $Enums.OrderValidity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderValidityFilter<$PrismaModel>
    _max?: NestedEnumOrderValidityFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumGTTTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTType | EnumGTTTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTTypeFilter<$PrismaModel> | $Enums.GTTType
  }

  export type NestedEnumTriggerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TriggerType | EnumTriggerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTriggerTypeFilter<$PrismaModel> | $Enums.TriggerType
  }

  export type NestedEnumGTTStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTStatus | EnumGTTStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTStatusFilter<$PrismaModel> | $Enums.GTTStatus
  }

  export type NestedEnumGTTTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTType | EnumGTTTypeFieldRefInput<$PrismaModel>
    in?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTType[] | ListEnumGTTTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTTypeWithAggregatesFilter<$PrismaModel> | $Enums.GTTType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGTTTypeFilter<$PrismaModel>
    _max?: NestedEnumGTTTypeFilter<$PrismaModel>
  }

  export type NestedEnumTriggerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TriggerType | EnumTriggerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TriggerType[] | ListEnumTriggerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTriggerTypeWithAggregatesFilter<$PrismaModel> | $Enums.TriggerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTriggerTypeFilter<$PrismaModel>
    _max?: NestedEnumTriggerTypeFilter<$PrismaModel>
  }

  export type NestedEnumGTTStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GTTStatus | EnumGTTStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GTTStatus[] | ListEnumGTTStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGTTStatusWithAggregatesFilter<$PrismaModel> | $Enums.GTTStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGTTStatusFilter<$PrismaModel>
    _max?: NestedEnumGTTStatusFilter<$PrismaModel>
  }

  export type NestedEnumAlertTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeFilter<$PrismaModel> | $Enums.AlertType
  }

  export type NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertType | EnumAlertTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AlertType[] | ListEnumAlertTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAlertTypeWithAggregatesFilter<$PrismaModel> | $Enums.AlertType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertTypeFilter<$PrismaModel>
    _max?: NestedEnumAlertTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedEnumCorporateActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CorporateActionType | EnumCorporateActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCorporateActionTypeFilter<$PrismaModel> | $Enums.CorporateActionType
  }

  export type NestedEnumCorporateActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CorporateActionType | EnumCorporateActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorporateActionType[] | ListEnumCorporateActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCorporateActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CorporateActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCorporateActionTypeFilter<$PrismaModel>
    _max?: NestedEnumCorporateActionTypeFilter<$PrismaModel>
  }

  export type UserProfileCreateWithoutUserInput = {
    id?: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    fatherName?: string | null
    motherName?: string | null
    maritalStatus?: string | null
    country?: string
    occupation?: string | null
    annualIncome?: string | null
    tradingExperience?: string | null
    riskProfile?: $Enums.RiskProfile
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: string
    addressLine1: string
    addressLine2?: string | null
    city: string
    state: string
    pincode: string
    fatherName?: string | null
    motherName?: string | null
    maritalStatus?: string | null
    country?: string
    occupation?: string | null
    annualIncome?: string | null
    tradingExperience?: string | null
    riskProfile?: $Enums.RiskProfile
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type BankAccountCreateWithoutUserInput = {
    id?: string
    accountNumber: string
    ifscCode: string
    bankName: string
    branchName: string
    accountHolderName: string
    accountType: $Enums.BankAccountType
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankAccountUncheckedCreateWithoutUserInput = {
    id?: string
    accountNumber: string
    ifscCode: string
    bankName: string
    branchName: string
    accountHolderName: string
    accountType: $Enums.BankAccountType
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankAccountCreateOrConnectWithoutUserInput = {
    where: BankAccountWhereUniqueInput
    create: XOR<BankAccountCreateWithoutUserInput, BankAccountUncheckedCreateWithoutUserInput>
  }

  export type BankAccountCreateManyUserInputEnvelope = {
    data: BankAccountCreateManyUserInput | BankAccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FundTransactionCreateWithoutUserInput = {
    id?: string
    transactionType: $Enums.FundTransactionType
    amount: number
    status?: $Enums.TransactionStatus
    paymentMode?: $Enums.PaymentMode | null
    utrNumber?: string | null
    bankAccountId?: string | null
    remarks?: string | null
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FundTransactionUncheckedCreateWithoutUserInput = {
    id?: string
    transactionType: $Enums.FundTransactionType
    amount: number
    status?: $Enums.TransactionStatus
    paymentMode?: $Enums.PaymentMode | null
    utrNumber?: string | null
    bankAccountId?: string | null
    remarks?: string | null
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FundTransactionCreateOrConnectWithoutUserInput = {
    where: FundTransactionWhereUniqueInput
    create: XOR<FundTransactionCreateWithoutUserInput, FundTransactionUncheckedCreateWithoutUserInput>
  }

  export type FundTransactionCreateManyUserInputEnvelope = {
    data: FundTransactionCreateManyUserInput | FundTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HoldingCreateWithoutUserInput = {
    id?: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
    instrument: InstrumentCreateNestedOneWithoutHoldingsInput
  }

  export type HoldingUncheckedCreateWithoutUserInput = {
    id?: string
    instrumentId: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HoldingCreateOrConnectWithoutUserInput = {
    where: HoldingWhereUniqueInput
    create: XOR<HoldingCreateWithoutUserInput, HoldingUncheckedCreateWithoutUserInput>
  }

  export type HoldingCreateManyUserInputEnvelope = {
    data: HoldingCreateManyUserInput | HoldingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PositionCreateWithoutUserInput = {
    id?: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
    instrument: InstrumentCreateNestedOneWithoutPositionsInput
  }

  export type PositionUncheckedCreateWithoutUserInput = {
    id?: string
    instrumentId: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionCreateOrConnectWithoutUserInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutUserInput, PositionUncheckedCreateWithoutUserInput>
  }

  export type PositionCreateManyUserInputEnvelope = {
    data: PositionCreateManyUserInput | PositionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    id?: string
    orderId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    instrument: InstrumentCreateNestedOneWithoutOrdersInput
    trades?: TradeCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: string
    orderId: string
    instrumentId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trades?: TradeUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TradeCreateWithoutUserInput = {
    id?: string
    tradeId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutTradesInput
    instrument: InstrumentCreateNestedOneWithoutTradesInput
    charges?: TradeChargesCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutUserInput = {
    id?: string
    tradeId: string
    orderId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    charges?: TradeChargesUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutUserInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput>
  }

  export type TradeCreateManyUserInputEnvelope = {
    data: TradeCreateManyUserInput | TradeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WatchlistCreateWithoutUserInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: WatchlistItemCreateNestedManyWithoutWatchlistInput
  }

  export type WatchlistUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: WatchlistItemUncheckedCreateNestedManyWithoutWatchlistInput
  }

  export type WatchlistCreateOrConnectWithoutUserInput = {
    where: WatchlistWhereUniqueInput
    create: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput>
  }

  export type WatchlistCreateManyUserInputEnvelope = {
    data: WatchlistCreateManyUserInput | WatchlistCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PortfolioCreateWithoutUserInput = {
    id?: string
    totalValue?: number
    investedValue?: number
    currentValue?: number
    dayChange?: number
    dayChangePercent?: number
    totalPnl?: number
    totalPnlPercent?: number
    xirr?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PortfolioUncheckedCreateWithoutUserInput = {
    id?: string
    totalValue?: number
    investedValue?: number
    currentValue?: number
    dayChange?: number
    dayChangePercent?: number
    totalPnl?: number
    totalPnlPercent?: number
    xirr?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type PortfolioCreateOrConnectWithoutUserInput = {
    where: PortfolioWhereUniqueInput
    create: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput>
  }

  export type PortfolioCreateManyUserInputEnvelope = {
    data: PortfolioCreateManyUserInput | PortfolioCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GTTOrderCreateWithoutUserInput = {
    id?: string
    gttType: $Enums.GTTType
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    triggerType: $Enums.TriggerType
    triggerPrice: number
    lastPrice: number
    limitPrice?: number | null
    stopLossPrice?: number | null
    quantity: number
    product: $Enums.ProductType
    orderType: $Enums.OrderType
    status?: $Enums.GTTStatus
    expiresAt?: Date | string | null
    triggeredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GTTOrderUncheckedCreateWithoutUserInput = {
    id?: string
    gttType: $Enums.GTTType
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    triggerType: $Enums.TriggerType
    triggerPrice: number
    lastPrice: number
    limitPrice?: number | null
    stopLossPrice?: number | null
    quantity: number
    product: $Enums.ProductType
    orderType: $Enums.OrderType
    status?: $Enums.GTTStatus
    expiresAt?: Date | string | null
    triggeredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GTTOrderCreateOrConnectWithoutUserInput = {
    where: GTTOrderWhereUniqueInput
    create: XOR<GTTOrderCreateWithoutUserInput, GTTOrderUncheckedCreateWithoutUserInput>
  }

  export type GTTOrderCreateManyUserInputEnvelope = {
    data: GTTOrderCreateManyUserInput | GTTOrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BasketCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BasketItemCreateNestedManyWithoutBasketInput
  }

  export type BasketUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: BasketItemUncheckedCreateNestedManyWithoutBasketInput
  }

  export type BasketCreateOrConnectWithoutUserInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type BasketCreateManyUserInputEnvelope = {
    data: BasketCreateManyUserInput | BasketCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AlertCreateWithoutUserInput = {
    id?: string
    instrumentId?: string | null
    alertType: $Enums.AlertType
    message: string
    triggerPrice?: number | null
    condition?: string | null
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AlertUncheckedCreateWithoutUserInput = {
    id?: string
    instrumentId?: string | null
    alertType: $Enums.AlertType
    message: string
    triggerPrice?: number | null
    condition?: string | null
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type AlertCreateOrConnectWithoutUserInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput>
  }

  export type AlertCreateManyUserInputEnvelope = {
    data: AlertCreateManyUserInput | AlertCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    priority?: $Enums.Priority
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    priority?: $Enums.Priority
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    deviceType?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    deviceType?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    annualIncome?: NullableStringFieldUpdateOperationsInput | string | null
    tradingExperience?: NullableStringFieldUpdateOperationsInput | string | null
    riskProfile?: EnumRiskProfileFieldUpdateOperationsInput | $Enums.RiskProfile
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    pincode?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    motherName?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    annualIncome?: NullableStringFieldUpdateOperationsInput | string | null
    tradingExperience?: NullableStringFieldUpdateOperationsInput | string | null
    riskProfile?: EnumRiskProfileFieldUpdateOperationsInput | $Enums.RiskProfile
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankAccountUpsertWithWhereUniqueWithoutUserInput = {
    where: BankAccountWhereUniqueInput
    update: XOR<BankAccountUpdateWithoutUserInput, BankAccountUncheckedUpdateWithoutUserInput>
    create: XOR<BankAccountCreateWithoutUserInput, BankAccountUncheckedCreateWithoutUserInput>
  }

  export type BankAccountUpdateWithWhereUniqueWithoutUserInput = {
    where: BankAccountWhereUniqueInput
    data: XOR<BankAccountUpdateWithoutUserInput, BankAccountUncheckedUpdateWithoutUserInput>
  }

  export type BankAccountUpdateManyWithWhereWithoutUserInput = {
    where: BankAccountScalarWhereInput
    data: XOR<BankAccountUpdateManyMutationInput, BankAccountUncheckedUpdateManyWithoutUserInput>
  }

  export type BankAccountScalarWhereInput = {
    AND?: BankAccountScalarWhereInput | BankAccountScalarWhereInput[]
    OR?: BankAccountScalarWhereInput[]
    NOT?: BankAccountScalarWhereInput | BankAccountScalarWhereInput[]
    id?: StringFilter<"BankAccount"> | string
    userId?: StringFilter<"BankAccount"> | string
    accountNumber?: StringFilter<"BankAccount"> | string
    ifscCode?: StringFilter<"BankAccount"> | string
    bankName?: StringFilter<"BankAccount"> | string
    branchName?: StringFilter<"BankAccount"> | string
    accountHolderName?: StringFilter<"BankAccount"> | string
    accountType?: EnumBankAccountTypeFilter<"BankAccount"> | $Enums.BankAccountType
    isPrimary?: BoolFilter<"BankAccount"> | boolean
    isVerified?: BoolFilter<"BankAccount"> | boolean
    createdAt?: DateTimeFilter<"BankAccount"> | Date | string
    updatedAt?: DateTimeFilter<"BankAccount"> | Date | string
  }

  export type FundTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: FundTransactionWhereUniqueInput
    update: XOR<FundTransactionUpdateWithoutUserInput, FundTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<FundTransactionCreateWithoutUserInput, FundTransactionUncheckedCreateWithoutUserInput>
  }

  export type FundTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: FundTransactionWhereUniqueInput
    data: XOR<FundTransactionUpdateWithoutUserInput, FundTransactionUncheckedUpdateWithoutUserInput>
  }

  export type FundTransactionUpdateManyWithWhereWithoutUserInput = {
    where: FundTransactionScalarWhereInput
    data: XOR<FundTransactionUpdateManyMutationInput, FundTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type FundTransactionScalarWhereInput = {
    AND?: FundTransactionScalarWhereInput | FundTransactionScalarWhereInput[]
    OR?: FundTransactionScalarWhereInput[]
    NOT?: FundTransactionScalarWhereInput | FundTransactionScalarWhereInput[]
    id?: StringFilter<"FundTransaction"> | string
    userId?: StringFilter<"FundTransaction"> | string
    transactionType?: EnumFundTransactionTypeFilter<"FundTransaction"> | $Enums.FundTransactionType
    amount?: FloatFilter<"FundTransaction"> | number
    status?: EnumTransactionStatusFilter<"FundTransaction"> | $Enums.TransactionStatus
    paymentMode?: EnumPaymentModeNullableFilter<"FundTransaction"> | $Enums.PaymentMode | null
    utrNumber?: StringNullableFilter<"FundTransaction"> | string | null
    bankAccountId?: StringNullableFilter<"FundTransaction"> | string | null
    remarks?: StringNullableFilter<"FundTransaction"> | string | null
    processedAt?: DateTimeNullableFilter<"FundTransaction"> | Date | string | null
    createdAt?: DateTimeFilter<"FundTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"FundTransaction"> | Date | string
  }

  export type HoldingUpsertWithWhereUniqueWithoutUserInput = {
    where: HoldingWhereUniqueInput
    update: XOR<HoldingUpdateWithoutUserInput, HoldingUncheckedUpdateWithoutUserInput>
    create: XOR<HoldingCreateWithoutUserInput, HoldingUncheckedCreateWithoutUserInput>
  }

  export type HoldingUpdateWithWhereUniqueWithoutUserInput = {
    where: HoldingWhereUniqueInput
    data: XOR<HoldingUpdateWithoutUserInput, HoldingUncheckedUpdateWithoutUserInput>
  }

  export type HoldingUpdateManyWithWhereWithoutUserInput = {
    where: HoldingScalarWhereInput
    data: XOR<HoldingUpdateManyMutationInput, HoldingUncheckedUpdateManyWithoutUserInput>
  }

  export type HoldingScalarWhereInput = {
    AND?: HoldingScalarWhereInput | HoldingScalarWhereInput[]
    OR?: HoldingScalarWhereInput[]
    NOT?: HoldingScalarWhereInput | HoldingScalarWhereInput[]
    id?: StringFilter<"Holding"> | string
    userId?: StringFilter<"Holding"> | string
    instrumentId?: StringFilter<"Holding"> | string
    quantity?: IntFilter<"Holding"> | number
    averagePrice?: FloatFilter<"Holding"> | number
    lastPrice?: FloatFilter<"Holding"> | number
    pnl?: FloatFilter<"Holding"> | number
    dayChange?: FloatFilter<"Holding"> | number
    dayChangePercent?: FloatFilter<"Holding"> | number
    collateralQuantity?: IntFilter<"Holding"> | number
    collateralType?: StringNullableFilter<"Holding"> | string | null
    product?: EnumProductTypeFilter<"Holding"> | $Enums.ProductType
    createdAt?: DateTimeFilter<"Holding"> | Date | string
    updatedAt?: DateTimeFilter<"Holding"> | Date | string
  }

  export type PositionUpsertWithWhereUniqueWithoutUserInput = {
    where: PositionWhereUniqueInput
    update: XOR<PositionUpdateWithoutUserInput, PositionUncheckedUpdateWithoutUserInput>
    create: XOR<PositionCreateWithoutUserInput, PositionUncheckedCreateWithoutUserInput>
  }

  export type PositionUpdateWithWhereUniqueWithoutUserInput = {
    where: PositionWhereUniqueInput
    data: XOR<PositionUpdateWithoutUserInput, PositionUncheckedUpdateWithoutUserInput>
  }

  export type PositionUpdateManyWithWhereWithoutUserInput = {
    where: PositionScalarWhereInput
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyWithoutUserInput>
  }

  export type PositionScalarWhereInput = {
    AND?: PositionScalarWhereInput | PositionScalarWhereInput[]
    OR?: PositionScalarWhereInput[]
    NOT?: PositionScalarWhereInput | PositionScalarWhereInput[]
    id?: StringFilter<"Position"> | string
    userId?: StringFilter<"Position"> | string
    instrumentId?: StringFilter<"Position"> | string
    product?: EnumProductTypeFilter<"Position"> | $Enums.ProductType
    quantity?: IntFilter<"Position"> | number
    overnightQuantity?: IntFilter<"Position"> | number
    averagePrice?: FloatFilter<"Position"> | number
    lastPrice?: FloatFilter<"Position"> | number
    value?: FloatFilter<"Position"> | number
    pnl?: FloatFilter<"Position"> | number
    m2m?: FloatFilter<"Position"> | number
    unrealised?: FloatFilter<"Position"> | number
    realised?: FloatFilter<"Position"> | number
    buyQuantity?: IntFilter<"Position"> | number
    buyValue?: FloatFilter<"Position"> | number
    buyPrice?: FloatFilter<"Position"> | number
    sellQuantity?: IntFilter<"Position"> | number
    sellValue?: FloatFilter<"Position"> | number
    sellPrice?: FloatFilter<"Position"> | number
    multiplier?: FloatFilter<"Position"> | number
    tradingSymbol?: StringFilter<"Position"> | string
    exchange?: EnumExchangeFilter<"Position"> | $Enums.Exchange
    positionType?: EnumPositionTypeFilter<"Position"> | $Enums.PositionType
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: StringFilter<"Order"> | string
    orderId?: StringFilter<"Order"> | string
    userId?: StringFilter<"Order"> | string
    instrumentId?: StringFilter<"Order"> | string
    parentOrderId?: StringNullableFilter<"Order"> | string | null
    exchangeOrderId?: StringNullableFilter<"Order"> | string | null
    exchangeTimestamp?: DateTimeNullableFilter<"Order"> | Date | string | null
    placedBy?: StringFilter<"Order"> | string
    variety?: EnumOrderVarietyFilter<"Order"> | $Enums.OrderVariety
    orderType?: EnumOrderTypeFilter<"Order"> | $Enums.OrderType
    transactionType?: EnumTransactionTypeFilter<"Order"> | $Enums.TransactionType
    validity?: EnumOrderValidityFilter<"Order"> | $Enums.OrderValidity
    product?: EnumProductTypeFilter<"Order"> | $Enums.ProductType
    exchange?: EnumExchangeFilter<"Order"> | $Enums.Exchange
    tradingSymbol?: StringFilter<"Order"> | string
    quantity?: IntFilter<"Order"> | number
    disclosedQuantity?: IntFilter<"Order"> | number
    price?: FloatFilter<"Order"> | number
    triggerPrice?: FloatFilter<"Order"> | number
    averagePrice?: FloatFilter<"Order"> | number
    filledQuantity?: IntFilter<"Order"> | number
    pendingQuantity?: IntFilter<"Order"> | number
    cancelledQuantity?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    statusMessage?: StringNullableFilter<"Order"> | string | null
    tag?: StringNullableFilter<"Order"> | string | null
    clientOrderId?: StringNullableFilter<"Order"> | string | null
    orderTimestamp?: DateTimeFilter<"Order"> | Date | string
    exchangeUpdateTime?: DateTimeNullableFilter<"Order"> | Date | string | null
    rejectedBy?: StringNullableFilter<"Order"> | string | null
    cancelledBy?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
  }

  export type TradeUpsertWithWhereUniqueWithoutUserInput = {
    where: TradeWhereUniqueInput
    update: XOR<TradeUpdateWithoutUserInput, TradeUncheckedUpdateWithoutUserInput>
    create: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput>
  }

  export type TradeUpdateWithWhereUniqueWithoutUserInput = {
    where: TradeWhereUniqueInput
    data: XOR<TradeUpdateWithoutUserInput, TradeUncheckedUpdateWithoutUserInput>
  }

  export type TradeUpdateManyWithWhereWithoutUserInput = {
    where: TradeScalarWhereInput
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyWithoutUserInput>
  }

  export type TradeScalarWhereInput = {
    AND?: TradeScalarWhereInput | TradeScalarWhereInput[]
    OR?: TradeScalarWhereInput[]
    NOT?: TradeScalarWhereInput | TradeScalarWhereInput[]
    id?: StringFilter<"Trade"> | string
    tradeId?: StringFilter<"Trade"> | string
    orderId?: StringFilter<"Trade"> | string
    userId?: StringFilter<"Trade"> | string
    instrumentId?: StringFilter<"Trade"> | string
    exchange?: EnumExchangeFilter<"Trade"> | $Enums.Exchange
    tradingSymbol?: StringFilter<"Trade"> | string
    transactionType?: EnumTransactionTypeFilter<"Trade"> | $Enums.TransactionType
    product?: EnumProductTypeFilter<"Trade"> | $Enums.ProductType
    quantity?: IntFilter<"Trade"> | number
    price?: FloatFilter<"Trade"> | number
    value?: FloatFilter<"Trade"> | number
    exchangeTimestamp?: DateTimeFilter<"Trade"> | Date | string
    createdAt?: DateTimeFilter<"Trade"> | Date | string
  }

  export type WatchlistUpsertWithWhereUniqueWithoutUserInput = {
    where: WatchlistWhereUniqueInput
    update: XOR<WatchlistUpdateWithoutUserInput, WatchlistUncheckedUpdateWithoutUserInput>
    create: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput>
  }

  export type WatchlistUpdateWithWhereUniqueWithoutUserInput = {
    where: WatchlistWhereUniqueInput
    data: XOR<WatchlistUpdateWithoutUserInput, WatchlistUncheckedUpdateWithoutUserInput>
  }

  export type WatchlistUpdateManyWithWhereWithoutUserInput = {
    where: WatchlistScalarWhereInput
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyWithoutUserInput>
  }

  export type WatchlistScalarWhereInput = {
    AND?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
    OR?: WatchlistScalarWhereInput[]
    NOT?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
    id?: StringFilter<"Watchlist"> | string
    userId?: StringFilter<"Watchlist"> | string
    name?: StringFilter<"Watchlist"> | string
    isDefault?: BoolFilter<"Watchlist"> | boolean
    createdAt?: DateTimeFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeFilter<"Watchlist"> | Date | string
  }

  export type PortfolioUpsertWithWhereUniqueWithoutUserInput = {
    where: PortfolioWhereUniqueInput
    update: XOR<PortfolioUpdateWithoutUserInput, PortfolioUncheckedUpdateWithoutUserInput>
    create: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput>
  }

  export type PortfolioUpdateWithWhereUniqueWithoutUserInput = {
    where: PortfolioWhereUniqueInput
    data: XOR<PortfolioUpdateWithoutUserInput, PortfolioUncheckedUpdateWithoutUserInput>
  }

  export type PortfolioUpdateManyWithWhereWithoutUserInput = {
    where: PortfolioScalarWhereInput
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyWithoutUserInput>
  }

  export type PortfolioScalarWhereInput = {
    AND?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
    OR?: PortfolioScalarWhereInput[]
    NOT?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
    id?: StringFilter<"Portfolio"> | string
    userId?: StringFilter<"Portfolio"> | string
    totalValue?: FloatFilter<"Portfolio"> | number
    investedValue?: FloatFilter<"Portfolio"> | number
    currentValue?: FloatFilter<"Portfolio"> | number
    dayChange?: FloatFilter<"Portfolio"> | number
    dayChangePercent?: FloatFilter<"Portfolio"> | number
    totalPnl?: FloatFilter<"Portfolio"> | number
    totalPnlPercent?: FloatFilter<"Portfolio"> | number
    xirr?: FloatNullableFilter<"Portfolio"> | number | null
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
  }

  export type GTTOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: GTTOrderWhereUniqueInput
    update: XOR<GTTOrderUpdateWithoutUserInput, GTTOrderUncheckedUpdateWithoutUserInput>
    create: XOR<GTTOrderCreateWithoutUserInput, GTTOrderUncheckedCreateWithoutUserInput>
  }

  export type GTTOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: GTTOrderWhereUniqueInput
    data: XOR<GTTOrderUpdateWithoutUserInput, GTTOrderUncheckedUpdateWithoutUserInput>
  }

  export type GTTOrderUpdateManyWithWhereWithoutUserInput = {
    where: GTTOrderScalarWhereInput
    data: XOR<GTTOrderUpdateManyMutationInput, GTTOrderUncheckedUpdateManyWithoutUserInput>
  }

  export type GTTOrderScalarWhereInput = {
    AND?: GTTOrderScalarWhereInput | GTTOrderScalarWhereInput[]
    OR?: GTTOrderScalarWhereInput[]
    NOT?: GTTOrderScalarWhereInput | GTTOrderScalarWhereInput[]
    id?: StringFilter<"GTTOrder"> | string
    userId?: StringFilter<"GTTOrder"> | string
    gttType?: EnumGTTTypeFilter<"GTTOrder"> | $Enums.GTTType
    instrumentId?: StringFilter<"GTTOrder"> | string
    tradingSymbol?: StringFilter<"GTTOrder"> | string
    exchange?: EnumExchangeFilter<"GTTOrder"> | $Enums.Exchange
    triggerType?: EnumTriggerTypeFilter<"GTTOrder"> | $Enums.TriggerType
    triggerPrice?: FloatFilter<"GTTOrder"> | number
    lastPrice?: FloatFilter<"GTTOrder"> | number
    limitPrice?: FloatNullableFilter<"GTTOrder"> | number | null
    stopLossPrice?: FloatNullableFilter<"GTTOrder"> | number | null
    quantity?: IntFilter<"GTTOrder"> | number
    product?: EnumProductTypeFilter<"GTTOrder"> | $Enums.ProductType
    orderType?: EnumOrderTypeFilter<"GTTOrder"> | $Enums.OrderType
    status?: EnumGTTStatusFilter<"GTTOrder"> | $Enums.GTTStatus
    expiresAt?: DateTimeNullableFilter<"GTTOrder"> | Date | string | null
    triggeredAt?: DateTimeNullableFilter<"GTTOrder"> | Date | string | null
    createdAt?: DateTimeFilter<"GTTOrder"> | Date | string
    updatedAt?: DateTimeFilter<"GTTOrder"> | Date | string
  }

  export type BasketUpsertWithWhereUniqueWithoutUserInput = {
    where: BasketWhereUniqueInput
    update: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
    create: XOR<BasketCreateWithoutUserInput, BasketUncheckedCreateWithoutUserInput>
  }

  export type BasketUpdateWithWhereUniqueWithoutUserInput = {
    where: BasketWhereUniqueInput
    data: XOR<BasketUpdateWithoutUserInput, BasketUncheckedUpdateWithoutUserInput>
  }

  export type BasketUpdateManyWithWhereWithoutUserInput = {
    where: BasketScalarWhereInput
    data: XOR<BasketUpdateManyMutationInput, BasketUncheckedUpdateManyWithoutUserInput>
  }

  export type BasketScalarWhereInput = {
    AND?: BasketScalarWhereInput | BasketScalarWhereInput[]
    OR?: BasketScalarWhereInput[]
    NOT?: BasketScalarWhereInput | BasketScalarWhereInput[]
    id?: StringFilter<"Basket"> | string
    userId?: StringFilter<"Basket"> | string
    name?: StringFilter<"Basket"> | string
    description?: StringNullableFilter<"Basket"> | string | null
    totalValue?: FloatFilter<"Basket"> | number
    isActive?: BoolFilter<"Basket"> | boolean
    createdAt?: DateTimeFilter<"Basket"> | Date | string
    updatedAt?: DateTimeFilter<"Basket"> | Date | string
  }

  export type AlertUpsertWithWhereUniqueWithoutUserInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutUserInput, AlertUncheckedUpdateWithoutUserInput>
    create: XOR<AlertCreateWithoutUserInput, AlertUncheckedCreateWithoutUserInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutUserInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutUserInput, AlertUncheckedUpdateWithoutUserInput>
  }

  export type AlertUpdateManyWithWhereWithoutUserInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutUserInput>
  }

  export type AlertScalarWhereInput = {
    AND?: AlertScalarWhereInput | AlertScalarWhereInput[]
    OR?: AlertScalarWhereInput[]
    NOT?: AlertScalarWhereInput | AlertScalarWhereInput[]
    id?: StringFilter<"Alert"> | string
    userId?: StringFilter<"Alert"> | string
    instrumentId?: StringNullableFilter<"Alert"> | string | null
    alertType?: EnumAlertTypeFilter<"Alert"> | $Enums.AlertType
    message?: StringFilter<"Alert"> | string
    triggerPrice?: FloatNullableFilter<"Alert"> | number | null
    condition?: StringNullableFilter<"Alert"> | string | null
    isTriggered?: BoolFilter<"Alert"> | boolean
    isRead?: BoolFilter<"Alert"> | boolean
    triggeredAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Alert"> | Date | string | null
    createdAt?: DateTimeFilter<"Alert"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    notificationType?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    priority?: EnumPriorityFilter<"Notification"> | $Enums.Priority
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    deviceType?: StringNullableFilter<"Session"> | string | null
    isActive?: BoolFilter<"Session"> | boolean
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBankAccountsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBankAccountsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBankAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
  }

  export type UserUpsertWithoutBankAccountsInput = {
    update: XOR<UserUpdateWithoutBankAccountsInput, UserUncheckedUpdateWithoutBankAccountsInput>
    create: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBankAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBankAccountsInput, UserUncheckedUpdateWithoutBankAccountsInput>
  }

  export type UserUpdateWithoutBankAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBankAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFundsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFundsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFundsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
  }

  export type UserUpsertWithoutFundsInput = {
    update: XOR<UserUpdateWithoutFundsInput, UserUncheckedUpdateWithoutFundsInput>
    create: XOR<UserCreateWithoutFundsInput, UserUncheckedCreateWithoutFundsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFundsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFundsInput, UserUncheckedUpdateWithoutFundsInput>
  }

  export type UserUpdateWithoutFundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HoldingCreateWithoutInstrumentInput = {
    id?: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHoldingsInput
  }

  export type HoldingUncheckedCreateWithoutInstrumentInput = {
    id?: string
    userId: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HoldingCreateOrConnectWithoutInstrumentInput = {
    where: HoldingWhereUniqueInput
    create: XOR<HoldingCreateWithoutInstrumentInput, HoldingUncheckedCreateWithoutInstrumentInput>
  }

  export type HoldingCreateManyInstrumentInputEnvelope = {
    data: HoldingCreateManyInstrumentInput | HoldingCreateManyInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type PositionCreateWithoutInstrumentInput = {
    id?: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPositionsInput
  }

  export type PositionUncheckedCreateWithoutInstrumentInput = {
    id?: string
    userId: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionCreateOrConnectWithoutInstrumentInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutInstrumentInput, PositionUncheckedCreateWithoutInstrumentInput>
  }

  export type PositionCreateManyInstrumentInputEnvelope = {
    data: PositionCreateManyInstrumentInput | PositionCreateManyInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutInstrumentInput = {
    id?: string
    orderId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    trades?: TradeCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutInstrumentInput = {
    id?: string
    orderId: string
    userId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    trades?: TradeUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutInstrumentInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutInstrumentInput, OrderUncheckedCreateWithoutInstrumentInput>
  }

  export type OrderCreateManyInstrumentInputEnvelope = {
    data: OrderCreateManyInstrumentInput | OrderCreateManyInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type TradeCreateWithoutInstrumentInput = {
    id?: string
    tradeId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutTradesInput
    user: UserCreateNestedOneWithoutTradesInput
    charges?: TradeChargesCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutInstrumentInput = {
    id?: string
    tradeId: string
    orderId: string
    userId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    charges?: TradeChargesUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutInstrumentInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutInstrumentInput, TradeUncheckedCreateWithoutInstrumentInput>
  }

  export type TradeCreateManyInstrumentInputEnvelope = {
    data: TradeCreateManyInstrumentInput | TradeCreateManyInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type MarketDepthCreateWithoutInstrumentInput = {
    id?: string
    side: $Enums.OrderSide
    price: number
    quantity: number
    orders: number
    timestamp?: Date | string
  }

  export type MarketDepthUncheckedCreateWithoutInstrumentInput = {
    id?: string
    side: $Enums.OrderSide
    price: number
    quantity: number
    orders: number
    timestamp?: Date | string
  }

  export type MarketDepthCreateOrConnectWithoutInstrumentInput = {
    where: MarketDepthWhereUniqueInput
    create: XOR<MarketDepthCreateWithoutInstrumentInput, MarketDepthUncheckedCreateWithoutInstrumentInput>
  }

  export type MarketDepthCreateManyInstrumentInputEnvelope = {
    data: MarketDepthCreateManyInstrumentInput | MarketDepthCreateManyInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type PriceHistoryCreateWithoutInstrumentInput = {
    id?: string
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: Date | string
    interval: string
  }

  export type PriceHistoryUncheckedCreateWithoutInstrumentInput = {
    id?: string
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: Date | string
    interval: string
  }

  export type PriceHistoryCreateOrConnectWithoutInstrumentInput = {
    where: PriceHistoryWhereUniqueInput
    create: XOR<PriceHistoryCreateWithoutInstrumentInput, PriceHistoryUncheckedCreateWithoutInstrumentInput>
  }

  export type PriceHistoryCreateManyInstrumentInputEnvelope = {
    data: PriceHistoryCreateManyInstrumentInput | PriceHistoryCreateManyInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type WatchlistItemCreateWithoutInstrumentInput = {
    id?: string
    sortOrder?: number
    addedAt?: Date | string
    watchlist: WatchlistCreateNestedOneWithoutItemsInput
  }

  export type WatchlistItemUncheckedCreateWithoutInstrumentInput = {
    id?: string
    watchlistId: string
    sortOrder?: number
    addedAt?: Date | string
  }

  export type WatchlistItemCreateOrConnectWithoutInstrumentInput = {
    where: WatchlistItemWhereUniqueInput
    create: XOR<WatchlistItemCreateWithoutInstrumentInput, WatchlistItemUncheckedCreateWithoutInstrumentInput>
  }

  export type WatchlistItemCreateManyInstrumentInputEnvelope = {
    data: WatchlistItemCreateManyInstrumentInput | WatchlistItemCreateManyInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type HoldingUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: HoldingWhereUniqueInput
    update: XOR<HoldingUpdateWithoutInstrumentInput, HoldingUncheckedUpdateWithoutInstrumentInput>
    create: XOR<HoldingCreateWithoutInstrumentInput, HoldingUncheckedCreateWithoutInstrumentInput>
  }

  export type HoldingUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: HoldingWhereUniqueInput
    data: XOR<HoldingUpdateWithoutInstrumentInput, HoldingUncheckedUpdateWithoutInstrumentInput>
  }

  export type HoldingUpdateManyWithWhereWithoutInstrumentInput = {
    where: HoldingScalarWhereInput
    data: XOR<HoldingUpdateManyMutationInput, HoldingUncheckedUpdateManyWithoutInstrumentInput>
  }

  export type PositionUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: PositionWhereUniqueInput
    update: XOR<PositionUpdateWithoutInstrumentInput, PositionUncheckedUpdateWithoutInstrumentInput>
    create: XOR<PositionCreateWithoutInstrumentInput, PositionUncheckedCreateWithoutInstrumentInput>
  }

  export type PositionUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: PositionWhereUniqueInput
    data: XOR<PositionUpdateWithoutInstrumentInput, PositionUncheckedUpdateWithoutInstrumentInput>
  }

  export type PositionUpdateManyWithWhereWithoutInstrumentInput = {
    where: PositionScalarWhereInput
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyWithoutInstrumentInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutInstrumentInput, OrderUncheckedUpdateWithoutInstrumentInput>
    create: XOR<OrderCreateWithoutInstrumentInput, OrderUncheckedCreateWithoutInstrumentInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutInstrumentInput, OrderUncheckedUpdateWithoutInstrumentInput>
  }

  export type OrderUpdateManyWithWhereWithoutInstrumentInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutInstrumentInput>
  }

  export type TradeUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: TradeWhereUniqueInput
    update: XOR<TradeUpdateWithoutInstrumentInput, TradeUncheckedUpdateWithoutInstrumentInput>
    create: XOR<TradeCreateWithoutInstrumentInput, TradeUncheckedCreateWithoutInstrumentInput>
  }

  export type TradeUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: TradeWhereUniqueInput
    data: XOR<TradeUpdateWithoutInstrumentInput, TradeUncheckedUpdateWithoutInstrumentInput>
  }

  export type TradeUpdateManyWithWhereWithoutInstrumentInput = {
    where: TradeScalarWhereInput
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyWithoutInstrumentInput>
  }

  export type MarketDepthUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: MarketDepthWhereUniqueInput
    update: XOR<MarketDepthUpdateWithoutInstrumentInput, MarketDepthUncheckedUpdateWithoutInstrumentInput>
    create: XOR<MarketDepthCreateWithoutInstrumentInput, MarketDepthUncheckedCreateWithoutInstrumentInput>
  }

  export type MarketDepthUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: MarketDepthWhereUniqueInput
    data: XOR<MarketDepthUpdateWithoutInstrumentInput, MarketDepthUncheckedUpdateWithoutInstrumentInput>
  }

  export type MarketDepthUpdateManyWithWhereWithoutInstrumentInput = {
    where: MarketDepthScalarWhereInput
    data: XOR<MarketDepthUpdateManyMutationInput, MarketDepthUncheckedUpdateManyWithoutInstrumentInput>
  }

  export type MarketDepthScalarWhereInput = {
    AND?: MarketDepthScalarWhereInput | MarketDepthScalarWhereInput[]
    OR?: MarketDepthScalarWhereInput[]
    NOT?: MarketDepthScalarWhereInput | MarketDepthScalarWhereInput[]
    id?: StringFilter<"MarketDepth"> | string
    instrumentId?: StringFilter<"MarketDepth"> | string
    side?: EnumOrderSideFilter<"MarketDepth"> | $Enums.OrderSide
    price?: FloatFilter<"MarketDepth"> | number
    quantity?: IntFilter<"MarketDepth"> | number
    orders?: IntFilter<"MarketDepth"> | number
    timestamp?: DateTimeFilter<"MarketDepth"> | Date | string
  }

  export type PriceHistoryUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: PriceHistoryWhereUniqueInput
    update: XOR<PriceHistoryUpdateWithoutInstrumentInput, PriceHistoryUncheckedUpdateWithoutInstrumentInput>
    create: XOR<PriceHistoryCreateWithoutInstrumentInput, PriceHistoryUncheckedCreateWithoutInstrumentInput>
  }

  export type PriceHistoryUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: PriceHistoryWhereUniqueInput
    data: XOR<PriceHistoryUpdateWithoutInstrumentInput, PriceHistoryUncheckedUpdateWithoutInstrumentInput>
  }

  export type PriceHistoryUpdateManyWithWhereWithoutInstrumentInput = {
    where: PriceHistoryScalarWhereInput
    data: XOR<PriceHistoryUpdateManyMutationInput, PriceHistoryUncheckedUpdateManyWithoutInstrumentInput>
  }

  export type PriceHistoryScalarWhereInput = {
    AND?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
    OR?: PriceHistoryScalarWhereInput[]
    NOT?: PriceHistoryScalarWhereInput | PriceHistoryScalarWhereInput[]
    id?: StringFilter<"PriceHistory"> | string
    instrumentId?: StringFilter<"PriceHistory"> | string
    open?: FloatFilter<"PriceHistory"> | number
    high?: FloatFilter<"PriceHistory"> | number
    low?: FloatFilter<"PriceHistory"> | number
    close?: FloatFilter<"PriceHistory"> | number
    volume?: IntFilter<"PriceHistory"> | number
    ohlcDate?: DateTimeFilter<"PriceHistory"> | Date | string
    interval?: StringFilter<"PriceHistory"> | string
  }

  export type WatchlistItemUpsertWithWhereUniqueWithoutInstrumentInput = {
    where: WatchlistItemWhereUniqueInput
    update: XOR<WatchlistItemUpdateWithoutInstrumentInput, WatchlistItemUncheckedUpdateWithoutInstrumentInput>
    create: XOR<WatchlistItemCreateWithoutInstrumentInput, WatchlistItemUncheckedCreateWithoutInstrumentInput>
  }

  export type WatchlistItemUpdateWithWhereUniqueWithoutInstrumentInput = {
    where: WatchlistItemWhereUniqueInput
    data: XOR<WatchlistItemUpdateWithoutInstrumentInput, WatchlistItemUncheckedUpdateWithoutInstrumentInput>
  }

  export type WatchlistItemUpdateManyWithWhereWithoutInstrumentInput = {
    where: WatchlistItemScalarWhereInput
    data: XOR<WatchlistItemUpdateManyMutationInput, WatchlistItemUncheckedUpdateManyWithoutInstrumentInput>
  }

  export type WatchlistItemScalarWhereInput = {
    AND?: WatchlistItemScalarWhereInput | WatchlistItemScalarWhereInput[]
    OR?: WatchlistItemScalarWhereInput[]
    NOT?: WatchlistItemScalarWhereInput | WatchlistItemScalarWhereInput[]
    id?: StringFilter<"WatchlistItem"> | string
    watchlistId?: StringFilter<"WatchlistItem"> | string
    instrumentId?: StringFilter<"WatchlistItem"> | string
    sortOrder?: IntFilter<"WatchlistItem"> | number
    addedAt?: DateTimeFilter<"WatchlistItem"> | Date | string
  }

  export type InstrumentCreateWithoutMarketDepthInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingCreateNestedManyWithoutInstrumentInput
    positions?: PositionCreateNestedManyWithoutInstrumentInput
    orders?: OrderCreateNestedManyWithoutInstrumentInput
    trades?: TradeCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateWithoutMarketDepthInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingUncheckedCreateNestedManyWithoutInstrumentInput
    positions?: PositionUncheckedCreateNestedManyWithoutInstrumentInput
    orders?: OrderUncheckedCreateNestedManyWithoutInstrumentInput
    trades?: TradeUncheckedCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentCreateOrConnectWithoutMarketDepthInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutMarketDepthInput, InstrumentUncheckedCreateWithoutMarketDepthInput>
  }

  export type InstrumentUpsertWithoutMarketDepthInput = {
    update: XOR<InstrumentUpdateWithoutMarketDepthInput, InstrumentUncheckedUpdateWithoutMarketDepthInput>
    create: XOR<InstrumentCreateWithoutMarketDepthInput, InstrumentUncheckedCreateWithoutMarketDepthInput>
    where?: InstrumentWhereInput
  }

  export type InstrumentUpdateToOneWithWhereWithoutMarketDepthInput = {
    where?: InstrumentWhereInput
    data: XOR<InstrumentUpdateWithoutMarketDepthInput, InstrumentUncheckedUpdateWithoutMarketDepthInput>
  }

  export type InstrumentUpdateWithoutMarketDepthInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateWithoutMarketDepthInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUncheckedUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUncheckedUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUncheckedUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUncheckedUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentCreateWithoutPriceHistoryInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingCreateNestedManyWithoutInstrumentInput
    positions?: PositionCreateNestedManyWithoutInstrumentInput
    orders?: OrderCreateNestedManyWithoutInstrumentInput
    trades?: TradeCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateWithoutPriceHistoryInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingUncheckedCreateNestedManyWithoutInstrumentInput
    positions?: PositionUncheckedCreateNestedManyWithoutInstrumentInput
    orders?: OrderUncheckedCreateNestedManyWithoutInstrumentInput
    trades?: TradeUncheckedCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentCreateOrConnectWithoutPriceHistoryInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutPriceHistoryInput, InstrumentUncheckedCreateWithoutPriceHistoryInput>
  }

  export type InstrumentUpsertWithoutPriceHistoryInput = {
    update: XOR<InstrumentUpdateWithoutPriceHistoryInput, InstrumentUncheckedUpdateWithoutPriceHistoryInput>
    create: XOR<InstrumentCreateWithoutPriceHistoryInput, InstrumentUncheckedCreateWithoutPriceHistoryInput>
    where?: InstrumentWhereInput
  }

  export type InstrumentUpdateToOneWithWhereWithoutPriceHistoryInput = {
    where?: InstrumentWhereInput
    data: XOR<InstrumentUpdateWithoutPriceHistoryInput, InstrumentUncheckedUpdateWithoutPriceHistoryInput>
  }

  export type InstrumentUpdateWithoutPriceHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateWithoutPriceHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUncheckedUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUncheckedUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUncheckedUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUncheckedUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type UserCreateWithoutPortfoliosInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPortfoliosInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPortfoliosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
  }

  export type UserUpsertWithoutPortfoliosInput = {
    update: XOR<UserUpdateWithoutPortfoliosInput, UserUncheckedUpdateWithoutPortfoliosInput>
    create: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPortfoliosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPortfoliosInput, UserUncheckedUpdateWithoutPortfoliosInput>
  }

  export type UserUpdateWithoutPortfoliosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPortfoliosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutHoldingsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHoldingsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHoldingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHoldingsInput, UserUncheckedCreateWithoutHoldingsInput>
  }

  export type InstrumentCreateWithoutHoldingsInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    positions?: PositionCreateNestedManyWithoutInstrumentInput
    orders?: OrderCreateNestedManyWithoutInstrumentInput
    trades?: TradeCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateWithoutHoldingsInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    positions?: PositionUncheckedCreateNestedManyWithoutInstrumentInput
    orders?: OrderUncheckedCreateNestedManyWithoutInstrumentInput
    trades?: TradeUncheckedCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentCreateOrConnectWithoutHoldingsInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutHoldingsInput, InstrumentUncheckedCreateWithoutHoldingsInput>
  }

  export type UserUpsertWithoutHoldingsInput = {
    update: XOR<UserUpdateWithoutHoldingsInput, UserUncheckedUpdateWithoutHoldingsInput>
    create: XOR<UserCreateWithoutHoldingsInput, UserUncheckedCreateWithoutHoldingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHoldingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHoldingsInput, UserUncheckedUpdateWithoutHoldingsInput>
  }

  export type UserUpdateWithoutHoldingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHoldingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstrumentUpsertWithoutHoldingsInput = {
    update: XOR<InstrumentUpdateWithoutHoldingsInput, InstrumentUncheckedUpdateWithoutHoldingsInput>
    create: XOR<InstrumentCreateWithoutHoldingsInput, InstrumentUncheckedCreateWithoutHoldingsInput>
    where?: InstrumentWhereInput
  }

  export type InstrumentUpdateToOneWithWhereWithoutHoldingsInput = {
    where?: InstrumentWhereInput
    data: XOR<InstrumentUpdateWithoutHoldingsInput, InstrumentUncheckedUpdateWithoutHoldingsInput>
  }

  export type InstrumentUpdateWithoutHoldingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    positions?: PositionUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateWithoutHoldingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    positions?: PositionUncheckedUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUncheckedUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUncheckedUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type UserCreateWithoutPositionsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPositionsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPositionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPositionsInput, UserUncheckedCreateWithoutPositionsInput>
  }

  export type InstrumentCreateWithoutPositionsInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingCreateNestedManyWithoutInstrumentInput
    orders?: OrderCreateNestedManyWithoutInstrumentInput
    trades?: TradeCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateWithoutPositionsInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingUncheckedCreateNestedManyWithoutInstrumentInput
    orders?: OrderUncheckedCreateNestedManyWithoutInstrumentInput
    trades?: TradeUncheckedCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentCreateOrConnectWithoutPositionsInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutPositionsInput, InstrumentUncheckedCreateWithoutPositionsInput>
  }

  export type UserUpsertWithoutPositionsInput = {
    update: XOR<UserUpdateWithoutPositionsInput, UserUncheckedUpdateWithoutPositionsInput>
    create: XOR<UserCreateWithoutPositionsInput, UserUncheckedCreateWithoutPositionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPositionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPositionsInput, UserUncheckedUpdateWithoutPositionsInput>
  }

  export type UserUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstrumentUpsertWithoutPositionsInput = {
    update: XOR<InstrumentUpdateWithoutPositionsInput, InstrumentUncheckedUpdateWithoutPositionsInput>
    create: XOR<InstrumentCreateWithoutPositionsInput, InstrumentUncheckedCreateWithoutPositionsInput>
    where?: InstrumentWhereInput
  }

  export type InstrumentUpdateToOneWithWhereWithoutPositionsInput = {
    where?: InstrumentWhereInput
    data: XOR<InstrumentUpdateWithoutPositionsInput, InstrumentUncheckedUpdateWithoutPositionsInput>
  }

  export type InstrumentUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUncheckedUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUncheckedUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUncheckedUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type UserCreateWithoutOrdersInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type InstrumentCreateWithoutOrdersInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingCreateNestedManyWithoutInstrumentInput
    positions?: PositionCreateNestedManyWithoutInstrumentInput
    trades?: TradeCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateWithoutOrdersInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingUncheckedCreateNestedManyWithoutInstrumentInput
    positions?: PositionUncheckedCreateNestedManyWithoutInstrumentInput
    trades?: TradeUncheckedCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentCreateOrConnectWithoutOrdersInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutOrdersInput, InstrumentUncheckedCreateWithoutOrdersInput>
  }

  export type TradeCreateWithoutOrderInput = {
    id?: string
    tradeId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTradesInput
    instrument: InstrumentCreateNestedOneWithoutTradesInput
    charges?: TradeChargesCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutOrderInput = {
    id?: string
    tradeId: string
    userId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    charges?: TradeChargesUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutOrderInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutOrderInput, TradeUncheckedCreateWithoutOrderInput>
  }

  export type TradeCreateManyOrderInputEnvelope = {
    data: TradeCreateManyOrderInput | TradeCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstrumentUpsertWithoutOrdersInput = {
    update: XOR<InstrumentUpdateWithoutOrdersInput, InstrumentUncheckedUpdateWithoutOrdersInput>
    create: XOR<InstrumentCreateWithoutOrdersInput, InstrumentUncheckedCreateWithoutOrdersInput>
    where?: InstrumentWhereInput
  }

  export type InstrumentUpdateToOneWithWhereWithoutOrdersInput = {
    where?: InstrumentWhereInput
    data: XOR<InstrumentUpdateWithoutOrdersInput, InstrumentUncheckedUpdateWithoutOrdersInput>
  }

  export type InstrumentUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUncheckedUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUncheckedUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUncheckedUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type TradeUpsertWithWhereUniqueWithoutOrderInput = {
    where: TradeWhereUniqueInput
    update: XOR<TradeUpdateWithoutOrderInput, TradeUncheckedUpdateWithoutOrderInput>
    create: XOR<TradeCreateWithoutOrderInput, TradeUncheckedCreateWithoutOrderInput>
  }

  export type TradeUpdateWithWhereUniqueWithoutOrderInput = {
    where: TradeWhereUniqueInput
    data: XOR<TradeUpdateWithoutOrderInput, TradeUncheckedUpdateWithoutOrderInput>
  }

  export type TradeUpdateManyWithWhereWithoutOrderInput = {
    where: TradeScalarWhereInput
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutTradesInput = {
    id?: string
    orderId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    instrument: InstrumentCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateWithoutTradesInput = {
    id?: string
    orderId: string
    userId: string
    instrumentId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateOrConnectWithoutTradesInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutTradesInput, OrderUncheckedCreateWithoutTradesInput>
  }

  export type UserCreateWithoutTradesInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTradesInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTradesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTradesInput, UserUncheckedCreateWithoutTradesInput>
  }

  export type InstrumentCreateWithoutTradesInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingCreateNestedManyWithoutInstrumentInput
    positions?: PositionCreateNestedManyWithoutInstrumentInput
    orders?: OrderCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateWithoutTradesInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingUncheckedCreateNestedManyWithoutInstrumentInput
    positions?: PositionUncheckedCreateNestedManyWithoutInstrumentInput
    orders?: OrderUncheckedCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput
    watchlistItems?: WatchlistItemUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentCreateOrConnectWithoutTradesInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutTradesInput, InstrumentUncheckedCreateWithoutTradesInput>
  }

  export type TradeChargesCreateWithoutTradeInput = {
    id?: string
    brokerage?: number
    stt?: number
    exchangeTxnCharge?: number
    gst?: number
    sebiTurnover?: number
    stampDuty?: number
    totalCharges?: number
    netAmount: number
  }

  export type TradeChargesUncheckedCreateWithoutTradeInput = {
    id?: string
    brokerage?: number
    stt?: number
    exchangeTxnCharge?: number
    gst?: number
    sebiTurnover?: number
    stampDuty?: number
    totalCharges?: number
    netAmount: number
  }

  export type TradeChargesCreateOrConnectWithoutTradeInput = {
    where: TradeChargesWhereUniqueInput
    create: XOR<TradeChargesCreateWithoutTradeInput, TradeChargesUncheckedCreateWithoutTradeInput>
  }

  export type OrderUpsertWithoutTradesInput = {
    update: XOR<OrderUpdateWithoutTradesInput, OrderUncheckedUpdateWithoutTradesInput>
    create: XOR<OrderCreateWithoutTradesInput, OrderUncheckedCreateWithoutTradesInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutTradesInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutTradesInput, OrderUncheckedUpdateWithoutTradesInput>
  }

  export type OrderUpdateWithoutTradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateWithoutTradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutTradesInput = {
    update: XOR<UserUpdateWithoutTradesInput, UserUncheckedUpdateWithoutTradesInput>
    create: XOR<UserCreateWithoutTradesInput, UserUncheckedCreateWithoutTradesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTradesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTradesInput, UserUncheckedUpdateWithoutTradesInput>
  }

  export type UserUpdateWithoutTradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstrumentUpsertWithoutTradesInput = {
    update: XOR<InstrumentUpdateWithoutTradesInput, InstrumentUncheckedUpdateWithoutTradesInput>
    create: XOR<InstrumentCreateWithoutTradesInput, InstrumentUncheckedCreateWithoutTradesInput>
    where?: InstrumentWhereInput
  }

  export type InstrumentUpdateToOneWithWhereWithoutTradesInput = {
    where?: InstrumentWhereInput
    data: XOR<InstrumentUpdateWithoutTradesInput, InstrumentUncheckedUpdateWithoutTradesInput>
  }

  export type InstrumentUpdateWithoutTradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateWithoutTradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUncheckedUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUncheckedUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUncheckedUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput
    watchlistItems?: WatchlistItemUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type TradeChargesUpsertWithoutTradeInput = {
    update: XOR<TradeChargesUpdateWithoutTradeInput, TradeChargesUncheckedUpdateWithoutTradeInput>
    create: XOR<TradeChargesCreateWithoutTradeInput, TradeChargesUncheckedCreateWithoutTradeInput>
    where?: TradeChargesWhereInput
  }

  export type TradeChargesUpdateToOneWithWhereWithoutTradeInput = {
    where?: TradeChargesWhereInput
    data: XOR<TradeChargesUpdateWithoutTradeInput, TradeChargesUncheckedUpdateWithoutTradeInput>
  }

  export type TradeChargesUpdateWithoutTradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    brokerage?: FloatFieldUpdateOperationsInput | number
    stt?: FloatFieldUpdateOperationsInput | number
    exchangeTxnCharge?: FloatFieldUpdateOperationsInput | number
    gst?: FloatFieldUpdateOperationsInput | number
    sebiTurnover?: FloatFieldUpdateOperationsInput | number
    stampDuty?: FloatFieldUpdateOperationsInput | number
    totalCharges?: FloatFieldUpdateOperationsInput | number
    netAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type TradeChargesUncheckedUpdateWithoutTradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    brokerage?: FloatFieldUpdateOperationsInput | number
    stt?: FloatFieldUpdateOperationsInput | number
    exchangeTxnCharge?: FloatFieldUpdateOperationsInput | number
    gst?: FloatFieldUpdateOperationsInput | number
    sebiTurnover?: FloatFieldUpdateOperationsInput | number
    stampDuty?: FloatFieldUpdateOperationsInput | number
    totalCharges?: FloatFieldUpdateOperationsInput | number
    netAmount?: FloatFieldUpdateOperationsInput | number
  }

  export type TradeCreateWithoutChargesInput = {
    id?: string
    tradeId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
    order: OrderCreateNestedOneWithoutTradesInput
    user: UserCreateNestedOneWithoutTradesInput
    instrument: InstrumentCreateNestedOneWithoutTradesInput
  }

  export type TradeUncheckedCreateWithoutChargesInput = {
    id?: string
    tradeId: string
    orderId: string
    userId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
  }

  export type TradeCreateOrConnectWithoutChargesInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutChargesInput, TradeUncheckedCreateWithoutChargesInput>
  }

  export type TradeUpsertWithoutChargesInput = {
    update: XOR<TradeUpdateWithoutChargesInput, TradeUncheckedUpdateWithoutChargesInput>
    create: XOR<TradeCreateWithoutChargesInput, TradeUncheckedCreateWithoutChargesInput>
    where?: TradeWhereInput
  }

  export type TradeUpdateToOneWithWhereWithoutChargesInput = {
    where?: TradeWhereInput
    data: XOR<TradeUpdateWithoutChargesInput, TradeUncheckedUpdateWithoutChargesInput>
  }

  export type TradeUpdateWithoutChargesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutTradesNestedInput
    user?: UserUpdateOneRequiredWithoutTradesNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutTradesNestedInput
  }

  export type TradeUncheckedUpdateWithoutChargesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutGttOrdersInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGttOrdersInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGttOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGttOrdersInput, UserUncheckedCreateWithoutGttOrdersInput>
  }

  export type UserUpsertWithoutGttOrdersInput = {
    update: XOR<UserUpdateWithoutGttOrdersInput, UserUncheckedUpdateWithoutGttOrdersInput>
    create: XOR<UserCreateWithoutGttOrdersInput, UserUncheckedCreateWithoutGttOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGttOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGttOrdersInput, UserUncheckedUpdateWithoutGttOrdersInput>
  }

  export type UserUpdateWithoutGttOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGttOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutWatchlistsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWatchlistsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWatchlistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
  }

  export type WatchlistItemCreateWithoutWatchlistInput = {
    id?: string
    sortOrder?: number
    addedAt?: Date | string
    instrument: InstrumentCreateNestedOneWithoutWatchlistItemsInput
  }

  export type WatchlistItemUncheckedCreateWithoutWatchlistInput = {
    id?: string
    instrumentId: string
    sortOrder?: number
    addedAt?: Date | string
  }

  export type WatchlistItemCreateOrConnectWithoutWatchlistInput = {
    where: WatchlistItemWhereUniqueInput
    create: XOR<WatchlistItemCreateWithoutWatchlistInput, WatchlistItemUncheckedCreateWithoutWatchlistInput>
  }

  export type WatchlistItemCreateManyWatchlistInputEnvelope = {
    data: WatchlistItemCreateManyWatchlistInput | WatchlistItemCreateManyWatchlistInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWatchlistsInput = {
    update: XOR<UserUpdateWithoutWatchlistsInput, UserUncheckedUpdateWithoutWatchlistsInput>
    create: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWatchlistsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWatchlistsInput, UserUncheckedUpdateWithoutWatchlistsInput>
  }

  export type UserUpdateWithoutWatchlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWatchlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WatchlistItemUpsertWithWhereUniqueWithoutWatchlistInput = {
    where: WatchlistItemWhereUniqueInput
    update: XOR<WatchlistItemUpdateWithoutWatchlistInput, WatchlistItemUncheckedUpdateWithoutWatchlistInput>
    create: XOR<WatchlistItemCreateWithoutWatchlistInput, WatchlistItemUncheckedCreateWithoutWatchlistInput>
  }

  export type WatchlistItemUpdateWithWhereUniqueWithoutWatchlistInput = {
    where: WatchlistItemWhereUniqueInput
    data: XOR<WatchlistItemUpdateWithoutWatchlistInput, WatchlistItemUncheckedUpdateWithoutWatchlistInput>
  }

  export type WatchlistItemUpdateManyWithWhereWithoutWatchlistInput = {
    where: WatchlistItemScalarWhereInput
    data: XOR<WatchlistItemUpdateManyMutationInput, WatchlistItemUncheckedUpdateManyWithoutWatchlistInput>
  }

  export type WatchlistCreateWithoutItemsInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWatchlistsInput
  }

  export type WatchlistUncheckedCreateWithoutItemsInput = {
    id?: string
    userId: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WatchlistCreateOrConnectWithoutItemsInput = {
    where: WatchlistWhereUniqueInput
    create: XOR<WatchlistCreateWithoutItemsInput, WatchlistUncheckedCreateWithoutItemsInput>
  }

  export type InstrumentCreateWithoutWatchlistItemsInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingCreateNestedManyWithoutInstrumentInput
    positions?: PositionCreateNestedManyWithoutInstrumentInput
    orders?: OrderCreateNestedManyWithoutInstrumentInput
    trades?: TradeCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentUncheckedCreateWithoutWatchlistItemsInput = {
    id?: string
    instrumentToken: string
    exchangeToken: string
    tradingSymbol: string
    name: string
    exchange: $Enums.Exchange
    segment: $Enums.Segment
    instrumentType: $Enums.InstrumentType
    tickSize?: number
    lotSize?: number
    expiry?: Date | string | null
    strike?: number | null
    isin?: string | null
    isActive?: boolean
    lastPrice?: number
    lastUpdated?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    holdings?: HoldingUncheckedCreateNestedManyWithoutInstrumentInput
    positions?: PositionUncheckedCreateNestedManyWithoutInstrumentInput
    orders?: OrderUncheckedCreateNestedManyWithoutInstrumentInput
    trades?: TradeUncheckedCreateNestedManyWithoutInstrumentInput
    marketDepth?: MarketDepthUncheckedCreateNestedManyWithoutInstrumentInput
    priceHistory?: PriceHistoryUncheckedCreateNestedManyWithoutInstrumentInput
  }

  export type InstrumentCreateOrConnectWithoutWatchlistItemsInput = {
    where: InstrumentWhereUniqueInput
    create: XOR<InstrumentCreateWithoutWatchlistItemsInput, InstrumentUncheckedCreateWithoutWatchlistItemsInput>
  }

  export type WatchlistUpsertWithoutItemsInput = {
    update: XOR<WatchlistUpdateWithoutItemsInput, WatchlistUncheckedUpdateWithoutItemsInput>
    create: XOR<WatchlistCreateWithoutItemsInput, WatchlistUncheckedCreateWithoutItemsInput>
    where?: WatchlistWhereInput
  }

  export type WatchlistUpdateToOneWithWhereWithoutItemsInput = {
    where?: WatchlistWhereInput
    data: XOR<WatchlistUpdateWithoutItemsInput, WatchlistUncheckedUpdateWithoutItemsInput>
  }

  export type WatchlistUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchlistsNestedInput
  }

  export type WatchlistUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstrumentUpsertWithoutWatchlistItemsInput = {
    update: XOR<InstrumentUpdateWithoutWatchlistItemsInput, InstrumentUncheckedUpdateWithoutWatchlistItemsInput>
    create: XOR<InstrumentCreateWithoutWatchlistItemsInput, InstrumentUncheckedCreateWithoutWatchlistItemsInput>
    where?: InstrumentWhereInput
  }

  export type InstrumentUpdateToOneWithWhereWithoutWatchlistItemsInput = {
    where?: InstrumentWhereInput
    data: XOR<InstrumentUpdateWithoutWatchlistItemsInput, InstrumentUncheckedUpdateWithoutWatchlistItemsInput>
  }

  export type InstrumentUpdateWithoutWatchlistItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUpdateManyWithoutInstrumentNestedInput
  }

  export type InstrumentUncheckedUpdateWithoutWatchlistItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentToken?: StringFieldUpdateOperationsInput | string
    exchangeToken?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    segment?: EnumSegmentFieldUpdateOperationsInput | $Enums.Segment
    instrumentType?: EnumInstrumentTypeFieldUpdateOperationsInput | $Enums.InstrumentType
    tickSize?: FloatFieldUpdateOperationsInput | number
    lotSize?: IntFieldUpdateOperationsInput | number
    expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    strike?: NullableFloatFieldUpdateOperationsInput | number | null
    isin?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastPrice?: FloatFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    holdings?: HoldingUncheckedUpdateManyWithoutInstrumentNestedInput
    positions?: PositionUncheckedUpdateManyWithoutInstrumentNestedInput
    orders?: OrderUncheckedUpdateManyWithoutInstrumentNestedInput
    trades?: TradeUncheckedUpdateManyWithoutInstrumentNestedInput
    marketDepth?: MarketDepthUncheckedUpdateManyWithoutInstrumentNestedInput
    priceHistory?: PriceHistoryUncheckedUpdateManyWithoutInstrumentNestedInput
  }

  export type UserCreateWithoutAlertsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAlertsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAlertsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
  }

  export type UserUpsertWithoutAlertsInput = {
    update: XOR<UserUpdateWithoutAlertsInput, UserUncheckedUpdateWithoutAlertsInput>
    create: XOR<UserCreateWithoutAlertsInput, UserUncheckedCreateWithoutAlertsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlertsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlertsInput, UserUncheckedUpdateWithoutAlertsInput>
  }

  export type UserUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    baskets?: BasketCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    baskets?: BasketUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    baskets?: BasketUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    baskets?: BasketUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBasketsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountCreateNestedManyWithoutUserInput
    funds?: FundTransactionCreateNestedManyWithoutUserInput
    holdings?: HoldingCreateNestedManyWithoutUserInput
    positions?: PositionCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    trades?: TradeCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderCreateNestedManyWithoutUserInput
    alerts?: AlertCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBasketsInput = {
    id?: string
    email?: string | null
    phone: string
    password?: string | null
    firstName?: string | null
    lastName?: string | null
    panNumber?: string | null
    aadhaarNumber?: string | null
    dateOfBirth?: Date | string | null
    kycStatus?: $Enums.KYCStatus | null
    accountType?: $Enums.AccountType | null
    role?: $Enums.UserRole | null
    isActive?: boolean | null
    twoFactorEnabled?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    bankAccounts?: BankAccountUncheckedCreateNestedManyWithoutUserInput
    funds?: FundTransactionUncheckedCreateNestedManyWithoutUserInput
    holdings?: HoldingUncheckedCreateNestedManyWithoutUserInput
    positions?: PositionUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    trades?: TradeUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    gttOrders?: GTTOrderUncheckedCreateNestedManyWithoutUserInput
    alerts?: AlertUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBasketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
  }

  export type BasketItemCreateWithoutBasketInput = {
    id?: string
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    transactionType: $Enums.TransactionType
    quantity: number
    orderType: $Enums.OrderType
    price?: number | null
    triggerPrice?: number | null
    product: $Enums.ProductType
    sortOrder?: number
  }

  export type BasketItemUncheckedCreateWithoutBasketInput = {
    id?: string
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    transactionType: $Enums.TransactionType
    quantity: number
    orderType: $Enums.OrderType
    price?: number | null
    triggerPrice?: number | null
    product: $Enums.ProductType
    sortOrder?: number
  }

  export type BasketItemCreateOrConnectWithoutBasketInput = {
    where: BasketItemWhereUniqueInput
    create: XOR<BasketItemCreateWithoutBasketInput, BasketItemUncheckedCreateWithoutBasketInput>
  }

  export type BasketItemCreateManyBasketInputEnvelope = {
    data: BasketItemCreateManyBasketInput | BasketItemCreateManyBasketInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBasketsInput = {
    update: XOR<UserUpdateWithoutBasketsInput, UserUncheckedUpdateWithoutBasketsInput>
    create: XOR<UserCreateWithoutBasketsInput, UserUncheckedCreateWithoutBasketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBasketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBasketsInput, UserUncheckedUpdateWithoutBasketsInput>
  }

  export type UserUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUpdateManyWithoutUserNestedInput
    holdings?: HoldingUpdateManyWithoutUserNestedInput
    positions?: PositionUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    trades?: TradeUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUpdateManyWithoutUserNestedInput
    alerts?: AlertUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBasketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    panNumber?: NullableStringFieldUpdateOperationsInput | string | null
    aadhaarNumber?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kycStatus?: NullableEnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus | null
    accountType?: NullableEnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    twoFactorEnabled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    bankAccounts?: BankAccountUncheckedUpdateManyWithoutUserNestedInput
    funds?: FundTransactionUncheckedUpdateManyWithoutUserNestedInput
    holdings?: HoldingUncheckedUpdateManyWithoutUserNestedInput
    positions?: PositionUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    trades?: TradeUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    gttOrders?: GTTOrderUncheckedUpdateManyWithoutUserNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BasketItemUpsertWithWhereUniqueWithoutBasketInput = {
    where: BasketItemWhereUniqueInput
    update: XOR<BasketItemUpdateWithoutBasketInput, BasketItemUncheckedUpdateWithoutBasketInput>
    create: XOR<BasketItemCreateWithoutBasketInput, BasketItemUncheckedCreateWithoutBasketInput>
  }

  export type BasketItemUpdateWithWhereUniqueWithoutBasketInput = {
    where: BasketItemWhereUniqueInput
    data: XOR<BasketItemUpdateWithoutBasketInput, BasketItemUncheckedUpdateWithoutBasketInput>
  }

  export type BasketItemUpdateManyWithWhereWithoutBasketInput = {
    where: BasketItemScalarWhereInput
    data: XOR<BasketItemUpdateManyMutationInput, BasketItemUncheckedUpdateManyWithoutBasketInput>
  }

  export type BasketItemScalarWhereInput = {
    AND?: BasketItemScalarWhereInput | BasketItemScalarWhereInput[]
    OR?: BasketItemScalarWhereInput[]
    NOT?: BasketItemScalarWhereInput | BasketItemScalarWhereInput[]
    id?: StringFilter<"BasketItem"> | string
    basketId?: StringFilter<"BasketItem"> | string
    instrumentId?: StringFilter<"BasketItem"> | string
    tradingSymbol?: StringFilter<"BasketItem"> | string
    exchange?: EnumExchangeFilter<"BasketItem"> | $Enums.Exchange
    transactionType?: EnumTransactionTypeFilter<"BasketItem"> | $Enums.TransactionType
    quantity?: IntFilter<"BasketItem"> | number
    orderType?: EnumOrderTypeFilter<"BasketItem"> | $Enums.OrderType
    price?: FloatNullableFilter<"BasketItem"> | number | null
    triggerPrice?: FloatNullableFilter<"BasketItem"> | number | null
    product?: EnumProductTypeFilter<"BasketItem"> | $Enums.ProductType
    sortOrder?: IntFilter<"BasketItem"> | number
  }

  export type BasketCreateWithoutItemsInput = {
    id?: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBasketsInput
  }

  export type BasketUncheckedCreateWithoutItemsInput = {
    id?: string
    userId: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateOrConnectWithoutItemsInput = {
    where: BasketWhereUniqueInput
    create: XOR<BasketCreateWithoutItemsInput, BasketUncheckedCreateWithoutItemsInput>
  }

  export type BasketUpsertWithoutItemsInput = {
    update: XOR<BasketUpdateWithoutItemsInput, BasketUncheckedUpdateWithoutItemsInput>
    create: XOR<BasketCreateWithoutItemsInput, BasketUncheckedCreateWithoutItemsInput>
    where?: BasketWhereInput
  }

  export type BasketUpdateToOneWithWhereWithoutItemsInput = {
    where?: BasketWhereInput
    data: XOR<BasketUpdateWithoutItemsInput, BasketUncheckedUpdateWithoutItemsInput>
  }

  export type BasketUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBasketsNestedInput
  }

  export type BasketUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankAccountCreateManyUserInput = {
    id?: string
    accountNumber: string
    ifscCode: string
    bankName: string
    branchName: string
    accountHolderName: string
    accountType: $Enums.BankAccountType
    isPrimary?: boolean
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FundTransactionCreateManyUserInput = {
    id?: string
    transactionType: $Enums.FundTransactionType
    amount: number
    status?: $Enums.TransactionStatus
    paymentMode?: $Enums.PaymentMode | null
    utrNumber?: string | null
    bankAccountId?: string | null
    remarks?: string | null
    processedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HoldingCreateManyUserInput = {
    id?: string
    instrumentId: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionCreateManyUserInput = {
    id?: string
    instrumentId: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: string
    orderId: string
    instrumentId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeCreateManyUserInput = {
    id?: string
    tradeId: string
    orderId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
  }

  export type WatchlistCreateManyUserInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PortfolioCreateManyUserInput = {
    id?: string
    totalValue?: number
    investedValue?: number
    currentValue?: number
    dayChange?: number
    dayChangePercent?: number
    totalPnl?: number
    totalPnlPercent?: number
    xirr?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type GTTOrderCreateManyUserInput = {
    id?: string
    gttType: $Enums.GTTType
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    triggerType: $Enums.TriggerType
    triggerPrice: number
    lastPrice: number
    limitPrice?: number | null
    stopLossPrice?: number | null
    quantity: number
    product: $Enums.ProductType
    orderType: $Enums.OrderType
    status?: $Enums.GTTStatus
    expiresAt?: Date | string | null
    triggeredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BasketCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    totalValue?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlertCreateManyUserInput = {
    id?: string
    instrumentId?: string | null
    alertType: $Enums.AlertType
    message: string
    triggerPrice?: number | null
    condition?: string | null
    isTriggered?: boolean
    isRead?: boolean
    triggeredAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    notificationType: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    priority?: $Enums.Priority
    createdAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    ipAddress?: string | null
    userAgent?: string | null
    deviceType?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type BankAccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    branchName?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountType?: EnumBankAccountTypeFieldUpdateOperationsInput | $Enums.BankAccountType
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankAccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    branchName?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountType?: EnumBankAccountTypeFieldUpdateOperationsInput | $Enums.BankAccountType
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankAccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankName?: StringFieldUpdateOperationsInput | string
    branchName?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountType?: EnumBankAccountTypeFieldUpdateOperationsInput | $Enums.BankAccountType
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundTransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumFundTransactionTypeFieldUpdateOperationsInput | $Enums.FundTransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMode?: NullableEnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode | null
    utrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundTransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumFundTransactionTypeFieldUpdateOperationsInput | $Enums.FundTransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMode?: NullableEnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode | null
    utrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundTransactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumFundTransactionTypeFieldUpdateOperationsInput | $Enums.FundTransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    paymentMode?: NullableEnumPaymentModeFieldUpdateOperationsInput | $Enums.PaymentMode | null
    utrNumber?: NullableStringFieldUpdateOperationsInput | string | null
    bankAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HoldingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instrument?: InstrumentUpdateOneRequiredWithoutHoldingsNestedInput
  }

  export type HoldingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HoldingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instrument?: InstrumentUpdateOneRequiredWithoutPositionsNestedInput
  }

  export type PositionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instrument?: InstrumentUpdateOneRequiredWithoutOrdersNestedInput
    trades?: TradeUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trades?: TradeUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutTradesNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutTradesNestedInput
    charges?: TradeChargesUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charges?: TradeChargesUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: WatchlistItemUpdateManyWithoutWatchlistNestedInput
  }

  export type WatchlistUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: WatchlistItemUncheckedUpdateManyWithoutWatchlistNestedInput
  }

  export type WatchlistUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: FloatFieldUpdateOperationsInput | number
    investedValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    totalPnlPercent?: FloatFieldUpdateOperationsInput | number
    xirr?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: FloatFieldUpdateOperationsInput | number
    investedValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    totalPnlPercent?: FloatFieldUpdateOperationsInput | number
    xirr?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalValue?: FloatFieldUpdateOperationsInput | number
    investedValue?: FloatFieldUpdateOperationsInput | number
    currentValue?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    totalPnl?: FloatFieldUpdateOperationsInput | number
    totalPnlPercent?: FloatFieldUpdateOperationsInput | number
    xirr?: NullableFloatFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GTTOrderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gttType?: EnumGTTTypeFieldUpdateOperationsInput | $Enums.GTTType
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    triggerType?: EnumTriggerTypeFieldUpdateOperationsInput | $Enums.TriggerType
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    limitPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    stopLossPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    status?: EnumGTTStatusFieldUpdateOperationsInput | $Enums.GTTStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GTTOrderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gttType?: EnumGTTTypeFieldUpdateOperationsInput | $Enums.GTTType
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    triggerType?: EnumTriggerTypeFieldUpdateOperationsInput | $Enums.TriggerType
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    limitPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    stopLossPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    status?: EnumGTTStatusFieldUpdateOperationsInput | $Enums.GTTStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GTTOrderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    gttType?: EnumGTTTypeFieldUpdateOperationsInput | $Enums.GTTType
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    triggerType?: EnumTriggerTypeFieldUpdateOperationsInput | $Enums.TriggerType
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    limitPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    stopLossPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    status?: EnumGTTStatusFieldUpdateOperationsInput | $Enums.GTTStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BasketItemUpdateManyWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: BasketItemUncheckedUpdateManyWithoutBasketNestedInput
  }

  export type BasketUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    totalValue?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isTriggered?: BoolFieldUpdateOperationsInput | boolean
    isRead?: BoolFieldUpdateOperationsInput | boolean
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isTriggered?: BoolFieldUpdateOperationsInput | boolean
    isRead?: BoolFieldUpdateOperationsInput | boolean
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    alertType?: EnumAlertTypeFieldUpdateOperationsInput | $Enums.AlertType
    message?: StringFieldUpdateOperationsInput | string
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    isTriggered?: BoolFieldUpdateOperationsInput | boolean
    isRead?: BoolFieldUpdateOperationsInput | boolean
    triggeredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationType?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HoldingCreateManyInstrumentInput = {
    id?: string
    userId: string
    quantity: number
    averagePrice: number
    lastPrice: number
    pnl?: number
    dayChange?: number
    dayChangePercent?: number
    collateralQuantity?: number
    collateralType?: string | null
    product: $Enums.ProductType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionCreateManyInstrumentInput = {
    id?: string
    userId: string
    product: $Enums.ProductType
    quantity: number
    overnightQuantity?: number
    averagePrice: number
    lastPrice: number
    value: number
    pnl?: number
    m2m?: number
    unrealised?: number
    realised?: number
    buyQuantity?: number
    buyValue?: number
    buyPrice?: number
    sellQuantity?: number
    sellValue?: number
    sellPrice?: number
    multiplier?: number
    tradingSymbol: string
    exchange: $Enums.Exchange
    positionType: $Enums.PositionType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyInstrumentInput = {
    id?: string
    orderId: string
    userId: string
    parentOrderId?: string | null
    exchangeOrderId?: string | null
    exchangeTimestamp?: Date | string | null
    placedBy: string
    variety: $Enums.OrderVariety
    orderType: $Enums.OrderType
    transactionType: $Enums.TransactionType
    validity: $Enums.OrderValidity
    product: $Enums.ProductType
    exchange: $Enums.Exchange
    tradingSymbol: string
    quantity: number
    disclosedQuantity?: number
    price?: number
    triggerPrice?: number
    averagePrice?: number
    filledQuantity?: number
    pendingQuantity: number
    cancelledQuantity?: number
    status: $Enums.OrderStatus
    statusMessage?: string | null
    tag?: string | null
    clientOrderId?: string | null
    orderTimestamp?: Date | string
    exchangeUpdateTime?: Date | string | null
    rejectedBy?: string | null
    cancelledBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeCreateManyInstrumentInput = {
    id?: string
    tradeId: string
    orderId: string
    userId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
  }

  export type MarketDepthCreateManyInstrumentInput = {
    id?: string
    side: $Enums.OrderSide
    price: number
    quantity: number
    orders: number
    timestamp?: Date | string
  }

  export type PriceHistoryCreateManyInstrumentInput = {
    id?: string
    open: number
    high: number
    low: number
    close: number
    volume: number
    ohlcDate: Date | string
    interval: string
  }

  export type WatchlistItemCreateManyInstrumentInput = {
    id?: string
    watchlistId: string
    sortOrder?: number
    addedAt?: Date | string
  }

  export type HoldingUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHoldingsNestedInput
  }

  export type HoldingUncheckedUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HoldingUncheckedUpdateManyWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    dayChange?: FloatFieldUpdateOperationsInput | number
    dayChangePercent?: FloatFieldUpdateOperationsInput | number
    collateralQuantity?: IntFieldUpdateOperationsInput | number
    collateralType?: NullableStringFieldUpdateOperationsInput | string | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPositionsNestedInput
  }

  export type PositionUncheckedUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUncheckedUpdateManyWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    overnightQuantity?: IntFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    lastPrice?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    pnl?: FloatFieldUpdateOperationsInput | number
    m2m?: FloatFieldUpdateOperationsInput | number
    unrealised?: FloatFieldUpdateOperationsInput | number
    realised?: FloatFieldUpdateOperationsInput | number
    buyQuantity?: IntFieldUpdateOperationsInput | number
    buyValue?: FloatFieldUpdateOperationsInput | number
    buyPrice?: FloatFieldUpdateOperationsInput | number
    sellQuantity?: IntFieldUpdateOperationsInput | number
    sellValue?: FloatFieldUpdateOperationsInput | number
    sellPrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: FloatFieldUpdateOperationsInput | number
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    positionType?: EnumPositionTypeFieldUpdateOperationsInput | $Enums.PositionType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    trades?: TradeUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trades?: TradeUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    parentOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    exchangeTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    placedBy?: StringFieldUpdateOperationsInput | string
    variety?: EnumOrderVarietyFieldUpdateOperationsInput | $Enums.OrderVariety
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    validity?: EnumOrderValidityFieldUpdateOperationsInput | $Enums.OrderValidity
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    disclosedQuantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    triggerPrice?: FloatFieldUpdateOperationsInput | number
    averagePrice?: FloatFieldUpdateOperationsInput | number
    filledQuantity?: IntFieldUpdateOperationsInput | number
    pendingQuantity?: IntFieldUpdateOperationsInput | number
    cancelledQuantity?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    clientOrderId?: NullableStringFieldUpdateOperationsInput | string | null
    orderTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    exchangeUpdateTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    rejectedBy?: NullableStringFieldUpdateOperationsInput | string | null
    cancelledBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: OrderUpdateOneRequiredWithoutTradesNestedInput
    user?: UserUpdateOneRequiredWithoutTradesNestedInput
    charges?: TradeChargesUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charges?: TradeChargesUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateManyWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketDepthUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    side?: EnumOrderSideFieldUpdateOperationsInput | $Enums.OrderSide
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketDepthUncheckedUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    side?: EnumOrderSideFieldUpdateOperationsInput | $Enums.OrderSide
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketDepthUncheckedUpdateManyWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    side?: EnumOrderSideFieldUpdateOperationsInput | $Enums.OrderSide
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PriceHistoryUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    open?: FloatFieldUpdateOperationsInput | number
    high?: FloatFieldUpdateOperationsInput | number
    low?: FloatFieldUpdateOperationsInput | number
    close?: FloatFieldUpdateOperationsInput | number
    volume?: IntFieldUpdateOperationsInput | number
    ohlcDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interval?: StringFieldUpdateOperationsInput | string
  }

  export type PriceHistoryUncheckedUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    open?: FloatFieldUpdateOperationsInput | number
    high?: FloatFieldUpdateOperationsInput | number
    low?: FloatFieldUpdateOperationsInput | number
    close?: FloatFieldUpdateOperationsInput | number
    volume?: IntFieldUpdateOperationsInput | number
    ohlcDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interval?: StringFieldUpdateOperationsInput | string
  }

  export type PriceHistoryUncheckedUpdateManyWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    open?: FloatFieldUpdateOperationsInput | number
    high?: FloatFieldUpdateOperationsInput | number
    low?: FloatFieldUpdateOperationsInput | number
    close?: FloatFieldUpdateOperationsInput | number
    volume?: IntFieldUpdateOperationsInput | number
    ohlcDate?: DateTimeFieldUpdateOperationsInput | Date | string
    interval?: StringFieldUpdateOperationsInput | string
  }

  export type WatchlistItemUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchlist?: WatchlistUpdateOneRequiredWithoutItemsNestedInput
  }

  export type WatchlistItemUncheckedUpdateWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    watchlistId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistItemUncheckedUpdateManyWithoutInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    watchlistId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCreateManyOrderInput = {
    id?: string
    tradeId: string
    userId: string
    instrumentId: string
    exchange: $Enums.Exchange
    tradingSymbol: string
    transactionType: $Enums.TransactionType
    product: $Enums.ProductType
    quantity: number
    price: number
    value: number
    exchangeTimestamp: Date | string
    createdAt?: Date | string
  }

  export type TradeUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradesNestedInput
    instrument?: InstrumentUpdateOneRequiredWithoutTradesNestedInput
    charges?: TradeChargesUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    charges?: TradeChargesUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    tradeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    quantity?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    exchangeTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistItemCreateManyWatchlistInput = {
    id?: string
    instrumentId: string
    sortOrder?: number
    addedAt?: Date | string
  }

  export type WatchlistItemUpdateWithoutWatchlistInput = {
    id?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instrument?: InstrumentUpdateOneRequiredWithoutWatchlistItemsNestedInput
  }

  export type WatchlistItemUncheckedUpdateWithoutWatchlistInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistItemUncheckedUpdateManyWithoutWatchlistInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    sortOrder?: IntFieldUpdateOperationsInput | number
    addedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BasketItemCreateManyBasketInput = {
    id?: string
    instrumentId: string
    tradingSymbol: string
    exchange: $Enums.Exchange
    transactionType: $Enums.TransactionType
    quantity: number
    orderType: $Enums.OrderType
    price?: number | null
    triggerPrice?: number | null
    product: $Enums.ProductType
    sortOrder?: number
  }

  export type BasketItemUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    quantity?: IntFieldUpdateOperationsInput | number
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BasketItemUncheckedUpdateWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    quantity?: IntFieldUpdateOperationsInput | number
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    sortOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BasketItemUncheckedUpdateManyWithoutBasketInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrumentId?: StringFieldUpdateOperationsInput | string
    tradingSymbol?: StringFieldUpdateOperationsInput | string
    exchange?: EnumExchangeFieldUpdateOperationsInput | $Enums.Exchange
    transactionType?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    quantity?: IntFieldUpdateOperationsInput | number
    orderType?: EnumOrderTypeFieldUpdateOperationsInput | $Enums.OrderType
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    triggerPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    product?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    sortOrder?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}