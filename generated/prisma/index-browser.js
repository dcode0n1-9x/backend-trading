
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  panNumber: 'panNumber',
  aadhaarNumber: 'aadhaarNumber',
  dob: 'dob',
  kycStatus: 'kycStatus',
  accountType: 'accountType',
  role: 'role',
  isActive: 'isActive',
  twoFactorEnabled: 'twoFactorEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isVerified: 'isVerified',
  segment: 'segment'
};

exports.Prisma.UserVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stage: 'stage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  fatherName: 'fatherName',
  motherName: 'motherName',
  maritalStatus: 'maritalStatus',
  country: 'country',
  occupation: 'occupation',
  annualIncome: 'annualIncome',
  tradingExperience: 'tradingExperience',
  riskProfile: 'riskProfile',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountNumber: 'accountNumber',
  ifscCode: 'ifscCode',
  bankName: 'bankName',
  branchName: 'branchName',
  accountHolderName: 'accountHolderName',
  accountType: 'accountType',
  isPrimary: 'isPrimary',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.FundTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  transactionType: 'transactionType',
  amount: 'amount',
  status: 'status',
  paymentMode: 'paymentMode',
  utrNumber: 'utrNumber',
  bankAccountId: 'bankAccountId',
  remarks: 'remarks',
  processedAt: 'processedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarginScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  availableCash: 'availableCash',
  usedMargin: 'usedMargin',
  availableMargin: 'availableMargin',
  collateralValue: 'collateralValue',
  openingBalance: 'openingBalance',
  payin: 'payin',
  payout: 'payout',
  spanMargin: 'spanMargin',
  exposureMargin: 'exposureMargin',
  optionPremium: 'optionPremium',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstrumentScalarFieldEnum = {
  id: 'id',
  instrumentToken: 'instrumentToken',
  exchangeToken: 'exchangeToken',
  tradingSymbol: 'tradingSymbol',
  name: 'name',
  exchange: 'exchange',
  segment: 'segment',
  instrumentType: 'instrumentType',
  tickSize: 'tickSize',
  lotSize: 'lotSize',
  expiry: 'expiry',
  strike: 'strike',
  isin: 'isin',
  isActive: 'isActive',
  lastPrice: 'lastPrice',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketDepthScalarFieldEnum = {
  id: 'id',
  instrumentId: 'instrumentId',
  side: 'side',
  price: 'price',
  quantity: 'quantity',
  orders: 'orders',
  timestamp: 'timestamp'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  instrumentId: 'instrumentId',
  open: 'open',
  high: 'high',
  low: 'low',
  close: 'close',
  volume: 'volume',
  ohlcDate: 'ohlcDate',
  interval: 'interval'
};

exports.Prisma.PortfolioScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalValue: 'totalValue',
  investedValue: 'investedValue',
  currentValue: 'currentValue',
  dayChange: 'dayChange',
  dayChangePercent: 'dayChangePercent',
  totalPnl: 'totalPnl',
  totalPnlPercent: 'totalPnlPercent',
  xirr: 'xirr',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.HoldingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  quantity: 'quantity',
  averagePrice: 'averagePrice',
  lastPrice: 'lastPrice',
  pnl: 'pnl',
  dayChange: 'dayChange',
  dayChangePercent: 'dayChangePercent',
  collateralQuantity: 'collateralQuantity',
  collateralType: 'collateralType',
  product: 'product',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PositionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  product: 'product',
  quantity: 'quantity',
  overnightQuantity: 'overnightQuantity',
  averagePrice: 'averagePrice',
  lastPrice: 'lastPrice',
  value: 'value',
  pnl: 'pnl',
  m2m: 'm2m',
  unrealised: 'unrealised',
  realised: 'realised',
  buyQuantity: 'buyQuantity',
  buyValue: 'buyValue',
  buyPrice: 'buyPrice',
  sellQuantity: 'sellQuantity',
  sellValue: 'sellValue',
  sellPrice: 'sellPrice',
  multiplier: 'multiplier',
  tradingSymbol: 'tradingSymbol',
  exchange: 'exchange',
  positionType: 'positionType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  instrumentId: 'instrumentId',
  parentOrderId: 'parentOrderId',
  exchangeOrderId: 'exchangeOrderId',
  exchangeTimestamp: 'exchangeTimestamp',
  placedBy: 'placedBy',
  variety: 'variety',
  orderType: 'orderType',
  transactionType: 'transactionType',
  validity: 'validity',
  product: 'product',
  exchange: 'exchange',
  tradingSymbol: 'tradingSymbol',
  quantity: 'quantity',
  disclosedQuantity: 'disclosedQuantity',
  price: 'price',
  triggerPrice: 'triggerPrice',
  averagePrice: 'averagePrice',
  filledQuantity: 'filledQuantity',
  pendingQuantity: 'pendingQuantity',
  cancelledQuantity: 'cancelledQuantity',
  status: 'status',
  statusMessage: 'statusMessage',
  tag: 'tag',
  clientOrderId: 'clientOrderId',
  orderTimestamp: 'orderTimestamp',
  exchangeUpdateTime: 'exchangeUpdateTime',
  rejectedBy: 'rejectedBy',
  cancelledBy: 'cancelledBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TradeScalarFieldEnum = {
  id: 'id',
  tradeId: 'tradeId',
  orderId: 'orderId',
  userId: 'userId',
  instrumentId: 'instrumentId',
  exchange: 'exchange',
  tradingSymbol: 'tradingSymbol',
  transactionType: 'transactionType',
  product: 'product',
  quantity: 'quantity',
  price: 'price',
  value: 'value',
  exchangeTimestamp: 'exchangeTimestamp',
  createdAt: 'createdAt'
};

exports.Prisma.TradeChargesScalarFieldEnum = {
  id: 'id',
  tradeId: 'tradeId',
  brokerage: 'brokerage',
  stt: 'stt',
  exchangeTxnCharge: 'exchangeTxnCharge',
  gst: 'gst',
  sebiTurnover: 'sebiTurnover',
  stampDuty: 'stampDuty',
  totalCharges: 'totalCharges',
  netAmount: 'netAmount'
};

exports.Prisma.GTTOrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gttType: 'gttType',
  instrumentId: 'instrumentId',
  tradingSymbol: 'tradingSymbol',
  exchange: 'exchange',
  triggerType: 'triggerType',
  triggerPrice: 'triggerPrice',
  lastPrice: 'lastPrice',
  limitPrice: 'limitPrice',
  stopLossPrice: 'stopLossPrice',
  quantity: 'quantity',
  product: 'product',
  orderType: 'orderType',
  status: 'status',
  expiresAt: 'expiresAt',
  triggeredAt: 'triggeredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WatchlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WatchlistItemScalarFieldEnum = {
  id: 'id',
  watchlistId: 'watchlistId',
  instrumentId: 'instrumentId',
  sortOrder: 'sortOrder',
  addedAt: 'addedAt'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  alertType: 'alertType',
  message: 'message',
  triggerPrice: 'triggerPrice',
  condition: 'condition',
  isTriggered: 'isTriggered',
  isRead: 'isRead',
  triggeredAt: 'triggeredAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  notificationType: 'notificationType',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  priority: 'priority',
  createdAt: 'createdAt'
};

exports.Prisma.BasketScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  totalValue: 'totalValue',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BasketItemScalarFieldEnum = {
  id: 'id',
  basketId: 'basketId',
  instrumentId: 'instrumentId',
  tradingSymbol: 'tradingSymbol',
  exchange: 'exchange',
  transactionType: 'transactionType',
  quantity: 'quantity',
  orderType: 'orderType',
  price: 'price',
  triggerPrice: 'triggerPrice',
  product: 'product',
  sortOrder: 'sortOrder'
};

exports.Prisma.CorporateActionScalarFieldEnum = {
  id: 'id',
  instrumentId: 'instrumentId',
  actionType: 'actionType',
  exDate: 'exDate',
  recordDate: 'recordDate',
  announcementDate: 'announcementDate',
  description: 'description',
  oldSymbol: 'oldSymbol',
  newSymbol: 'newSymbol',
  ratio: 'ratio',
  dividendAmount: 'dividendAmount',
  isProcessed: 'isProcessed',
  processedAt: 'processedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TradeJournalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tradeId: 'tradeId',
  orderId: 'orderId',
  date: 'date',
  notes: 'notes',
  tags: 'tags',
  strategy: 'strategy',
  emotionalState: 'emotionalState',
  learnings: 'learnings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailyPnLScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  realizedPnl: 'realizedPnl',
  unrealizedPnl: 'unrealizedPnl',
  totalPnl: 'totalPnl',
  equityPnl: 'equityPnl',
  foPnl: 'foPnl',
  commodityPnl: 'commodityPnl',
  charges: 'charges',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  panNumber: 'panNumber',
  aadhaarNumber: 'aadhaarNumber'
};

exports.Prisma.UserVerificationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.UserProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  pincode: 'pincode',
  fatherName: 'fatherName',
  motherName: 'motherName',
  maritalStatus: 'maritalStatus',
  country: 'country',
  occupation: 'occupation',
  annualIncome: 'annualIncome',
  tradingExperience: 'tradingExperience'
};

exports.Prisma.BankAccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountNumber: 'accountNumber',
  ifscCode: 'ifscCode',
  bankName: 'bankName',
  branchName: 'branchName',
  accountHolderName: 'accountHolderName'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceType: 'deviceType'
};

exports.Prisma.FundTransactionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  utrNumber: 'utrNumber',
  bankAccountId: 'bankAccountId',
  remarks: 'remarks'
};

exports.Prisma.MarginOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.InstrumentOrderByRelevanceFieldEnum = {
  id: 'id',
  instrumentToken: 'instrumentToken',
  exchangeToken: 'exchangeToken',
  tradingSymbol: 'tradingSymbol',
  name: 'name',
  isin: 'isin'
};

exports.Prisma.MarketDepthOrderByRelevanceFieldEnum = {
  id: 'id',
  instrumentId: 'instrumentId'
};

exports.Prisma.PriceHistoryOrderByRelevanceFieldEnum = {
  id: 'id',
  instrumentId: 'instrumentId',
  interval: 'interval'
};

exports.Prisma.PortfolioOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.HoldingOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  collateralType: 'collateralType'
};

exports.Prisma.PositionOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  tradingSymbol: 'tradingSymbol'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  userId: 'userId',
  instrumentId: 'instrumentId',
  parentOrderId: 'parentOrderId',
  exchangeOrderId: 'exchangeOrderId',
  placedBy: 'placedBy',
  tradingSymbol: 'tradingSymbol',
  statusMessage: 'statusMessage',
  tag: 'tag',
  clientOrderId: 'clientOrderId',
  rejectedBy: 'rejectedBy',
  cancelledBy: 'cancelledBy'
};

exports.Prisma.TradeOrderByRelevanceFieldEnum = {
  id: 'id',
  tradeId: 'tradeId',
  orderId: 'orderId',
  userId: 'userId',
  instrumentId: 'instrumentId',
  tradingSymbol: 'tradingSymbol'
};

exports.Prisma.TradeChargesOrderByRelevanceFieldEnum = {
  id: 'id',
  tradeId: 'tradeId'
};

exports.Prisma.GTTOrderOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  tradingSymbol: 'tradingSymbol'
};

exports.Prisma.WatchlistOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name'
};

exports.Prisma.WatchlistItemOrderByRelevanceFieldEnum = {
  id: 'id',
  watchlistId: 'watchlistId',
  instrumentId: 'instrumentId'
};

exports.Prisma.AlertOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  instrumentId: 'instrumentId',
  message: 'message',
  condition: 'condition'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message'
};

exports.Prisma.BasketOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description'
};

exports.Prisma.BasketItemOrderByRelevanceFieldEnum = {
  id: 'id',
  basketId: 'basketId',
  instrumentId: 'instrumentId',
  tradingSymbol: 'tradingSymbol'
};

exports.Prisma.CorporateActionOrderByRelevanceFieldEnum = {
  id: 'id',
  instrumentId: 'instrumentId',
  description: 'description',
  oldSymbol: 'oldSymbol',
  newSymbol: 'newSymbol',
  ratio: 'ratio'
};

exports.Prisma.TradeJournalOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  tradeId: 'tradeId',
  orderId: 'orderId',
  notes: 'notes',
  tags: 'tags',
  strategy: 'strategy',
  emotionalState: 'emotionalState',
  learnings: 'learnings'
};

exports.Prisma.DailyPnLOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId'
};
exports.KYCStatus = exports.$Enums.KYCStatus = {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.AccountType = exports.$Enums.AccountType = {
  INDIVIDUAL: 'INDIVIDUAL',
  CORPORATE: 'CORPORATE',
  PARTNERSHIP: 'PARTNERSHIP',
  HUF: 'HUF'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  BROKER: 'BROKER'
};

exports.Segment = exports.$Enums.Segment = {
  EQUITY: 'EQUITY',
  FUTURES: 'FUTURES',
  OPTIONS: 'OPTIONS',
  CURRENCY: 'CURRENCY',
  COMMODITY: 'COMMODITY'
};

exports.KYCStage = exports.$Enums.KYCStage = {
  ZERO: 'ZERO',
  ONE: 'ONE',
  TWO: 'TWO',
  THREE: 'THREE'
};

exports.RiskProfile = exports.$Enums.RiskProfile = {
  LOW: 'LOW',
  MODERATE: 'MODERATE',
  HIGH: 'HIGH'
};

exports.BankAccountType = exports.$Enums.BankAccountType = {
  SAVINGS: 'SAVINGS',
  CURRENT: 'CURRENT'
};

exports.FundTransactionType = exports.$Enums.FundTransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMode = exports.$Enums.PaymentMode = {
  UPI: 'UPI',
  NET_BANKING: 'NET_BANKING',
  NEFT: 'NEFT',
  RTGS: 'RTGS',
  IMPS: 'IMPS'
};

exports.Exchange = exports.$Enums.Exchange = {
  NSE: 'NSE',
  BSE: 'BSE',
  NFO: 'NFO',
  BFO: 'BFO',
  CDS: 'CDS',
  MCX: 'MCX'
};

exports.InstrumentType = exports.$Enums.InstrumentType = {
  EQ: 'EQ',
  FUTIDX: 'FUTIDX',
  FUTSTK: 'FUTSTK',
  OPTIDX: 'OPTIDX',
  OPTSTK: 'OPTSTK',
  FUTCOM: 'FUTCOM',
  OPTCOM: 'OPTCOM',
  FUTCUR: 'FUTCUR',
  OPTCUR: 'OPTCUR'
};

exports.OrderSide = exports.$Enums.OrderSide = {
  BUY: 'BUY',
  SELL: 'SELL'
};

exports.ProductType = exports.$Enums.ProductType = {
  CNC: 'CNC',
  MIS: 'MIS',
  NRML: 'NRML'
};

exports.PositionType = exports.$Enums.PositionType = {
  DAY: 'DAY',
  OVERNIGHT: 'OVERNIGHT'
};

exports.OrderVariety = exports.$Enums.OrderVariety = {
  REGULAR: 'REGULAR',
  AMO: 'AMO',
  BO: 'BO',
  CO: 'CO',
  ICEBERG: 'ICEBERG'
};

exports.OrderType = exports.$Enums.OrderType = {
  MARKET: 'MARKET',
  LIMIT: 'LIMIT',
  SL: 'SL',
  SLM: 'SLM'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  BUY: 'BUY',
  SELL: 'SELL'
};

exports.OrderValidity = exports.$Enums.OrderValidity = {
  DAY: 'DAY',
  IOC: 'IOC',
  TTL: 'TTL'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  OPEN: 'OPEN',
  COMPLETE: 'COMPLETE',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED',
  MODIFIED: 'MODIFIED',
  TRIGGER_PENDING: 'TRIGGER_PENDING'
};

exports.GTTType = exports.$Enums.GTTType = {
  SINGLE: 'SINGLE',
  OCO: 'OCO'
};

exports.TriggerType = exports.$Enums.TriggerType = {
  SINGLE: 'SINGLE',
  TWO_LEG: 'TWO_LEG'
};

exports.GTTStatus = exports.$Enums.GTTStatus = {
  ACTIVE: 'ACTIVE',
  TRIGGERED: 'TRIGGERED',
  DISABLED: 'DISABLED',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

exports.AlertType = exports.$Enums.AlertType = {
  PRICE_ALERT: 'PRICE_ALERT',
  PERCENTAGE_CHANGE: 'PERCENTAGE_CHANGE',
  VOLUME_SPIKE: 'VOLUME_SPIKE',
  NEWS: 'NEWS',
  CORPORATE_ACTION: 'CORPORATE_ACTION',
  MARGIN_CALL: 'MARGIN_CALL',
  ORDER_UPDATE: 'ORDER_UPDATE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER_UPDATE: 'ORDER_UPDATE',
  TRADE_EXECUTED: 'TRADE_EXECUTED',
  FUND_UPDATE: 'FUND_UPDATE',
  MARGIN_CALL: 'MARGIN_CALL',
  GTT_TRIGGERED: 'GTT_TRIGGERED',
  CORPORATE_ACTION: 'CORPORATE_ACTION',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.CorporateActionType = exports.$Enums.CorporateActionType = {
  DIVIDEND: 'DIVIDEND',
  BONUS: 'BONUS',
  SPLIT: 'SPLIT',
  MERGER: 'MERGER',
  RIGHTS: 'RIGHTS',
  BUYBACK: 'BUYBACK',
  DELISTING: 'DELISTING'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserVerification: 'UserVerification',
  UserProfile: 'UserProfile',
  BankAccount: 'BankAccount',
  Session: 'Session',
  FundTransaction: 'FundTransaction',
  Margin: 'Margin',
  Instrument: 'Instrument',
  MarketDepth: 'MarketDepth',
  PriceHistory: 'PriceHistory',
  Portfolio: 'Portfolio',
  Holding: 'Holding',
  Position: 'Position',
  Order: 'Order',
  Trade: 'Trade',
  TradeCharges: 'TradeCharges',
  GTTOrder: 'GTTOrder',
  Watchlist: 'Watchlist',
  WatchlistItem: 'WatchlistItem',
  Alert: 'Alert',
  Notification: 'Notification',
  Basket: 'Basket',
  BasketItem: 'BasketItem',
  CorporateAction: 'CorporateAction',
  TradeJournal: 'TradeJournal',
  DailyPnL: 'DailyPnL'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
